WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.087 --> 00:12:02.122 align:middle line:-2
则表明该用户
不再处于订阅有效期内了

00:12:02.189 --> 00:12:04.091 align:middle line:-1
但是如果该日期是将来某天

00:12:04.291 --> 00:12:07.761 align:middle line:-1
则表示此用户仍处于有效订阅期

00:12:08.328 --> 00:12:11.398 align:middle line:-2
我们通过刚才这个例子
来看看这是如何工作的

00:12:13.333 --> 00:12:16.103 align:middle line:-2
获取与该用户关联的
originalTransactionId

00:12:16.837 --> 00:12:20.307 align:middle line:-1
并提取与此订阅相关的所有交易

00:12:20.741 --> 00:12:23.377 align:middle line:-2
然后使用其expires_date字段
对这些交易进行排序

00:12:23.777 --> 00:12:26.046 align:middle line:-1
并找到具有最新过期日期的那个

00:12:26.113 --> 00:12:30.217 align:middle line:-2
现在你可以使用该expires_date
来更新该用户的

00:12:30.284 --> 00:12:31.485 align:middle line:-1
latestExpiresDate字段

00:12:32.519 --> 00:12:34.221 align:middle line:-1
当你这样做时 你正在有效地

00:12:34.288 --> 00:12:37.191 align:middle line:-1
将该用户的订阅期延长一段时间

00:12:37.357 --> 00:12:38.792 align:middle line:-1
你的服务器端逻辑现在知道

00:12:38.859 --> 00:12:40.894 align:middle line:-1
该用户位于有效的订阅时间窗口中

00:12:41.828 --> 00:12:44.198 align:middle line:-2
当然 当你正在处理通过
StoreKit发送的续订交易时

00:12:44.264 --> 00:12:46.967 align:middle line:-1
你仍然需要告知设备

00:12:47.034 --> 00:12:48.869 align:middle line:-1
它通过了这些验证检查

00:12:49.403 --> 00:12:51.371 align:middle line:-1
并让你的app

00:12:51.438 --> 00:12:53.407 align:middle line:-1
再次调用finishTransaction函数

00:12:53.473 --> 00:12:55.542 align:middle line:-1
（在设备上完成所有交易）

00:12:57.411 --> 00:12:59.847 align:middle line:-1
假设你已经设置并能正常工作

