WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:56.250 --> 00:07:01.421 align:start position:27% line:-2
例に戻って
プロセスを見ていきましょう

00:07:01.889 --> 00:07:05.859 align:start position:23% line:-2
バンドル内の
レシートのURL APIを使い

00:07:05.959 --> 00:07:09.596 align:start position:27% line:-2
レシートデータに
オブザーバでアクセスします

00:07:09.930 --> 00:07:15.002 align:start position:27% line:-2
そこでファイル内の
バイナリデータを取得します

00:07:15.102 --> 00:07:18.939 align:start position:20% line:-2
receiptDataと
base64Encodeを取得して

00:07:19.039 --> 00:07:21.675 align:start position:27% line:-1
サーバに送信し 処理します

00:07:21.775 --> 00:07:25.746 align:start position:18% line:-2
ユーザのApp内ネットワークAPIを
提供してもよいでしょう

00:07:27.214 --> 00:07:31.552 align:start position:32% line:-2
処理用のデータ送信は
安全に行います

00:07:31.652 --> 00:07:36.323 align:start position:27% line:-2
トランザクション･
エンドポイントに送信すると

00:07:36.423 --> 00:07:41.295 align:start position:27% line:-2
このユーザIDが
自分のシステム上に現れます

00:07:41.795 --> 00:07:47.134 align:start position:18% line:-2
レシートデータをサーバに送ると
App Storeのエンドポイントに

00:07:47.234 --> 00:07:49.970 align:start position:25% line:-1
安全な接続が確立できるのです

00:07:50.070 --> 00:07:53.373 align:start position:21% line:-2
レシートデータが
App Storeに送信されると

00:07:53.740 --> 00:07:58.212 align:start position:21% line:-2
パスワードはApp Storeと
アプリケーションで共有され

00:07:58.312 --> 00:08:02.282 align:start position:14% line:-2
App Store Connectに設定
サーバに保存されます

