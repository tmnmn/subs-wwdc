WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.058 --> 00:21:00.761 align:middle line:-1
并且具有相同线程标识符的通知

00:21:00.827 --> 00:21:01.929 align:middle line:-1
都被分组在一起

00:21:02.229 --> 00:21:03.730 align:middle line:-1
就这样 超级简单

00:21:06.333 --> 00:21:09.970 align:middle line:-2
所以线程是很有意义的
你可以把单独对话分组在一起

00:21:10.037 --> 00:21:11.672 align:middle line:-1
但是其他类型的内容呢？

00:21:11.872 --> 00:21:13.640 align:middle line:-2
这些情况下
我们该如何处理分组？

00:21:13.974 --> 00:21:15.175 align:middle line:-1
好吧 让我们看看新闻

00:21:15.242 --> 00:21:17.411 align:middle line:-1
每个源都被断开成为一个单独的线程

00:21:18.478 --> 00:21:20.514 align:middle line:-2
你可以看到有一个组来自
《纽约时报》…

00:21:21.181 --> 00:21:22.416 align:middle line:-1
一个组来自Quartz…

00:21:23.517 --> 00:21:25.285 align:middle line:0
一个组来自《华盛顿邮报》

00:21:26.386 --> 00:21:28.355 align:middle line:-1
这是一个非常有用的方法

00:21:28.422 --> 00:21:30.924 align:middle line:-2
可以找到并组织
从新闻app中传递的内容

00:21:32.292 --> 00:21:33.994 align:middle line:-1
让我们看看另一个例子

00:21:34.294 --> 00:21:35.329 align:middle line:-1
播客

00:21:35.395 --> 00:21:37.698 align:middle line:-2
他们用他们的通知
真的做了一件聪明的事

00:21:37.764 --> 00:21:39.967 align:middle line:-1
他们创建了一个特殊的线程

00:21:40.033 --> 00:21:42.569 align:middle line:-1
将你的所有新的事件都组在一起

00:21:42.870 --> 00:21:45.372 align:middle line:-2
他们所做的是抵挡住了
把每一个单独的播客

00:21:45.439 --> 00:21:49.309 align:middle line:-1
宣布为是一个单独的线索的诱惑

00:21:49.776 --> 00:21:51.945 align:middle line:-1
因为请记住线程化是用来整合

00:21:52.012 --> 00:21:53.514 align:middle line:-1
和组织内容的

00:21:53.981 --> 00:21:55.716 align:middle line:-1
所以当滚动阅读你的通知历史时

00:21:55.782 --> 00:21:59.386 align:middle line:-1
我认为在一个组中查看所有

00:21:59.753 --> 00:22:00.988 align:middle line:-1
新的播客片段

