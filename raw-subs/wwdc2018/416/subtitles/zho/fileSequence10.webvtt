WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.866 --> 00:10:01.046 A:middle
“Virtual memory trace（虚拟内存追踪）”

00:10:01.786 --> 00:10:03.326 A:middle
你可以凭借它

00:10:03.326 --> 00:10:04.446 A:middle
与你 App 相关的虚拟内存系统的性能

00:10:04.446 --> 00:10:06.726 A:middle
进行深入的了解

00:10:08.736 --> 00:10:10.486 A:middle
我发现这里的 “By Operation” 标签页

00:10:10.486 --> 00:10:11.226 A:middle
非常有用

00:10:11.916 --> 00:10:12.996 A:middle
它为你提供了一个

00:10:12.996 --> 00:10:14.386 A:middle
虚拟内存系统文件

00:10:14.386 --> 00:10:16.376 A:middle
并向你展示虚拟内存的内存页缓存命中

00:10:16.376 --> 00:10:18.826 A:middle
以及内存页零填充之类的内容

00:10:21.016 --> 00:10:22.536 A:middle
Kyle 前面提到

00:10:22.536 --> 00:10:23.726 A:middle
如果你接近设备的内存限制

00:10:23.726 --> 00:10:25.146 A:middle
你将收到

00:10:25.146 --> 00:10:26.766 A:middle
EXC_RESOURCE_EXCEPTION 的异常

00:10:27.276 --> 00:10:28.346 A:middle
如果你正在 Xcode 10 中

00:10:28.346 --> 00:10:31.136 A:middle
运行你的 App

00:10:31.136 --> 00:10:32.586 A:middle
Xcode 将会捕获这个异常

00:10:32.586 --> 00:10:33.266 A:middle
并暂停你的 App

00:10:33.636 --> 00:10:35.636 A:middle
这意味着你可以启动内存调试器

00:10:35.636 --> 00:10:36.816 A:middle
并从那里开始调查

00:10:37.066 --> 00:10:38.436 A:middle
我认为这真的十分有用

00:10:39.016 --> 00:10:42.006 A:middle
Xcode 的内存调试器

00:10:42.006 --> 00:10:43.606 A:middle
是在 Xcode 8 中提供的

00:10:43.606 --> 00:10:44.926 A:middle
它可以帮助你跟踪对象的依赖

00:10:44.926 --> 00:10:46.546 A:middle
声明周期和泄漏

00:10:46.996 --> 00:10:48.336 A:middle
在 Xcode 10 中

00:10:48.336 --> 00:10:50.036 A:middle
内存调试器更新了布局

00:10:50.536 --> 00:10:52.066 A:middle
它非常适合用来查看

00:10:52.066 --> 00:10:52.986 A:middle
非常大的内存图文件

00:10:53.926 --> 00:10:55.836 A:middle
在内部

00:10:55.836 --> 00:10:57.456 A:middle
Xcode 使用 Memgraph 文件格式

00:10:57.456 --> 00:10:58.916 A:middle
存储有关 App 的

00:10:58.916 --> 00:10:59.706 A:middle
内存使用的信息

