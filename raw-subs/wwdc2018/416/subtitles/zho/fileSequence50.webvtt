WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.076 --> 00:50:01.076 A:middle
我们要确保 iOS

00:50:01.956 --> 00:50:03.496 A:middle
可以为我们选择图像格式

00:50:03.746 --> 00:50:06.156 A:middle
通过使用新的 UIImage 的

00:50:06.156 --> 00:50:08.766 A:middle
GraphicsRenderer API

00:50:08.766 --> 00:50:10.576 A:middle
我们可以从 SRGB 到 alpha 8 的转变过程中

00:50:10.846 --> 00:50:11.996 A:middle
节省 75% 的内存使用

00:50:11.996 --> 00:50:14.596 A:middle
这对蒙版和文本来说都很重要

00:50:16.376 --> 00:50:18.166 A:middle
除此之外 我们可以使用 ImageIO

00:50:18.936 --> 00:50:20.446 A:middle
来对图像进行下采样

00:50:21.176 --> 00:50:22.836 A:middle
它可以防止过高的内存峰值

00:50:22.836 --> 00:50:24.646 A:middle
相较于将 UIImage 绘制到

00:50:24.646 --> 00:50:25.836 A:middle
更小的环境中时

00:50:25.836 --> 00:50:26.776 A:middle
它也会更快

00:50:27.176 --> 00:50:30.856 A:middle
最后 我们要卸载

00:50:30.856 --> 00:50:32.706 A:middle
不在屏幕上的

00:50:32.706 --> 00:50:33.516 A:middle
大型图像和资源

00:50:33.886 --> 00:50:34.886 A:middle
使用这些内存是没有意义的

00:50:34.886 --> 00:50:36.836 A:middle
因为用户看不到它们

00:50:38.166 --> 00:50:39.936 A:middle
即使经历了所有这些努力

00:50:40.156 --> 00:50:40.896 A:middle
我们仍然没有完成

00:50:42.006 --> 00:50:44.216 A:middle
正如我们刚才看到的

00:50:44.326 --> 00:50:45.926 A:middle
使用 Memgraph 可以帮助我们

00:50:46.346 --> 00:50:47.606 A:middle
进一步了解发生了什么

00:50:47.606 --> 00:50:48.306 A:middle
并减少内存占用

00:50:48.686 --> 00:50:49.576 A:middle
结合 malloc_history

00:50:49.576 --> 00:50:50.906 A:middle
我们可以深入了解

00:50:50.906 --> 00:50:52.966 A:middle
内存的去向以及用途

00:50:54.026 --> 00:50:56.046 A:middle
所以我建议

00:50:56.046 --> 00:50:58.456 A:middle
大家能在讨论会后打开 malloc_history

00:50:58.456 --> 00:51:00.426 A:middle
分析你的工具

