WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:01.106 --> 00:21:03.006 A:middle
如果你不再使用

00:21:03.006 --> 00:21:04.876 A:middle
自 iOS 诞生起就存在于 iOS 的

00:21:04.876 --> 00:21:07.416 A:middle
UIGraphicsBeginImageContext

00:21:07.416 --> 00:21:09.276 A:middle
WithOptions API

00:21:09.276 --> 00:21:12.576 A:middle
而是切换到 UIGraphicsImageRenderer 格式

00:21:12.576 --> 00:21:14.206 A:middle
你可以节省很多内存

00:21:15.036 --> 00:21:17.456 A:middle
因为 UIGraphicsBeginImage

00:21:17.456 --> 00:21:19.006 A:middle
ContextWithOptions 总是一个

00:21:19.356 --> 00:21:20.916 A:middle
每像素 4 字节的格式

00:21:21.886 --> 00:21:22.866 A:middle
它总是 SRGB 格式

00:21:23.186 --> 00:21:25.446 A:middle
所以只要你不想 你就不会得到宽格式

00:21:25.446 --> 00:21:27.216 A:middle
也不会得到

00:21:27.216 --> 00:21:28.596 A:middle
每像素 1 字节的 A8 格式

00:21:28.716 --> 00:21:30.966 A:middle
如果你使用在 iOS 10 中引入的

00:21:31.566 --> 00:21:33.576 A:middle
UIGraphicsImageRenderer API

00:21:33.626 --> 00:21:35.156 A:middle
在 iOS 12 中

00:21:35.156 --> 00:21:36.396 A:middle
它会自动为你选择最好的图形格式

00:21:36.866 --> 00:21:39.176 A:middle
这有一个例子

00:21:39.716 --> 00:21:41.146 A:middle
假设我画了一个圆作为一个蒙版

00:21:41.956 --> 00:21:43.666 A:middle
使用旧 API

00:21:43.666 --> 00:21:45.626 A:middle
高亮的部分是

00:21:45.626 --> 00:21:46.866 A:middle
我的绘制代码

00:21:46.866 --> 00:21:48.326 A:middle
只是为了绘制一个黑色圆圈

00:21:48.326 --> 00:21:49.586 A:middle
我得到的却是每个像素 4 字节的格式

00:21:51.026 --> 00:21:52.366 A:middle
如果我转而使用新的 API

00:21:52.366 --> 00:21:54.826 A:middle
我使用的是完全相同的绘制代码

00:21:55.676 --> 00:21:57.406 A:middle
通过使用新的 API

00:21:57.406 --> 00:21:59.096 A:middle
我现在得到的是每个像素 1 字节的图像

00:21:59.176 --> 00:22:01.396 A:middle
这意味着它减少了

