WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.306 --> 00:16:00.576 A:middle
“Diagnostics（诊断）”标签页中 轻松启用它

00:16:01.426 --> 00:16:02.576 A:middle
我建议你们

00:16:02.576 --> 00:16:03.696 A:middle
在 Memgraph 中

00:16:03.696 --> 00:16:06.726 A:middle
使用实时分配选项

00:16:06.726 --> 00:16:08.986 A:middle
我的 Memgraph 文件

00:16:08.986 --> 00:16:10.196 A:middle
在 malloc 堆栈日志记录中被捕获

00:16:10.866 --> 00:16:12.926 A:middle
现在我们要找到分配的回溯

00:16:13.226 --> 00:16:14.776 A:middle
这就是 malloc_history 发挥作用的地方

00:16:15.566 --> 00:16:16.946 A:middle
你只需传递 malloc_history

00:16:17.136 --> 00:16:18.576 A:middle
Memgraph

00:16:18.576 --> 00:16:19.886 A:middle
以及内存中实例的地址

00:16:19.886 --> 00:16:20.876 A:middle
那么 如果捕获到它的回溯

00:16:20.876 --> 00:16:24.016 A:middle
malloc_history 就会将其提供给你

00:16:24.136 --> 00:16:25.276 A:middle
这里我取了其中

00:16:25.276 --> 00:16:27.276 A:middle
一个很大的 NSConcreteData 的地址

00:16:27.496 --> 00:16:28.376 A:middle
我把它传递给了 malloc_history

00:16:28.376 --> 00:16:31.026 A:middle
然后我就得到了一个回溯记录

00:16:31.486 --> 00:16:32.646 A:middle
有趣的是

00:16:32.646 --> 00:16:34.166 A:middle
看起来我的 NoirFilter.apply() 方法

00:16:34.166 --> 00:16:36.376 A:middle
创建了一个巨大的 NSConcreteData

00:16:37.126 --> 00:16:38.526 A:middle
我应该将这个和 Memgraph

00:16:38.526 --> 00:16:40.186 A:middle
附加到一个 Bug 报告中

00:16:40.186 --> 00:16:43.206 A:middle
其他人就可以查看它

00:16:43.476 --> 00:16:44.696 A:middle
这些只是几种

00:16:44.696 --> 00:16:46.756 A:middle
可以深入研究

00:16:46.756 --> 00:16:48.216 A:middle
App 行为的方法

00:16:48.626 --> 00:16:49.526 A:middle
当遇到内存问题时

00:16:49.526 --> 00:16:51.086 A:middle
你会选择哪个工具

00:16:52.096 --> 00:16:53.676 A:middle
有 3 种思考方式

00:16:53.956 --> 00:16:55.656 A:middle
你想看到对象的创建吗

00:16:55.656 --> 00:16:56.956 A:middle
你想要查看内存中

00:16:56.956 --> 00:16:58.696 A:middle
引用对象或地址的内容吗

00:16:59.056 --> 00:17:00.926 A:middle
或者你只是想看看 一个实例有多大

