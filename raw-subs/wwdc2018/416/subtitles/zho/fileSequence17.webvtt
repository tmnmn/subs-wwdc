WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.056 --> 00:17:00.926 A:middle
或者你只是想看看 一个实例有多大

00:17:02.376 --> 00:17:03.366 A:middle
如果你在进程启动时

00:17:03.366 --> 00:17:05.046 A:middle
启用了 malloc 堆栈日志记录

00:17:05.046 --> 00:17:06.185 A:middle
那么 malloc_history

00:17:06.185 --> 00:17:09.455 A:middle
可以帮助你查找 该对象的回溯

00:17:10.896 --> 00:17:11.646 A:middle
如果你只是想看看

00:17:11.646 --> 00:17:12.896 A:middle
在内存中引用对象的内容

00:17:13.486 --> 00:17:15.576 A:middle
你可以使用 leaks

00:17:15.576 --> 00:17:16.766 A:middle
和在内存页面中

00:17:16.766 --> 00:17:17.915 A:middle
提供的其他工具来帮助你

00:17:17.915 --> 00:17:20.366 A:middle
最后 如果你只是想了解

00:17:20.366 --> 00:17:23.296 A:middle
一个区域或一个实例有多大 vmmap

00:17:23.296 --> 00:17:24.056 A:middle
和 heap 是首选工具

00:17:24.626 --> 00:17:27.376 A:middle
作为起始点 我建议在进程的 Memgraph 上

00:17:27.376 --> 00:17:30.436 A:middle
运行带有 -summary 命令的 vmmap

00:17:30.626 --> 00:17:34.096 A:middle
然后顺着线程继续进行

00:17:34.096 --> 00:17:36.286 A:middle
现在 我想请回 Kyle 他将会讨论

00:17:36.436 --> 00:17:37.736 A:middle
iOS App 中最大的对象

00:17:37.736 --> 00:17:39.936 A:middle
那就是图像

00:17:40.646 --> 00:17:40.856 A:middle
有请 Kyle

00:17:42.516 --> 00:17:45.856 A:middle
[ 掌声 ]

00:17:46.356 --> 00:17:46.916 A:middle
&gt;&gt; 谢谢 James

00:17:47.916 --> 00:17:49.486 A:middle
说到图像

00:17:50.306 --> 00:17:51.586 A:middle
关于图像需要记住的

00:17:51.586 --> 00:17:54.296 A:middle
最重要的就是

00:17:54.296 --> 00:17:55.506 A:middle
内存使用与图像的尺寸有关

00:17:55.506 --> 00:17:58.536 A:middle
而不与它的文件大小有关

00:17:59.696 --> 00:18:01.846 A:middle
举个例子

