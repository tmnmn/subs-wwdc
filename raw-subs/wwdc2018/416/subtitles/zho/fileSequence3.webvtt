WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.746 --> 00:03:01.266 A:middle
JPEG 就是一个很好的例子

00:03:01.656 --> 00:03:03.036 A:middle
如果我有一个 JPEG 文件

00:03:03.036 --> 00:03:05.586 A:middle
比如说 它有 50KB 大

00:03:05.646 --> 00:03:07.416 A:middle
当它被映射到内存中时

00:03:07.416 --> 00:03:09.746 A:middle
它实际上被映射到

00:03:09.746 --> 00:03:10.576 A:middle
大约 4 页内存中

00:03:10.976 --> 00:03:12.436 A:middle
第 4 页实际上

00:03:12.436 --> 00:03:13.936 A:middle
并没有被完全填满

00:03:13.936 --> 00:03:14.876 A:middle
所以它可以用来做其他的事情

00:03:14.876 --> 00:03:16.846 A:middle
内存就是像这样复杂

00:03:16.936 --> 00:03:18.376 A:middle
但是之前的那三页

00:03:18.456 --> 00:03:21.736 A:middle
总是可以被系统释放

00:03:22.056 --> 00:03:26.156 A:middle
当我们讨论某个典型的 App 时

00:03:26.446 --> 00:03:28.366 A:middle
它们的内存占用和分析文件

00:03:28.366 --> 00:03:30.146 A:middle
都会有一个脏的 一个压缩的

00:03:30.146 --> 00:03:31.166 A:middle
以及一个干净的内存段

00:03:32.136 --> 00:03:32.926 A:middle
让我分别来看看

00:03:34.766 --> 00:03:37.826 A:middle
净内存是可以被分页的数据

00:03:38.346 --> 00:03:40.676 A:middle
这些是我们刚刚讨论过的内存映射文件

00:03:41.016 --> 00:03:43.216 A:middle
可以是图像文件 Blob.data

00:03:43.566 --> 00:03:44.376 A:middle
或者 Training.model

00:03:44.916 --> 00:03:47.126 A:middle
也可以是框架

00:03:48.546 --> 00:03:50.566 A:middle
每个框架都有一个

00:03:50.566 --> 00:03:51.486 A:middle
_DATA_CONST 部分

00:03:52.506 --> 00:03:53.466 A:middle
它通常是 净内存

00:03:53.466 --> 00:03:54.406 A:middle
但是如果你做了任何运行时的小把戏 

00:03:54.406 --> 00:03:55.726 A:middle
比如 “Method Swizzling（方法交换）”

00:03:55.726 --> 00:04:00.876 A:middle
那么它就会变成脏内存

