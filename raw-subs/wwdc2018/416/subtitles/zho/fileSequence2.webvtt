WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.236 --> 00:02:01.806 A:middle
App 的内存使用

00:02:01.806 --> 00:02:03.036 A:middle
实际上指的是页面数量

00:02:03.116 --> 00:02:04.686 A:middle
乘以页面大小

00:02:05.366 --> 00:02:10.586 A:middle
这有一个净页和脏页的例子

00:02:10.586 --> 00:02:13.766 A:middle
假设我分配了一个含有 20000 个

00:02:13.766 --> 00:02:14.196 A:middle
整数的数组

00:02:14.816 --> 00:02:16.916 A:middle
系统可能会分配给我 6 个内存页面

00:02:18.036 --> 00:02:19.966 A:middle
当我分配这些页面时

00:02:19.966 --> 00:02:20.676 A:middle
它们是净页

00:02:21.156 --> 00:02:22.386 A:middle
但是 当我开始

00:02:22.386 --> 00:02:23.816 A:middle
对数据缓冲区进行写入时

00:02:23.816 --> 00:02:25.406 A:middle
例如 如果我写入到这个数组的第一个位置

00:02:25.406 --> 00:02:27.766 A:middle
这个内存页就会变成脏页

00:02:28.856 --> 00:02:30.996 A:middle
类似地

00:02:30.996 --> 00:02:33.396 A:middle
如果我写入到

00:02:33.396 --> 00:02:34.646 A:middle
缓冲区中的最后一个位置

00:02:34.646 --> 00:02:35.686 A:middle
最后一页也会变成 脏页

00:02:36.436 --> 00:02:37.416 A:middle
请注意 中间的四个页面

00:02:37.416 --> 00:02:38.566 A:middle
仍然是 净页

00:02:38.566 --> 00:02:42.896 A:middle
因为 App 还没有写入它们

00:02:42.896 --> 00:02:45.556 A:middle
另一个有趣的话题是内存映射文件

00:02:45.856 --> 00:02:48.206 A:middle
它是一种在磁盘上的文件

00:02:48.206 --> 00:02:49.306 A:middle
但加载到了内存中

00:02:50.296 --> 00:02:51.506 A:middle
如果你用的是只读文件

00:02:51.506 --> 00:02:52.976 A:middle
这些将一直是净页

00:02:53.846 --> 00:02:55.066 A:middle
内核实际上

00:02:55.066 --> 00:02:57.056 A:middle
是在它们离开磁盘写入 RAM 时进行管理的

00:02:57.746 --> 00:03:01.266 A:middle
JPEG 就是一个很好的例子

