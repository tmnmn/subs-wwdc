WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.946 --> 00:15:01.066 A:middle
我不认为

00:15:01.066 --> 00:15:01.786 A:middle
这是主要的问题

00:15:05.336 --> 00:15:07.456 A:middle
默认情况下 堆将按数量排序

00:15:08.376 --> 00:15:09.786 A:middle
但是我希望看到的

00:15:09.936 --> 00:15:11.176 A:middle
是最大的对象

00:15:11.176 --> 00:15:12.586 A:middle
而不是数量最多的对象

00:15:12.586 --> 00:15:14.086 A:middle
因此将 -sortBySize 参数传递给堆

00:15:14.086 --> 00:15:15.176 A:middle
能让它们按大小排序

00:15:16.616 --> 00:15:17.606 A:middle
这里我看到了一些

00:15:17.606 --> 00:15:19.576 A:middle
硕大的 NSConcreteData 对象

00:15:19.926 --> 00:15:21.246 A:middle
我应该将这个输出

00:15:21.246 --> 00:15:22.586 A:middle
和 Memgraph

00:15:22.586 --> 00:15:24.726 A:middle
附加到 Bug 报告中

00:15:24.726 --> 00:15:25.216 A:middle
但这还不够

00:15:25.216 --> 00:15:25.966 A:middle
我得弄清楚

00:15:25.966 --> 00:15:26.446 A:middle
这些对象是怎么来的

00:15:27.806 --> 00:15:29.186 A:middle
首先 我需要获得

00:15:29.186 --> 00:15:30.896 A:middle
其中一个 NSConcreteData 对象的地址

00:15:31.606 --> 00:15:33.006 A:middle
然后是 heap 工具中的 -addresses 参数

00:15:33.396 --> 00:15:34.436 A:middle
当你将 -addresses 参数

00:15:34.436 --> 00:15:35.456 A:middle
与一个类名一起传给 heap 工具时

00:15:35.456 --> 00:15:36.656 A:middle
它将为你提供堆上的

00:15:36.656 --> 00:15:38.306 A:middle
每个实例的地址

00:15:39.516 --> 00:15:41.186 A:middle
现在我有了这些地址

00:15:41.186 --> 00:15:42.656 A:middle
我可以知道它们每一个都来自哪里

00:15:43.926 --> 00:15:44.866 A:middle
这就是 malloc 堆栈日志记录

00:15:44.866 --> 00:15:45.756 A:middle
派上用场的地方

00:15:46.526 --> 00:15:47.976 A:middle
当启用时

00:15:47.976 --> 00:15:49.826 A:middle
系统将记录每个分配的回溯

00:15:50.316 --> 00:15:52.196 A:middle
当我们记录一个 Memgraph 时

00:15:52.196 --> 00:15:53.576 A:middle
这些日志就会被捕获

00:15:53.576 --> 00:15:54.616 A:middle
它们将用于为我们的一些工具

00:15:54.616 --> 00:15:56.366 A:middle
注释现有的输出 你可以在

00:15:57.136 --> 00:15:58.306 A:middle
“Scheme Editor（Scheme 编辑器）”中的

00:15:58.306 --> 00:16:00.576 A:middle
“Diagnostics（诊断）”标签页中 轻松启用它

