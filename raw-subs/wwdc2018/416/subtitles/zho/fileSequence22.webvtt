WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.176 --> 00:22:01.396 A:middle
这意味着它减少了

00:22:01.706 --> 00:22:02.346 A:middle
75% 的内存使用

00:22:02.786 --> 00:22:04.316 A:middle
在保证相同保真度的同时

00:22:04.316 --> 00:22:05.086 A:middle
也获得了可观的内存节省

00:22:05.676 --> 00:22:11.916 A:middle
另外一个好处是 如果我想再次使用这个蒙版

00:22:11.916 --> 00:22:13.476 A:middle
我可以在一个 imageView 上

00:22:13.476 --> 00:22:16.006 A:middle
改变 tintColor

00:22:16.006 --> 00:22:17.366 A:middle
而且只用一个点号就可以做到

00:22:17.366 --> 00:22:20.906 A:middle
这意味着我不必再分配内存了

00:22:21.216 --> 00:22:23.006 A:middle
我不仅可以把它

00:22:23.006 --> 00:22:24.196 A:middle
设成一个黑色的圆圈

00:22:24.196 --> 00:22:25.646 A:middle
还可以设成蓝色的 红色的 绿色的圆圈

00:22:25.646 --> 00:22:26.896 A:middle
且没有额外的内存占用

00:22:27.216 --> 00:22:27.826 A:middle
这很酷

00:22:32.236 --> 00:22:34.136 A:middle
我们通常对图像做的另一件事是

00:22:34.136 --> 00:22:34.876 A:middle
对它们进行下采样

00:22:35.516 --> 00:22:36.936 A:middle
当我们想要制作

00:22:36.936 --> 00:22:38.286 A:middle
比如缩略图的时候

00:22:38.286 --> 00:22:38.866 A:middle
我们想要缩小它

00:22:39.196 --> 00:22:41.426 A:middle
我们不应该

00:22:41.426 --> 00:22:42.836 A:middle
用 UIImage 进行缩小

00:22:42.956 --> 00:22:44.336 A:middle
如果我们使用 UIImage 绘图

00:22:44.336 --> 00:22:46.126 A:middle
由于内部坐标空间变换

00:22:46.126 --> 00:22:48.856 A:middle
这种方法性能并不高

00:22:49.316 --> 00:22:50.946 A:middle
就像我们之前看到的

00:22:50.946 --> 00:22:52.656 A:middle
它会解压缩内存中的整个图像

00:22:53.616 --> 00:22:55.886 A:middle
取而代之 我们可以使用 ImageIO 框架

00:22:56.536 --> 00:22:58.196 A:middle
ImageIO 可以对图像进行下采样

00:22:58.196 --> 00:23:00.036 A:middle
它使用 Streaming API

