WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.086 --> 00:09:00.546 A:middle
很好的一种方式

00:09:00.966 --> 00:09:03.086 A:middle
在 Xcode 10 中

00:09:03.086 --> 00:09:04.516 A:middle
它现在可向你输出

00:09:04.516 --> 00:09:05.696 A:middle
系统对你的评分值

00:09:05.696 --> 00:09:06.526 A:middle
所以如果看起来与 Xcode 9 不同

00:09:06.526 --> 00:09:08.186 A:middle
不要太在意

00:09:09.226 --> 00:09:11.676 A:middle
我正在 Xcode 中运行我的 App

00:09:11.676 --> 00:09:12.606 A:middle
我发现它消耗了更多的内存

00:09:13.386 --> 00:09:14.636 A:middle
那么下一步我应该用什么工具呢

00:09:15.316 --> 00:09:17.306 A:middle
显然是 Instruments

00:09:18.356 --> 00:09:19.826 A:middle
它提供了许多方法

00:09:19.826 --> 00:09:21.186 A:middle
来调查 App 的内存占用

00:09:21.916 --> 00:09:24.256 A:middle
你可能已经熟悉

00:09:24.256 --> 00:09:25.556 A:middle
“Allocations” 和 “Leaks”

00:09:25.776 --> 00:09:27.316 A:middle
“Allocations”

00:09:27.316 --> 00:09:28.466 A:middle
分析由你的 App 所分配的堆

00:09:28.886 --> 00:09:29.866 A:middle
“Leaks”

00:09:29.866 --> 00:09:31.056 A:middle
会检查一个进程中的内存泄漏

00:09:31.226 --> 00:09:32.756 A:middle
但是你可能不太熟悉

00:09:32.756 --> 00:09:33.946 A:middle
“VM Tracker”

00:09:33.946 --> 00:09:34.826 A:middle
和 “Virtual memory trace（虚拟内存追踪）”

00:09:35.376 --> 00:09:37.326 A:middle
如果你还记得

00:09:37.326 --> 00:09:38.066 A:middle
Kyle 谈论过的

00:09:38.066 --> 00:09:39.416 A:middle
iOS 内存的主要类别

00:09:39.486 --> 00:09:41.456 A:middle
他谈到了脏内存

00:09:41.456 --> 00:09:42.516 A:middle
和压缩内存

00:09:42.946 --> 00:09:44.556 A:middle
VM Tracker 提供了一种

00:09:44.556 --> 00:09:45.806 A:middle
很好的分析方式

00:09:47.116 --> 00:09:48.616 A:middle
它为脏内存

00:09:48.616 --> 00:09:50.046 A:middle
以及交换内存即 iOS 中的压缩内存

00:09:50.046 --> 00:09:51.646 A:middle
分别提供了独立的追踪

00:09:51.646 --> 00:09:52.386 A:middle
并告诉你

00:09:52.386 --> 00:09:53.186 A:middle
关于常驻内存大小的信息

00:09:53.996 --> 00:09:55.176 A:middle
我认为这对于

00:09:55.176 --> 00:09:57.926 A:middle
研究 App 的脏内存大小 非常有用

00:09:58.516 --> 00:09:59.866 A:middle
Instruments 中的最后一项是

00:09:59.866 --> 00:10:01.046 A:middle
“Virtual memory trace（虚拟内存追踪）”

