WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.333 --> 00:50:03.637 align:start position:27% line:-2
iOSは画像フォーマットを
選択します

00:50:03.737 --> 00:50:07.474 align:start position:23% line:-2
SRGBからアルファ８で
75％のメモリを節約できたのは

00:50:07.574 --> 00:50:12.679 align:start position:7% line:-2
UIImageGraphicsRendererの
使用によるものです

00:50:12.780 --> 00:50:15.115 align:start position:27% line:-1
マスクやテキストに最適です

00:50:16.350 --> 00:50:20.821 align:start position:21% line:-2
画像をダウンサンプリングする際は
ImageIOを使用します

00:50:21.188 --> 00:50:23.857 align:start position:32% line:-1
メモリの急上昇を避け

00:50:23.957 --> 00:50:27.227 align:start position:34% line:-2
UIImageでの
描画よりも高速です

00:50:29.129 --> 00:50:33.801 align:start position:25% line:-2
画面上にない画像やリソースを
アンロードしたいのです

00:50:33.901 --> 00:50:37.204 align:start position:23% line:-2
ユーザが見えないもので
メモリを消費するのは無意味です

00:50:38.205 --> 00:50:41.341 align:start position:36% line:-2
これだけやっても
まだ足りません

00:50:41.942 --> 00:50:44.478 align:start position:29% line:-1
Memgraphの使用は

00:50:44.578 --> 00:50:48.549 align:start position:27% line:-2
メモリフットプリントの
削減と状況把握に役立ちます

00:50:48.649 --> 00:50:53.420 align:start position:11% line:-2
malloc historyとの組み合わせで
メモリの状態が把握できました

00:50:54.121 --> 00:50:57.858 align:start position:27% line:-2
従って
私が皆さんにお薦めするのは

00:50:57.958 --> 00:51:01.895 align:start position:20% line:-2
malloc historyを使い
ツールを分析することです

