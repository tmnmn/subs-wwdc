WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.518 --> 00:42:02.189 align:start position:29% line:-2
しかしこれはデバイスでは
使い物になりません

00:42:02.289 --> 00:42:06.894 align:start position:23% line:-2
シミュレータ実行時は
デバッグやテストに役に立ちます

00:42:06.994 --> 00:42:09.997 align:start position:25% line:-1
デバイス上でも確認しましょう

00:42:10.097 --> 00:42:14.101 align:start position:30% line:-2
シミュレータは決して
メモリ不足になりません

00:42:14.201 --> 00:42:18.972 align:start position:21% line:-2
Appが強制終了された時は
シミュレータを使ってみてください

00:42:19.073 --> 00:42:23.277 align:start position:23% line:-2
割り当てができるので
強制終了されることはありません

00:42:23.377 --> 00:42:25.512 align:start position:32% line:-1
それで調査もできます

00:42:25.612 --> 00:42:30.951 align:start position:25% line:-2
ここに表示されている
グラフに注目したいと思います

00:42:31.985 --> 00:42:34.788 align:start position:23% line:-1
7.7ギガバイトに達しています

00:42:34.922 --> 00:42:36.256 align:start position:39% line:-1
ひどいですね

00:42:37.024 --> 00:42:39.593 align:start position:27% line:-1
さて 何ができるでしょう？

00:42:40.794 --> 00:42:44.231 align:start position:23% line:-1
ここでapply関数に戻ります

00:42:44.331 --> 00:42:48.669 align:start position:12% line:-2
beginImageContextWith
Optionsに戻りますが

00:42:48.769 --> 00:42:51.305 align:start position:27% line:-1
カイルの言葉を思い出します

00:42:51.405 --> 00:42:56.510 align:start position:21% line:-2
画像を扱っている時
メモリに関して最も重要なことは？

00:42:56.643 --> 00:42:58.045 align:start position:36% line:-1
画像のサイズです

00:42:58.145 --> 00:43:01.014 align:start position:30% line:-1
それでは見てみましょう

