WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.951 --> 00:32:01.455 align:middle line:0
这里提供的实现应该是通用的

00:32:01.522 --> 00:32:02.956 align:middle line:0
并适用于新层的任何实例

00:32:04.691 --> 00:32:07.394 align:middle line:0
它只需要在运行时
被包含在你的app中

00:32:07.661 --> 00:32:09.963 align:middle line:0
然后这个特定层的参数

00:32:10.030 --> 00:32:12.032 align:middle line:0
和其他有关该模型的信息

00:32:12.099 --> 00:32:14.201 align:middle line:0
将一同被封装在MLModel中

00:32:15.969 --> 00:32:20.240 align:middle line:-2
实现一个自定义层很简单
我们暴露了MLCustomLayer协议

00:32:20.507 --> 00:32:22.809 align:middle line:-2
你只需根据存储在
MLModel中的数据

00:32:22.876 --> 00:32:24.945 align:middle line:-1
提供用来初始化层的方法

00:32:26.046 --> 00:32:28.949 align:middle line:-2
你需要提供一个方法
来告诉我们需要为该层的输出

00:32:29.016 --> 00:32:30.384 align:middle line:-1
分配多少空间

00:32:31.118 --> 00:32:32.853 align:middle line:-1
然后是执行计算的方法

00:32:34.955 --> 00:32:37.124 align:middle line:-1
另外 你可以添加这种灵活性

00:32:37.191 --> 00:32:40.060 align:middle line:-1
而不牺牲整个模型的性能

00:32:41.061 --> 00:32:43.864 align:middle line:-2
该协议包含一个可选的方法
它允许你提供给我们

00:32:43.931 --> 00:32:47.501 align:middle line:-1
一个该层的MTL着色器的实现

00:32:48.302 --> 00:32:50.671 align:middle line:-1
如果你给我们这个 那么它可以在

00:32:50.737 --> 00:32:53.707 align:middle line:-2
与其它Core ML计算所在的
同样命令缓冲区中被编码

00:32:53.774 --> 00:32:56.009 align:middle line:-2
所以这里没额外的开销
无论是来自额外的编码

00:32:56.076 --> 00:32:57.845 align:middle line:-1
还是多次往返GPU产生的开销

00:32:58.412 --> 00:33:00.581 align:middle line:-2
如果你不提供这个
那么我们将简单的

