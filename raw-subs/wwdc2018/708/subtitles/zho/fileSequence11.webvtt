WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.925 --> 00:11:00.694 align:middle line:-1
那么总模型大小超过100兆字节

00:11:02.396 --> 00:11:06.133 align:middle line:-2
如果我们将它量化为8位
而架构没有发生改变

00:11:06.200 --> 00:11:09.002 align:middle line:-1
我们仍然有2500万个参数

00:11:09.503 --> 00:11:11.738 align:middle line:-1
但我们现在只使用一个字节

00:11:12.573 --> 00:11:13.974 align:middle line:-1
来存储单个权重

00:11:14.041 --> 00:11:16.977 align:middle line:-1
这意味着模型大小减少了4倍

00:11:17.277 --> 00:11:20.547 align:middle line:-2
现在只需要26兆字节
来存储这个模型

00:11:20.881 --> 00:11:22.249 align:middle line:-1
我们还可以更进一步

00:11:22.316 --> 00:11:24.051 align:middle line:-1
我们可以在这个模型中使用

00:11:24.117 --> 00:11:26.753 align:middle line:-1
4位来表示每个权重的量化表示

00:11:27.254 --> 00:11:29.223 align:middle line:-1
并最终得到一个更小的模型

00:11:36.463 --> 00:11:40.234 align:middle line:-1
Core ML支持所有的量化模式

00:11:40.300 --> 00:11:42.436 align:middle line:-1
直到只需1位

00:11:44.271 --> 00:11:45.105 align:middle line:-1
现在…

00:11:45.639 --> 00:11:47.508 align:middle line:-1
量化是一项强大的技术

00:11:47.975 --> 00:11:51.044 align:middle line:-2
它可以采取现有的体系结构
却具有更小的大小

00:11:51.345 --> 00:11:52.980 align:middle line:-1
但是你如何获得量化模型呢？

00:11:54.781 --> 00:11:58.151 align:middle line:-2
如果你有Core ML格式的
神经网络

00:11:58.218 --> 00:12:01.622 align:middle line:-2
你可以使用Core ML工具
来获得它的量化表示

