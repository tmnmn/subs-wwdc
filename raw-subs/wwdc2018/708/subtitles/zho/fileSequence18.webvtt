WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.214 --> 00:18:05.185 align:middle line:-2
在这个演示中
我们从四个庞大的32位模型开始

00:18:05.252 --> 00:18:08.856 align:middle line:-1
其总app大小为27兆字节

00:18:09.389 --> 00:18:12.659 align:middle line:-1
然后我们评估质量并切换到4位模型

00:18:12.993 --> 00:18:16.563 align:middle line:-2
我们app的总大小一路降到
只有3.4兆字节

00:18:17.598 --> 00:18:18.432 align:middle line:-1
现在…

00:18:23.136 --> 00:18:25.639 align:middle line:-1
这在质量方面没有任何缩水

00:18:26.139 --> 00:18:30.110 align:middle line:-2
因为所有这些量化版本
看起来都是一样的

00:18:30.177 --> 00:18:32.145 align:middle line:-1
质量仍然令人满意

00:18:34.481 --> 00:18:37.885 align:middle line:-2
我们看到了量化如何
通过在微观层面减少权重的大小

00:18:37.951 --> 00:18:41.121 align:middle line:-1
来帮助我们缩小app的大小

00:18:42.089 --> 00:18:46.226 align:middle line:-2
现在让我们看看
如何减少app需要的模型数量

00:18:47.728 --> 00:18:49.363 align:middle line:-1
在最简单的情况下

00:18:50.063 --> 00:18:53.233 align:middle line:-1
如果你的app有三种机器学习功能

00:18:53.300 --> 00:18:55.602 align:middle line:-1
那么你需要三种不同的机器学习模型

00:18:56.036 --> 00:19:01.341 align:middle line:-2
但在某些情况下
有可能使用同一个模型

