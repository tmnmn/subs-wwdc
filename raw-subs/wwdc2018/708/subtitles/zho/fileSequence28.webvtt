WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.414 --> 00:28:01.315 align:middle line:-1
我们开始了

00:28:03.784 --> 00:28:05.319 align:middle line:-1
我们可以看到新API已完成

00:28:05.719 --> 00:28:07.621 align:middle line:-1
我们等一下去年的技术

00:28:08.589 --> 00:28:09.423 align:middle line:-1
好了

00:28:15.262 --> 00:28:17.698 align:middle line:-2
在这个例子中
我们看到了新的批处理API

00:28:17.764 --> 00:28:19.066 align:middle line:-1
明显的改进

00:28:19.132 --> 00:28:22.803 align:middle line:-2
一般来说 你在app中看到的改进
取决于模型

00:28:22.870 --> 00:28:24.838 align:middle line:-1
以及设备和工作载荷

00:28:24.905 --> 00:28:28.475 align:middle line:-2
但若你有大量prediction
要调用 请使用新的API

00:28:28.542 --> 00:28:31.845 align:middle line:-2
并为Core ML
提供加速计算的机会

00:28:35.649 --> 00:28:39.553 align:middle line:-2
当然 世界上性能最好的app
如果不能提供

00:28:39.620 --> 00:28:42.489 align:middle line:-2
你想为你的用户提供的体验
它也并不特别令人激动

00:28:43.590 --> 00:28:46.460 align:middle line:-1
我们希望确保无论该体验是什么

00:28:46.527 --> 00:28:48.195 align:middle line:-1
或将来是什么样的

00:28:48.262 --> 00:28:51.431 align:middle line:-2
Core ML的性能
和易用性都一如既往

00:28:52.366 --> 00:28:54.835 align:middle line:-1
但机器学习领域正在迅速发展

00:28:55.135 --> 00:28:57.938 align:middle line:-2
我们将如何跟上呢？
而且跟上的速度有多快呢？

00:28:58.005 --> 00:29:00.908 align:middle line:-2
让我告诉你一个跟这个问题有关的
我自己的故事

