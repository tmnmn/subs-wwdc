WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.224 --> 00:26:01.562 align:middle line:-2
一个简单的for循环 环绕着
对现有Core ML的prediction API的调用

00:26:01.762 --> 00:26:05.499 align:middle line:-2
你可以遍历一个输入数组
并产生一个输出数组

00:26:06.834 --> 00:26:11.371 align:middle line:-2
让我们仔细看看
我们这样做时底层所发生的情况

00:26:12.139 --> 00:26:15.409 align:middle line:-2
对于每张图片
我们都需要做一些预处理工作

00:26:15.642 --> 00:26:18.378 align:middle line:-2
如果没有别的要做了
我们需要将数据发送到GPU

00:26:19.046 --> 00:26:21.415 align:middle line:-2
一旦我们完成这些
我们就可以进行计算

00:26:21.481 --> 00:26:24.785 align:middle line:-2
并生成输出图像
但接下来有一个后处理步骤

00:26:25.085 --> 00:26:28.555 align:middle line:-2
我们需要从GPU中拿回数据
并将其返回给你的app

00:26:29.823 --> 00:26:31.725 align:middle line:-1
改善这张图片的关键

00:26:31.792 --> 00:26:34.528 align:middle line:0
是消除GPU管道中的气泡

00:26:35.829 --> 00:26:38.866 align:middle line:0
出于两个主要原因
这将导致更高的性能

00:26:38.932 --> 00:26:41.602 align:middle line:0
首先 由于GPU不曾空闲

00:26:41.668 --> 00:26:43.637 align:middle line:0
整体计算时间得到了缩短

00:26:44.037 --> 00:26:47.608 align:middle line:0
第二 由于GPU持续工作

00:26:47.674 --> 00:26:50.310 align:middle line:0
它能够以更高的性能状态运行

00:26:50.377 --> 00:26:54.348 align:middle line:0
并减少计算每个特定输出所需的时间

00:26:55.582 --> 00:26:58.218 align:middle line:0
但Core ML的魅力在于
你不必关心

00:26:58.285 --> 00:27:01.822 align:middle line:0
这其中的任何细节
事实上 在你的app中

