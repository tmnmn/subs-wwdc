WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.940 --> 00:14:01.008 align:middle line:-1
玻璃风格

00:14:02.309 --> 00:14:03.143 align:middle line:-1
油画风格

00:14:04.845 --> 00:14:05.679 align:middle line:-1
和波浪风格

00:14:07.414 --> 00:14:09.583 align:middle line:-2
看看该app
是如何在Xcode中构建的

00:14:10.951 --> 00:14:15.422 align:middle line:-2
这个app使用Core ML
和Vision API执行这种风格化

00:14:16.223 --> 00:14:19.993 align:middle line:-2
如我们所见 我们在Xcode中
捆绑了四个Core ML模型

00:14:20.360 --> 00:14:23.497 align:middle line:-2
城市、玻璃、油画和波浪
与我们在app中看到的一样

00:14:24.431 --> 00:14:28.335 align:middle line:-2
我们可以检视这个模型
这些仍然是未经量化的模型

00:14:28.402 --> 00:14:31.905 align:middle line:-2
所以这些模型中的每一个
都占用6.7兆字节的磁盘空间

00:14:33.040 --> 00:14:35.843 align:middle line:-2
我们看到模型的输入
是特定分辨率的图像

00:14:36.543 --> 00:14:39.813 align:middle line:-2
并生成一个名为Stylized的
相同分辨率的的图像

00:14:40.981 --> 00:14:45.052 align:middle line:-2
现在我们想知道
我们可以通过切换为量化模型

00:14:45.118 --> 00:14:48.255 align:middle line:-1
节省多少存储空间和内存空间

00:14:48.622 --> 00:14:50.457 align:middle line:-2
我已使用
Core ML Tools

00:14:51.525 --> 00:14:55.395 align:middle line:-1
获得了所有这些模型的量化表示

00:14:56.163 --> 00:14:58.599 align:middle line:-1
有关如何获取这些模型的教程

00:14:58.999 --> 00:15:03.403 align:middle line:-2
参见稍后第二部分 其将详细介绍
Core ML Tools的量化过程细节

