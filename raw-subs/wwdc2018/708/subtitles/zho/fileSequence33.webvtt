WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.412 --> 00:33:00.581 align:middle line:-2
如果你不提供这个
那么我们将简单的

00:33:00.647 --> 00:33:03.116 align:middle line:-2
在CPU上进行计算
而不会做其他这些工作

00:33:04.952 --> 00:33:08.121 align:middle line:-2
因此 不管神经网络模型的进展
有多快

00:33:08.188 --> 00:33:09.923 align:middle line:-1
你都有办法跟上Core ML

00:33:10.490 --> 00:33:11.892 align:middle line:-1
但有一些限制

00:33:12.826 --> 00:33:15.162 align:middle line:-1
自定义层仅适用于神经网络模型

00:33:15.229 --> 00:33:18.232 align:middle line:-2
他们只能处理
ML MultiArrays的输入和输出

00:33:19.032 --> 00:33:21.368 align:middle line:-1
这是一种与神经网络交互的自然方式

00:33:21.668 --> 00:33:23.871 align:middle line:-1
但机器学习领域几乎不会限制

00:33:23.937 --> 00:33:25.639 align:middle line:-1
只在这个领域前进

00:33:26.607 --> 00:33:28.942 align:middle line:-1
实际上 当我第一次学习图像识别时

00:33:29.009 --> 00:33:32.613 align:middle line:-2
几乎没有人在谈论将神经网络
作为解决这个问题的方法

00:33:32.980 --> 00:33:35.315 align:middle line:-2
今天你可以看到
这绝对是最先进的技术

00:33:37.251 --> 00:33:40.587 align:middle line:-1
并不难想象具有机器学习功能的app

00:33:40.654 --> 00:33:42.556 align:middle line:-1
可能会导致有些自定义层根本不适用

00:33:43.023 --> 00:33:46.627 align:middle line:-2
例如 机器学习app
可能会使用神经网络

00:33:46.693 --> 00:33:50.130 align:middle line:-2
来向某个相似空间中嵌入图像
然后使用使用最近邻法

00:33:50.197 --> 00:33:53.166 align:middle line:-2
或局部敏感哈希法
或其它什么方法

00:33:53.233 --> 00:33:54.735 align:middle line:-1
来查找相似的图像

00:33:56.837 --> 00:33:59.339 align:middle line:-2
模型可能会结合
音频和动作数据来提供鼓励

00:33:59.406 --> 00:34:02.809 align:middle line:-1
给那些并不总能完成跑步目标的人

