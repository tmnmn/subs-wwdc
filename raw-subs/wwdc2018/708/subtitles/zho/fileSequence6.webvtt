WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.491 --> 00:06:00.127 align:middle line:-2
随着你不断向app
添加越来越多的功能

00:06:00.928 --> 00:06:03.363 align:middle line:-1
你的app大小可能会失控

00:06:04.665 --> 00:06:06.667 align:middle line:-1
如果这些机器学习模型

00:06:06.967 --> 00:06:09.069 align:middle line:-1
正在支持你的app的某些附加功能

00:06:09.136 --> 00:06:11.004 align:middle line:-1
你首先可以做的是

00:06:11.638 --> 00:06:14.074 align:middle line:-2
就是将它们保存在
最初的app包之外

00:06:15.242 --> 00:06:17.878 align:middle line:-1
然后当用户使用这些附加功能时

00:06:17.945 --> 00:06:21.114 align:middle line:-2
你可以根据需要下载它们
并在设备上进行编译

00:06:21.782 --> 00:06:24.284 align:middle line:-2
因此在这种情况下
用户在开始时就很高兴

00:06:24.351 --> 00:06:26.887 align:middle line:-1
因为安装大小不变

00:06:27.221 --> 00:06:31.191 align:middle line:-2
但由于用户在你的app中下载
并使用了所有Core ML功能

00:06:31.959 --> 00:06:35.295 align:middle line:-1
最终你的app大小仍然很大

00:06:36.230 --> 00:06:38.732 align:middle line:-1
那么如果我们采用另一种方法

00:06:39.900 --> 00:06:41.368 align:middle line:-2
即缩小模型大小本身
来解决该问题

00:06:42.469 --> 00:06:44.605 align:middle line:-1
这不是更好吗？

00:06:46.306 --> 00:06:50.010 align:middle line:-2
如果我们在app内部自带模型
这会给我们一个更小的安装包

00:06:51.311 --> 00:06:52.980 align:middle line:-1
而如果我们按需下载模型

00:06:53.480 --> 00:06:56.183 align:middle line:-1
这可以带来更快 更小的下载文件

00:06:57.084 --> 00:07:00.587 align:middle line:-2
无论如何 你的app将有
更小的存储足迹

