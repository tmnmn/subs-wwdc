WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.951 --> 00:32:03.357 align:start position:27% line:-2
カスタムレイヤはすべてのインスタンスに
対応する必要があります

00:32:04.758 --> 00:32:07.561 align:start position:27% line:-2
実行時にAppに
含まれている必要があります

00:32:07.661 --> 00:32:11.999 align:start position:21% line:-2
そして特定のレイヤのパラメータは
残りの情報と一緒に

00:32:12.099 --> 00:32:14.434 align:start position:20% line:-1
MLModelにカプセル化されます

00:32:15.969 --> 00:32:17.838 align:start position:25% line:-1
カスタムレイヤの実装は単純で

00:32:18.138 --> 00:32:20.440 align:start position:18% line:-1
MLCustomLayerプロトコルを使うだけ

00:32:20.541 --> 00:32:25.312 align:start position:16% line:-2
MLModelのデータに基づきレイヤの
初期化メソッドを実装します

00:32:26.079 --> 00:32:30.584 align:start position:27% line:-2
レイヤの出力用スペースの
大きさを返すメソッドも必要です

00:32:31.151 --> 00:32:33.220 align:start position:38% line:-1
その計算方法のメソッドも

00:32:35.222 --> 00:32:40.327 align:start position:29% line:-2
パフォーマンスは同じまま
柔軟性を追加できます

00:32:40.994 --> 00:32:43.230 align:start position:27% line:-2
プロトコルにはオプションも
用意されています

00:32:43.330 --> 00:32:46.300 align:start position:25% line:-2
モデルで使う
Metalシェーダの実装です

00:32:46.400 --> 00:32:47.901 align:start position:34% line:-1
“レイヤ”です

00:32:48.335 --> 00:32:53.707 align:start position:20% line:-2
これでCore MLの残りの部分と
同じコマンドでコード化できます

00:32:53.807 --> 00:32:58.178 align:start position:20% line:-2
エンコーディングやGPUとの連携に
関わるオーバーヘッドもありません

00:32:58.545 --> 00:33:03.450 align:start position:30% line:-2
Metalシェーダを提供しないと
すべての演算はCPUで行われます

