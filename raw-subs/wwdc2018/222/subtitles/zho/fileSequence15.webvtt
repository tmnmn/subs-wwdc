WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.868 --> 00:15:02.669 align:middle line:-2
让我们来看看
如何开始实现这个功能

00:15:03.704 --> 00:15:06.640 align:middle line:-2
这里我写了个函数
来接收这样一个列表

00:15:06.707 --> 00:15:08.542 align:middle line:-1
并且开始验证所有的内容

00:15:09.843 --> 00:15:12.980 align:middle line:-2
我会获得一个列表
并调出产品ID

00:15:13.714 --> 00:15:14.948 align:middle line:-1
这里我们已经学过了

00:15:15.015 --> 00:15:17.618 align:middle line:-2
不要强制将这个ID
向下转型成整型

00:15:17.684 --> 00:15:19.086 align:middle line:-1
而是要有条件地向下转型

00:15:19.520 --> 00:15:22.389 align:middle line:-2
如果这个转型失败
guard语句会失败并抛出一错误

00:15:23.624 --> 00:15:24.658 align:middle line:-1
现在我不想就此打住

00:15:24.725 --> 00:15:26.159 align:middle line:-1
我想要执行范围验证

00:15:26.226 --> 00:15:28.896 align:middle line:-1
以确保这个产品ID也是有效的

00:15:28.962 --> 00:15:30.664 align:middle line:-1
这个ID是正数而且不会太大

00:15:30.731 --> 00:15:33.066 align:middle line:-2
如果出现问题的话
我会抛出一个错误

00:15:36.970 --> 00:15:39.640 align:middle line:-1
然后我想要检查下URL

00:15:39.706 --> 00:15:43.610 align:middle line:-2
我会将其向下转型为字符串
而不是强制向下转型

00:15:44.311 --> 00:15:45.579 align:middle line:-1
这里我可以检查这个链接

00:15:45.646 --> 00:15:49.082 align:middle line:-2
在我的例子中 我知道
我的服务器不会生成太长的URL

00:15:49.149 --> 00:15:52.519 align:middle line:-2
所以如果我发现了一个很长的URL
我就会知道它是无效的

00:15:54.054 --> 00:15:57.057 align:middle line:-2
在我验证了它之后
我会将它以URL类型

00:15:57.124 --> 00:16:00.327 align:middle line:-2
执行特定域名验证
以确保它真的是一个URL

