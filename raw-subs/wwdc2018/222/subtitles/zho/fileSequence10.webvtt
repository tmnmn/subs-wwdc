WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.832 --> 00:10:00.067 align:middle line:-1
与音乐有关的产品列表

00:10:00.467 --> 00:10:03.470 align:middle line:-2
这样就会过滤掉
所有不含音乐标签的产品

00:10:03.537 --> 00:10:06.073 align:middle line:-1
这里我有标签列表这个子结构

00:10:06.139 --> 00:10:09.710 align:middle line:-2
我可将其向下转型为一个字符串数组
并且可以使用这个数组

00:10:11.578 --> 00:10:12.513 align:middle line:-1
哎呀

00:10:13.847 --> 00:10:17.384 align:middle line:-2
每个这样的强制向下转型
其实都包含着一个隐藏的致命错误

00:10:18.218 --> 00:10:21.722 align:middle line:-2
如果因为API或是数据
在发送到app前发生了变化

00:10:21.788 --> 00:10:24.558 align:middle line:-1
而导致某个转型失败的话

00:10:24.625 --> 00:10:27.528 align:middle line:-1
可能是由于数据损坏或是恶意篡改

00:10:28.529 --> 00:10:29.763 align:middle line:-1
这些向下转型就会失败

00:10:29.830 --> 00:10:33.166 align:middle line:-2
当它们转型失败的时候就会中止
并且会让我的app崩溃

00:10:33.233 --> 00:10:35.502 align:middle line:-1
这会给我的用户带来糟糕的体验

00:10:36.703 --> 00:10:38.238 align:middle line:-1
让我们看看这是如何发生的

00:10:39.039 --> 00:10:41.508 align:middle line:-1
这里是那个示例API响应

00:10:42.409 --> 00:10:44.511 align:middle line:-1
让我们看下这里的标签列表

00:10:44.578 --> 00:10:45.546 align:middle line:-1
（类型验证）

00:10:45.612 --> 00:10:49.116 align:middle line:-1
比如 这里的第二个标签被修改了

00:10:49.516 --> 00:10:51.618 align:middle line:-1
由字符串变成了数字

00:10:51.685 --> 00:10:53.253 align:middle line:-1
它是由第三方恶意篡改的

00:10:53.320 --> 00:10:55.189 align:middle line:-1
或是由于常规数据损坏

00:10:55.255 --> 00:10:56.356 align:middle line:-1
我们不总能分辨出造成的原因

00:10:57.858 --> 00:11:02.329 align:middle line:-2
向下转型这个标签列表会失败
因为它们不是字符串

