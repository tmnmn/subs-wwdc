WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:01.615 --> 00:03:03.617 align:middle line:-1
要处理该数据

00:03:03.684 --> 00:03:06.987 align:middle line:-2
我们需要保证
它是遵从已知格式或结构的

00:03:07.354 --> 00:03:08.188 align:middle line:-1
在这种情况下

00:03:08.255 --> 00:03:12.359 align:middle line:-1
每个编码点要对应一个UTF编码点

00:03:12.426 --> 00:03:13.660 align:middle line:-1
抱歉 稍等一下

00:03:13.727 --> 00:03:15.329 align:middle line:-1
让我把它变得更好读一点

00:03:15.395 --> 00:03:16.797 align:middle line:-1
看来这是JSON数据文件

00:03:17.798 --> 00:03:20.601 align:middle line:-1
而在我们保证了该数据

00:03:20.667 --> 00:03:23.237 align:middle line:-2
是我们想处理的某种格式后
我们将其称为格式化数据

00:03:24.972 --> 00:03:27.708 align:middle line:-1
格式化数据本身没有太多意义

00:03:27.774 --> 00:03:30.043 align:middle line:-1
我们要对其创建主要值

00:03:30.110 --> 00:03:32.079 align:middle line:-1
字符串 数组 以及字典

00:03:32.145 --> 00:03:35.249 align:middle line:-2
这样我们就可以在以后的算法中
将其作为构建块使用了

00:03:35.916 --> 00:03:37.518 align:middle line:-1
我们将其称为我们的主要数据

00:03:39.653 --> 00:03:41.855 align:middle line:-1
我们有经常要用到的构建块

00:03:41.922 --> 00:03:45.392 align:middle line:-2
不仅是作为主要值
还有我们自己的模型类型

00:03:46.493 --> 00:03:47.661 align:middle line:-1
在我们这么做之后

00:03:47.728 --> 00:03:50.864 align:middle line:-2
我们会用到这个叫做
结构化数据的内容

00:03:52.633 --> 00:03:57.838 align:middle line:-2
这些我们app中的数据形式
会形成一个抽象时间线

00:03:59.072 --> 00:04:02.309 align:middle line:-2
原始数据是我们所处理的
数据中最不抽象的

