WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.072 --> 00:04:02.309 align:middle line:-2
原始数据是我们所处理的
数据中最不抽象的

00:04:02.376 --> 00:04:05.179 align:middle line:-2
而我们自己的
结构化模型类型是最抽象的

00:04:05.445 --> 00:04:06.380 align:middle line:-1
我们现在的目标

00:04:06.980 --> 00:04:09.983 align:middle line:-1
就是尽可能大范围地获取数据

00:04:10.517 --> 00:04:14.221 align:middle line:-2
我们的app可在任何合适点停下来
利用这些数据

00:04:14.555 --> 00:04:16.490 align:middle line:-1
但我们还想要随时处理

00:04:16.557 --> 00:04:17.491 align:middle line:-1
我们自己的模型类型

00:04:18.692 --> 00:04:19.692 align:middle line:-1
现在的目标

00:04:19.760 --> 00:04:23.230 align:middle line:-2
就不仅仅是获得
尽可能大的抽象范围了

00:04:23.297 --> 00:04:25.632 align:middle line:-1
而是在过程中建立信任

00:04:26.466 --> 00:04:28.969 align:middle line:-1
在每个阶段 数据都会变得更复杂

00:04:29.036 --> 00:04:31.605 align:middle line:-2
而且会比我们进行验证
所需要的数据更多

00:04:31.905 --> 00:04:32.739 align:middle line:-1
而在这么做之后

00:04:32.806 --> 00:04:34.741 align:middle line:-2
会得到比所需信任的数据
更多的内容

00:04:36.243 --> 00:04:37.644 align:middle line:-1
对于我们今天的用例而言

00:04:37.711 --> 00:04:40.013 align:middle line:-1
我们不会太过介绍格式化数据

00:04:40.080 --> 00:04:43.150 align:middle line:-2
它通常就是原始数据
和主要数据间的踏脚石

00:04:43.217 --> 00:04:44.651 align:middle line:-1
你不会直接用到它

00:04:45.686 --> 00:04:47.754 align:middle line:-1
例如 给出了原始数据后

00:04:47.821 --> 00:04:50.824 align:middle line:-2
foundations JSON序列化
会给你返回主要数据

00:04:50.891 --> 00:04:52.793 align:middle line:-1
你不会直接看到格式化数据

00:04:52.860 --> 00:04:53.994 align:middle line:-1
也不会用到它

00:04:54.928 --> 00:04:58.498 align:middle line:-2
所以今天我们要介绍的是
原始主要和结构化数据

