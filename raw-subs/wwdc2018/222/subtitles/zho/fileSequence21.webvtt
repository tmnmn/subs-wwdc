WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.126 --> 00:21:01.895 align:middle line:-2
并且唤醒了一个
我们不想要的类的对象

00:21:02.863 --> 00:21:04.431 align:middle line:-1
这会对app产生何种影响呢？

00:21:06.133 --> 00:21:08.869 align:middle line:-2
正如我们之前所见
这里的有条件地向下转型

00:21:08.936 --> 00:21:12.272 align:middle line:-2
会防止我们意外地使用
这个不想要的类的对象

00:21:12.739 --> 00:21:15.876 align:middle line:-2
我们只会用
我们想要的类型的对象

00:21:15.943 --> 00:21:18.178 align:middle line:-2
向下转型失败的话
我们就会出错

00:21:20.781 --> 00:21:24.284 align:middle line:-2
但解码这样一个对象会对app
产生一个持续的影响

00:21:24.685 --> 00:21:28.655 align:middle line:-2
比方说这个类有个
会改变全局状态的alloc方法

00:21:28.722 --> 00:21:31.792 align:middle line:-2
它可能会分配一个单例
或是改变某个全局数据

00:21:33.460 --> 00:21:35.963 align:middle line:-2
即便我们扔掉了这个对象
如果出错的话

00:21:36.029 --> 00:21:37.865 align:middle line:-1
这会对app产生一个持续的影响

00:21:37.931 --> 00:21:40.267 align:middle line:-1
并且会导致某处出现异常行为

00:21:40.334 --> 00:21:43.737 align:middle line:-1
而且归档可以这种方式被恶意构造

00:21:43.804 --> 00:21:45.539 align:middle line:-1
从而导致我们app发生这种问题

00:21:46.673 --> 00:21:48.976 align:middle line:-2
我们该如何验证这数据
防止这样的问题呢？

00:21:50.277 --> 00:21:52.746 align:middle line:-2
NSSecureCoding协议
这时候就会起作用了

00:21:52.813 --> 00:21:53.814 align:middle line:-1
（NSSECURECODING）

00:21:53.881 --> 00:21:57.317 align:middle line:-2
NSSecureCoding
是继承于NSCoding的协议

00:21:57.918 --> 00:22:01.421 align:middle line:-1
其目标就是为了防止这类攻击

