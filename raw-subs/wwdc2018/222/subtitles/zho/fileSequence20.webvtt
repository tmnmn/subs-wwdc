WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:55.662 --> 00:20:00.300 align:middle line:-1
这个表示还包含了这个对象的类名

00:20:01.535 --> 00:20:04.538 align:middle line:-2
让我们来看下KeyedUnarchiver
是如何使用这个信息的

00:20:05.339 --> 00:20:07.908 align:middle line:-1
我们正在进行一个解码调用

00:20:08.442 --> 00:20:10.611 align:middle line:-2
这会创建一个
KeyedUnarchiver

00:20:10.677 --> 00:20:12.946 align:middle line:-1
并为对象键解码一个对象

00:20:13.013 --> 00:20:14.715 align:middle line:-1
（对象解码）

00:20:14.781 --> 00:20:16.316 align:middle line:-2
当你在KeyedUnarchiver中
执行它时

00:20:16.383 --> 00:20:19.786 align:middle line:-2
KeyedUnarchiver
会在归档的对象中查找该类名

00:20:20.187 --> 00:20:21.221 align:middle line:-1
并将它调出来

00:20:21.655 --> 00:20:24.958 align:middle line:-2
然后在你的app中
动态查找有着相同名字的类

00:20:26.660 --> 00:20:29.463 align:middle line:-1
然后它会分配该类的一个实例

00:20:29.863 --> 00:20:33.367 align:middle line:-2
将其初始化
以便它可以解码自己的内容

00:20:34.735 --> 00:20:38.205 align:middle line:-2
然后它会唤醒对象
让对象可以结束自己的状态

00:20:40.908 --> 00:20:43.043 align:middle line:-1
我们的对象用起来很好

00:20:43.410 --> 00:20:47.147 align:middle line:-2
不过我们可能会感到奇怪
如果数据被恶意篡改

00:20:47.214 --> 00:20:49.917 align:middle line:-2
包含了一个我们不想要的
类的对象呢？

00:20:51.518 --> 00:20:53.620 align:middle line:-1
我们刚执行过的整个过程

00:20:53.987 --> 00:20:55.556 align:middle line:-1
会以不同的类型出现

00:20:56.456 --> 00:20:58.792 align:middle line:-1
我们分配、初始化

00:20:59.126 --> 00:21:01.895 align:middle line:-2
并且唤醒了一个
我们不想要的类的对象

