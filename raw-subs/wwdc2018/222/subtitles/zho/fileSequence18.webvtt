WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.378 --> 00:18:02.182 align:middle line:-2
我可以像这样 利用NS编码
和NS键归档将其保存到磁盘上

00:18:02.249 --> 00:18:03.350 align:middle line:-1
我会对它进行归档

00:18:04.151 --> 00:18:06.320 align:middle line:-2
但正如我们所见
当我们解压数据的时候

00:18:06.386 --> 00:18:09.690 align:middle line:-2
我们在处理原始数据和主要数据时
我们要对它进行验证

00:18:10.724 --> 00:18:12.159 align:middle line:-1
让我们看看

00:18:12.226 --> 00:18:13.794 align:middle line:-1
这里的编码器是如何初始化的

00:18:14.328 --> 00:18:15.796 align:middle line:-1
若你曾写过编码器初始化方法

00:18:15.863 --> 00:18:17.197 align:middle line:-1
这可能让你看上去很熟悉

00:18:17.798 --> 00:18:20.434 align:middle line:-1
我们要先解码这个产品列表项

00:18:20.501 --> 00:18:22.703 align:middle line:-2
我们提到了
要用有条件地向下转型

00:18:22.769 --> 00:18:24.438 align:middle line:-1
而不是强制向下转型

00:18:25.038 --> 00:18:27.841 align:middle line:-2
如果出现问题的话
这是个可出错的初始化器

00:18:27.908 --> 00:18:29.676 align:middle line:-1
我们返回空就好了 对吧？

00:18:31.078 --> 00:18:34.147 align:middle line:-2
如果解码成功了
我会将其分配给我的属性

00:18:34.214 --> 00:18:35.215 align:middle line:-1
然后接着操作

00:18:35.749 --> 00:18:37.351 align:middle line:-1
我会对购买数据做相同的处理

00:18:37.417 --> 00:18:39.419 align:middle line:-1
有条件地向下转型为日期

00:18:39.486 --> 00:18:41.989 align:middle line:-2
如果出现问题了
我会失败 诸如此类

00:18:42.055 --> 00:18:44.124 align:middle line:-2
我对我类型的每个字段
都重复这个操作

00:18:45.959 --> 00:18:48.629 align:middle line:-2
当我想将其中一个购买记录
保存到历史纪录时

00:18:48.695 --> 00:18:50.797 align:middle line:-1
我有一个函数可以让我这么做

00:18:50.864 --> 00:18:54.434 align:middle line:-1
它会将购买记录归档为二进制数据

00:18:55.435 --> 00:18:56.803 align:middle line:-1
随后我将其保存到磁盘上

00:18:56.870 --> 00:18:59.206 align:middle line:-1
或是将该数据保存到数据库等处

