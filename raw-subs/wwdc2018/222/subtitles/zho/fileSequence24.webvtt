WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.572 --> 00:24:00.207 align:middle line:0
两个类都遵从NSCoding

00:24:00.507 --> 00:24:03.477 align:middle line:0
超类采用了
NSSecureCoding一致性

00:24:03.977 --> 00:24:06.446 align:middle line:0
而子类继承了这个一致性

00:24:07.848 --> 00:24:10.384 align:middle line:-1
子类没有办法

00:24:10.450 --> 00:24:13.187 align:middle line:-2
重写编码器的初始化
来实现安全性方面的功能

00:24:13.754 --> 00:24:15.322 align:middle line:-1
所以这里我们有一个出口

00:24:17.124 --> 00:24:19.660 align:middle line:-2
支持安全编码的方法
可以让你说

00:24:19.726 --> 00:24:22.129 align:middle line:-1
我其实不支持安全编码

00:24:22.329 --> 00:24:25.666 align:middle line:-2
并且你可以把这个功能关了说
“我还没准备好”

00:24:26.834 --> 00:24:29.403 align:middle line:-1
如果你还是说支持

00:24:29.469 --> 00:24:32.206 align:middle line:-1
我们得确保 你或是继承了

00:24:32.272 --> 00:24:35.409 align:middle line:-2
来自超类 对于NSSecureCoding
的完全一致性

00:24:35.709 --> 00:24:37.744 align:middle line:-1
或是你覆盖了这两个方法

00:24:38.078 --> 00:24:40.914 align:middle line:-2
表明
是的 我真的支持安全编码

00:24:40.981 --> 00:24:42.316 align:middle line:-1
这里没有问题

00:24:44.151 --> 00:24:46.720 align:middle line:-2
在我们的例子中
购买记录符合这些需求

00:24:46.787 --> 00:24:48.922 align:middle line:-2
所以我们可以从归档中
安全地对其进行解码

00:24:51.592 --> 00:24:53.560 align:middle line:-1
现在让我们解码一个购买记录

00:24:53.627 --> 00:24:55.596 align:middle line:-1
它本身会解码一个列表项

00:24:55.662 --> 00:24:57.331 align:middle line:-1
并且它会利用相同类型的调用

00:24:57.397 --> 00:24:58.966 align:middle line:-1
来表明它想要一个列表项

00:24:59.366 --> 00:25:00.968 align:middle line:-2
（利用NSSECURECODING
来解码对象）

