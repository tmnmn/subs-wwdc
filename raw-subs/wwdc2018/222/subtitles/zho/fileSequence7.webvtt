WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.720 --> 00:07:01.822 align:middle line:-2
第二点就是
如果我们信任去序列化器

00:07:02.356 --> 00:07:04.157 align:middle line:-1
我们会知道我们得到的运行时间对象

00:07:04.224 --> 00:07:06.026 align:middle line:-1
会是有效的

00:07:06.560 --> 00:07:09.363 align:middle line:-2
foundations JSON
序列化会给你

00:07:09.429 --> 00:07:11.665 align:middle line:-1
可用的字符串、数字和数组

00:07:12.332 --> 00:07:14.134 align:middle line:-1
它是我们可以信任的独立值

00:07:15.869 --> 00:07:17.070 align:middle line:-1
但在这个阶段 我们可能感到奇怪

00:07:17.137 --> 00:07:19.173 align:middle line:-1
“好吧…我们应该如何使用这个数据

00:07:19.239 --> 00:07:20.741 align:middle line:-1
我们可以信任它的哪些方面

00:07:20.807 --> 00:07:22.643 align:middle line:-1
我们还需要进行什么验证呢？”

00:07:24.711 --> 00:07:28.549 align:middle line:-1
在我们实际看到这个数据前

00:07:28.615 --> 00:07:29.950 align:middle line:-1
我们对它内容没多少了解

00:07:30.517 --> 00:07:33.320 align:middle line:-1
事实上 我们只有开始检查它的时候

00:07:33.387 --> 00:07:34.755 align:middle line:-1
才能更好地了解数据结构

00:07:35.355 --> 00:07:37.558 align:middle line:-2
如果你曾以这种方式
用过动态去序列化的话

00:07:37.624 --> 00:07:39.826 align:middle line:-1
你就会了解它有很多的缺点

00:07:40.460 --> 00:07:42.596 align:middle line:-1
你不能提前得到数据是什么样的

00:07:42.663 --> 00:07:43.830 align:middle line:-1
因为它是非常概括性的

00:07:44.231 --> 00:07:47.034 align:middle line:-1
因此我们想看下该数据包含什么

00:07:47.100 --> 00:07:48.235 align:middle line:-1
我们可以如何使用它

00:07:49.636 --> 00:07:51.104 align:middle line:-1
让我们举例来说一下

00:07:51.872 --> 00:07:54.775 align:middle line:-2
我最近一直在开发一个叫
Sell My Old Junk的app

00:07:54.842 --> 00:07:58.078 align:middle line:-2
它可以让我
把旧货卖给朋友和家人

00:07:58.779 --> 00:08:03.350 align:middle line:-2
当他们有人打开我的app时
我的app会向服务器发一个请求

