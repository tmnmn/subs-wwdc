WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.207 --> 00:34:03.177 align:middle line:-2
正如我们所见
很多类型如果是来自外部资源的话

00:34:03.243 --> 00:34:05.746 align:middle line:-2
需要进行额外的验证
就像是我们的这个

00:34:06.747 --> 00:34:08.148 align:middle line:-1
我们需要对其进一步验证

00:34:09.850 --> 00:34:11.851 align:middle line:-1
我们可以通过从解码器覆写其初始化

00:34:11.918 --> 00:34:14.221 align:middle line:-1
来对我们自己的类型进行验证

00:34:14.554 --> 00:34:17.591 align:middle line:-2
在本例中
有个来自前面的JSON响应

00:34:17.658 --> 00:34:19.893 align:middle line:-2
我可以通过创建一个
带有同名字段的类型

00:34:19.960 --> 00:34:22.362 align:middle line:-1
来将它巧妙地转换成可编码类型

00:34:23.697 --> 00:34:25.364 align:middle line:-1
因为所有字段都是可编码的

00:34:25.431 --> 00:34:28.335 align:middle line:-2
我就可以得到初始化
和编码的免费实现

00:34:28.902 --> 00:34:30.504 align:middle line:-1
但我想要覆写初始化

00:34:30.571 --> 00:34:32.172 align:middle line:-1
以确保我所执行的验证

00:34:32.239 --> 00:34:34.208 align:middle line:-2
跟我前面对主要值
所做的验证是一样的

00:34:34.975 --> 00:34:37.244 align:middle line:-1
我能以相同的方法在这里实现它

00:34:38.545 --> 00:34:43.650 align:middle line:-2
我从负载解码ID的旧代码
是将其向下转型为整型

00:34:43.984 --> 00:34:47.353 align:middle line:-2
我在这只要从解码器
解码一个整型就可以了

00:34:48.487 --> 00:34:52.492 align:middle line:-2
如果在负载中找到的类型
是不同的或是丢失的类型

00:34:52.559 --> 00:34:54.895 align:middle line:-2
这就会抛出一个
表明所出现问题的错误

00:34:56.396 --> 00:34:57.664 align:middle line:-1
比这更重要的是

00:34:58.198 --> 00:35:01.268 align:middle line:-2
我在这个验证方法中
添加的自己的验证

