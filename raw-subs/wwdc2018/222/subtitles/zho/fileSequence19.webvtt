WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:01.108 --> 00:19:03.877 align:middle line:-2
当我想将数据加载回来时
我可以进行相同的操作

00:19:03.944 --> 00:19:08.015 align:middle line:-2
我可以获得原始数据 然后将其传给
KeyedUnarchiver

00:19:08.081 --> 00:19:09.483 align:middle line:-1
然后得到一个返回的对象

00:19:11.418 --> 00:19:15.155 align:middle line:-2
正如我们所说的 在这的每个点
数据都会变得更为复杂

00:19:15.355 --> 00:19:17.791 align:middle line:-1
在我们可能信任它之前

00:19:17.858 --> 00:19:18.792 align:middle line:-1
我们还得对它进行更多验证

00:19:19.459 --> 00:19:21.628 align:middle line:-2
你可能会感到奇怪
“好的 有什么呢？

00:19:21.695 --> 00:19:23.263 align:middle line:-1
还剩下什么可验证的呢？”

00:19:23.931 --> 00:19:26.300 align:middle line:-1
这里的向下转型就是一个不错的点

00:19:27.968 --> 00:19:31.772 align:middle line:-2
这个向下转型是发生于
我们解压对象后

00:19:32.706 --> 00:19:34.174 align:middle line:-1
这怎么会失败呢？

00:19:35.242 --> 00:19:37.578 align:middle line:-1
这表示有些其他的问题出现了

00:19:37.644 --> 00:19:38.946 align:middle line:-1
让我们来看一下

00:19:39.012 --> 00:19:40.614 align:middle line:-1
（有键归档中的模型表示）

00:19:40.681 --> 00:19:42.282 align:middle line:-1
这是个我的归档中的模型对象的

00:19:42.349 --> 00:19:45.185 align:middle line:-1
抽象表示

00:19:46.286 --> 00:19:48.889 align:middle line:-1
这里有所有我们在编程中关心的字段

00:19:49.089 --> 00:19:51.558 align:middle line:-1
每个字段都包含自己的结构 子结构

00:19:51.625 --> 00:19:52.993 align:middle line:-1
以及内容等等

00:19:53.760 --> 00:19:55.095 align:middle line:-1
但这里有意思的是

00:19:55.662 --> 00:20:00.300 align:middle line:-1
这个表示还包含了这个对象的类名

