WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.146 --> 00:33:01.181 align:middle line:-1
重设回旧的默认值

00:33:02.916 --> 00:33:06.086 align:middle line:-2
在你有了Unarchiver后
你就可以像往常一样解码了

00:33:08.989 --> 00:33:10.691 align:middle line:-1
如果你在开发Swift app

00:33:10.757 --> 00:33:14.228 align:middle line:-2
NSSecureCoding
就不是唯一一个可用来将你模型类型

00:33:14.294 --> 00:33:16.496 align:middle line:-1
与外部表示间相互转换的方法了

00:33:16.563 --> 00:33:17.631 align:middle line:-1
（可编码）

00:33:17.698 --> 00:33:20.167 align:middle line:-2
去年在Swift 4中
我们引入了可编码协议

00:33:20.234 --> 00:33:22.102 align:middle line:-1
可以更容易地实现那些功能

00:33:22.936 --> 00:33:25.172 align:middle line:-2
重要的是 所有NSSecureCoding
的设计决策

00:33:25.239 --> 00:33:29.910 align:middle line:-1
从一开始就出现在可编码中

00:33:31.111 --> 00:33:35.015 align:middle line:-2
可编码从来不会将类型信息
写入归档中

00:33:35.082 --> 00:33:36.850 align:middle line:-1
所以后面没有什么可信任的

00:33:37.217 --> 00:33:40.420 align:middle line:-1
通过让你提前传入要解码的

00:33:40.487 --> 00:33:42.155 align:middle line:-1
静态类型信息

00:33:42.356 --> 00:33:44.525 align:middle line:-1
你可以防止这类攻击

00:33:46.360 --> 00:33:48.128 align:middle line:-1
可编码也有便利方法

00:33:48.195 --> 00:33:51.064 align:middle line:-2
如果你有个类型
它的字段本身都是可编码的

00:33:51.131 --> 00:33:53.433 align:middle line:-1
你就可以得到 初始化需求

00:33:53.500 --> 00:33:55.035 align:middle line:-1
以及编码需求的同步实现

00:33:56.003 --> 00:33:57.571 align:middle line:-1
而同步实现

00:33:57.638 --> 00:33:59.840 align:middle line:-2
会免费为你进行类型检查
和可空性检查

