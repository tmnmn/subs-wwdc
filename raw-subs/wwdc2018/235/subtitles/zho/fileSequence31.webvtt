WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.793 --> 00:31:01.828 align:middle line:-1
如果我们把文本全部写到了边缘

00:31:01.895 --> 00:31:06.400 align:middle line:-2
当你的眼睛会在给定字体大小下
从一行文字跟踪到下一行文字时候

00:31:06.466 --> 00:31:10.737 align:middle line:-1
它会变得难以阅读

00:31:11.672 --> 00:31:17.344 align:middle line:-2
因此解决方案是
始终在可读宽度内呈现文本

00:31:17.711 --> 00:31:20.080 align:middle line:-2
即系统根据用户当前选择的
动态类型字体大小

00:31:20.414 --> 00:31:24.751 align:middle line:-1
提供的推荐可读宽度

00:31:25.052 --> 00:31:29.656 align:middle line:-2
动态类型是
iOS的另一个自适应元素

00:31:31.258 --> 00:31:33.026 align:middle line:-1
你能通过UIView上的API

00:31:33.427 --> 00:31:37.497 align:middle line:-2
获得可读的宽度叫做
readableContentGuide

00:31:37.798 --> 00:31:39.199 align:middle line:-1
这是另一个布局指南

00:31:39.266 --> 00:31:42.169 align:middle line:-1
就像边界和安全区域的布局指南

00:31:42.970 --> 00:31:44.137 align:middle line:-1
它的工作原理是一样的

00:31:46.707 --> 00:31:49.776 align:middle line:-1
现在我提到了这个可读的宽度取决于

00:31:49.843 --> 00:31:53.213 align:middle line:-1
用户当前选择的动态类型大小

00:31:53.280 --> 00:31:57.050 align:middle line:-2
这意味着如果用户在控制中心或
设置app中更改其动态类型大小

00:31:57.484 --> 00:32:00.420 align:middle line:-1
则可读宽度将变小或更大以进行补偿

