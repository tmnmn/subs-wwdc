WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.704 --> 00:19:02.643 align:start position:29% line:-2
2016年の我々の
セッションをご覧ください

00:19:03.977 --> 00:19:06.914 align:start position:32% line:-2
テストの実行について
見てきましたが

00:19:07.014 --> 00:19:10.517 align:start position:27% line:-2
Xcodeの
並列テストについて話します

00:19:11.318 --> 00:19:12.619 align:start position:36% line:-1
以前と同じように

00:19:12.719 --> 00:19:16.256 align:start position:27% line:-1
テストランナーを使用します

00:19:17.124 --> 00:19:19.593 align:start position:25% line:-1
ですが１つのランナーではなく

00:19:19.693 --> 00:19:22.196 align:start position:27% line:-1
複数のランナーを起動します

00:19:22.329 --> 00:19:25.265 align:start position:29% line:-2
そして各々が
サブセットをテストします

00:19:26.266 --> 00:19:30.137 align:start position:30% line:-2
Xcodeはランナーに
テストを分配し

00:19:30.237 --> 00:19:33.674 align:start position:30% line:-2
その機器での作業効率を
高めます

00:19:35.242 --> 00:19:36.944 align:start position:32% line:-1
詳しく見てみましょう

00:19:37.978 --> 00:19:40.747 align:start position:30% line:-1
ランナーに分配する時は

00:19:40.848 --> 00:19:42.816 align:start position:32% line:-1
クラス単位で渡します

00:19:43.383 --> 00:19:46.286 align:start position:25% line:-1
各ランナーはテストを受け取り

00:19:46.520 --> 00:19:50.624 align:start position:30% line:-2
別クラスに移る前に
そのテストを実行します

00:19:51.225 --> 00:19:54.795 align:start position:34% line:-2
すべてのクラスを
実行すると完了です

00:19:56.430 --> 00:20:00.334 align:start position:29% line:-2
なぜクラスごとに
送るか疑問に思うでしょう

