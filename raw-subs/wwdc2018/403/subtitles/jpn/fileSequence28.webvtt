WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.078 --> 00:28:01.181 align:start position:30% line:-2
しかしデフォルトの数が
機能しない時に

00:28:01.281 --> 00:28:03.851 align:start position:30% line:-2
コマンドラインから
オーバーライドできます

00:28:05.953 --> 00:28:08.121 align:start position:0% line:-1
次は“parallel-testing-enabled”

00:28:08.222 --> 00:28:10.657 align:start position:29% line:-1
オンオフを明確に切り替え

00:28:10.757 --> 00:28:13.894 align:start position:32% line:-2
設定をスキーム内で
オーバーライドします

00:28:16.797 --> 00:28:20.334 align:start position:25% line:-1
並列テストを実行したい場合は

00:28:20.434 --> 00:28:22.135 align:start position:34% line:-1
オンにするだけです

00:28:22.503 --> 00:28:24.271 align:start position:34% line:-1
しかし少しのコツで

00:28:24.371 --> 00:28:26.874 align:start position:25% line:-1
最大限に生かすことができます

00:28:28.041 --> 00:28:32.980 align:start position:30% line:-2
まず長時間のテストを
２つのクラスに分けます

00:28:34.214 --> 00:28:37.251 align:start position:32% line:-2
テストクラスは
並列で実行されるので

00:28:37.351 --> 00:28:40.854 align:start position:21% line:-1
最長のクラスより速くはなりません

00:28:41.822 --> 00:28:45.592 align:start position:27% line:-2
並列テストで
このような状況に気付きます

00:28:45.692 --> 00:28:49.730 align:start position:27% line:-2
１つのクラスが
全体の時間に影響するのです

00:28:50.330 --> 00:28:52.933 align:start position:29% line:-1
このクラスを２つに分けて

00:28:53.233 --> 00:28:58.539 align:start position:25% line:-2
各ランナーに
より均等に分配してみましょう

00:28:58.705 --> 00:29:01.308 align:start position:29% line:-1
大幅な時間短縮が可能です

