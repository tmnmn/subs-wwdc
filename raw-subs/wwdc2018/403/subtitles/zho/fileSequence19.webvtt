WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.738 --> 00:19:00.374 align:middle line:0
请你们观看2016年的演讲

00:19:00.774 --> 00:19:02.476 align:middle line:-1
此演讲进行了更详细的讲解

00:19:04.044 --> 00:19:06.647 align:middle line:-2
现在 我们已经了解
我们的测试是如何执行的

00:19:07.114 --> 00:19:10.017 align:middle line:-2
最后让我们看看
Xcode如何并行运行测试

00:19:11.385 --> 00:19:12.686 align:middle line:-1
如前所述

00:19:12.753 --> 00:19:16.190 align:middle line:-2
Xcode启动一个测试运行器
以执行我们的测试

00:19:17.191 --> 00:19:19.393 align:middle line:-1
但是不同于启动一个运行器

00:19:19.726 --> 00:19:21.995 align:middle line:-1
Xcode将启动多个运行器

00:19:22.429 --> 00:19:25.232 align:middle line:-2
每个运行器
执行一个测试子集

00:19:26.366 --> 00:19:29.903 align:middle line:-2
事实上 Xcode动态
分配测试给运行器

00:19:30.337 --> 00:19:33.473 align:middle line:-1
在机器上实现最高的利用效率

00:19:35.309 --> 00:19:36.543 align:middle line:-1
让我们来了解详细过程

00:19:38.011 --> 00:19:42.616 align:middle line:-2
Xcode分配测试到运行器时
将按类进行分配

00:19:43.450 --> 00:19:45.953 align:middle line:-2
每个运行器接收
一个测试类以执行

00:19:46.553 --> 00:19:50.257 align:middle line:-2
它将执行这个类
然后执行另一个类

00:19:51.291 --> 00:19:54.561 align:middle line:-2
在测试完成时
所有类执行之后

00:19:56.463 --> 00:20:00.267 align:middle line:-2
你可能会想
为什么Xcode按类分配测试

