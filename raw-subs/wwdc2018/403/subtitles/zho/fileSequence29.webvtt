WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.772 --> 00:29:00.974 align:middle line:-1
从而缩短执行总用时

00:29:02.242 --> 00:29:03.610 align:middle line:-1
你并不需要

00:29:03.677 --> 00:29:05.946 align:middle line:-1
拆分所有的类

00:29:06.380 --> 00:29:09.716 align:middle line:-2
这没有必根本
但是如果你发现这样的瓶颈

00:29:09.983 --> 00:29:11.185 align:middle line:-1
可以尝试这样做

00:29:13.887 --> 00:29:17.858 align:middle line:-2
接下来 将性能测试
放入它们自己的捆绑包

00:29:17.925 --> 00:29:19.526 align:middle line:-1
并禁用并行测试

00:29:20.661 --> 00:29:22.362 align:middle line:-1
这似乎不够直观

00:29:22.429 --> 00:29:26.300 align:middle line:-1
但是性能测试对系统活动十分敏感

00:29:26.800 --> 00:29:29.069 align:middle line:-1
如果并行地进行测试

00:29:29.136 --> 00:29:31.371 align:middle line:-1
可能无法达到性能指标

00:29:33.473 --> 00:29:37.511 align:middle line:-1
最后应该理解并行测试并不安全

00:29:38.478 --> 00:29:41.014 align:middle line:-1
大多数测试都可以并行完成

00:29:41.481 --> 00:29:44.284 align:middle line:-1
但是如果多个测试访问共享系统资源

00:29:44.351 --> 00:29:45.886 align:middle line:-1
比如文件或数据库

00:29:46.286 --> 00:29:48.989 align:middle line:-1
需要引入显式同步机制

00:29:49.056 --> 00:29:50.757 align:middle line:-1
以允许它们同时运行

00:29:52.226 --> 00:29:53.961 align:middle line:-1
说到测试提示和技巧

00:29:54.027 --> 00:29:56.864 align:middle line:-1
如果想要详细了解如何测试你的代码

00:29:57.297 --> 00:29:59.900 align:middle line:-1
我建议你们参加星期五的演讲

00:29:59.967 --> 00:30:02.903 align:middle line:-2
由我的同事Stuart
和Brian主讲 希望不要错过

