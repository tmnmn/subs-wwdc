WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.980 --> 00:13:01.782 align:middle line:-2
否则它们始终
以相同的顺序运行

00:13:02.816 --> 00:13:04.952 align:middle line:-1
这种决定方法是一把双刃剑

00:13:05.686 --> 00:13:07.487 align:middle line:-1
这样很容易遗漏漏洞

00:13:07.554 --> 00:13:11.925 align:middle line:-2
因为一个测试显式地
依赖于在它之前运行的另一个测试

00:13:13.460 --> 00:13:15.629 align:middle line:-1
让我们来看这一个例子

00:13:16.697 --> 00:13:18.765 align:middle line:-1
假设你有测试A、B和C

00:13:19.399 --> 00:13:22.135 align:middle line:-2
它们按照此顺序运行
而且始终获得通过

00:13:22.603 --> 00:13:24.738 align:middle line:-1
但是详细地观察测试

00:13:25.072 --> 00:13:27.908 align:middle line:-2
你会发现测试A
创建一个数据库

00:13:29.176 --> 00:13:32.579 align:middle line:-2
然后 测试B会运行
将数据写入数据库

00:13:33.647 --> 00:13:36.984 align:middle line:-2
然后测试C运行
删除数据

00:13:40.721 --> 00:13:44.258 align:middle line:-2
这些测试获得通过
是因为它们按照特定顺序运行

00:13:44.791 --> 00:13:48.695 align:middle line:-2
--如果打乱它们的顺序
例如 重新命名

00:13:49.796 --> 00:13:51.365 align:middle line:-1
然后再次运行

00:13:51.431 --> 00:13:54.801 align:middle line:-2
测试B可能会将数据
写入一个不存在的数据库

00:13:54.868 --> 00:13:56.370 align:middle line:-1
你的测试将会失败

00:13:57.738 --> 00:14:00.574 align:middle line:-1
为了防止这样的问题

