WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:56.463 --> 00:20:00.267 align:middle line:-2
你可能会想
为什么Xcode按类分配测试

00:20:00.534 --> 00:20:03.637 align:middle line:-2
而不是将单个测试方法
分配给运行器

00:20:04.605 --> 00:20:06.340 align:middle line:-1
这有多方面的原因

00:20:07.641 --> 00:20:11.545 align:middle line:-2
首先 类内部的测试之间
可能存在隐藏的依赖关系

00:20:11.612 --> 00:20:13.180 align:middle line:-1
Honza前面已经讲过

00:20:13.847 --> 00:20:18.385 align:middle line:-2
如果Xcode接收类内部的测试
并将它们分配给不同的运行器

00:20:18.852 --> 00:20:21.154 align:middle line:-1
可能难以诊断测试问题

00:20:23.357 --> 00:20:27.995 align:middle line:-2
其次 每个测试类
层级设置和分解方法

00:20:28.328 --> 00:20:30.564 align:middle line:-1
可能会执行大量的计算

00:20:31.398 --> 00:20:34.368 align:middle line:-2
通过将类内部的有限数量
的测试分配给一个运行器

00:20:34.801 --> 00:20:37.771 align:middle line:-1
XE测试仅需一次调用这些方法

00:20:38.005 --> 00:20:39.473 align:middle line:-1
可以显著节省时间

00:20:42.409 --> 00:20:46.547 align:middle line:-2
现在 我想谈谈在模拟器上
并行进行测试的一些要点

00:20:48.348 --> 00:20:50.651 align:middle line:-1
在模拟器上并行运行测试时

00:20:51.084 --> 00:20:53.954 align:middle line:-2
Xcode开始接收
你选择的模拟器

00:20:54.254 --> 00:20:57.891 align:middle line:-1
创建多个独特的模拟器副本或克隆

00:20:58.959 --> 00:21:01.895 align:middle line:-1
这些克隆

