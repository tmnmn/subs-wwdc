WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.280 --> 00:18:03.617 align:middle line:-2
为了理解Xcode
并行运行测试的原理

00:18:03.984 --> 00:18:06.687 align:middle line:-1
我们首先来看测试是如何执行的

00:18:07.087 --> 00:18:08.689 align:middle line:-1
在运行时发生了什么？

00:18:10.591 --> 00:18:12.192 align:middle line:-1
我们先来看单元测试

00:18:12.926 --> 00:18:16.363 align:middle line:-1
单元测试被编译成一个测试包

00:18:17.731 --> 00:18:23.203 align:middle line:-2
在运行时层面 Xcode启动
一个app实例 作为测试运行器

00:18:24.671 --> 00:18:28.375 align:middle line:-2
运行器加载测试包
执行所有测试

00:18:29.877 --> 00:18:31.545 align:middle line:-1
单元测试就是这样执行的

00:18:32.346 --> 00:18:33.714 align:middle line:-1
那么用户界面测试呢？

00:18:34.214 --> 00:18:35.916 align:middle line:-1
对于用户界面测试 原理基本相似

00:18:36.483 --> 00:18:38.719 align:middle line:-1
测试被编译成为一个捆绑包

00:18:39.286 --> 00:18:42.723 align:middle line:-2
但是捆绑包由Xcode
创建的自定义app加载

00:18:43.357 --> 00:18:45.759 align:middle line:-1
你的app不再运行测试

00:18:46.593 --> 00:18:49.329 align:middle line:-1
相反 测试自动控制你的app

00:18:49.763 --> 00:18:53.433 align:middle line:-2
通过启动app
与不同的用户界面部分进行交互

00:18:55.135 --> 00:18:57.437 align:middle line:-1
如果想要详细了解此流程

00:18:57.738 --> 00:19:00.374 align:middle line:0
请你们观看2016年的演讲

