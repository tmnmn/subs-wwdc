WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:55.649 --> 00:17:02.322 align:start position:23% line:-2
他の問題は メモリ管理の大半が
代理で行われることです

00:17:02.422 --> 00:17:08.428 align:start position:25% line:-2
メモリ関連の問題は
気付くのが遅れてしまうことも

00:17:10.230 --> 00:17:15.935 align:start position:29% line:-2
もう１つ考慮すべき
重要なトピックは性能です

00:17:16.036 --> 00:17:19.071 align:start position:25% line:-2
プロトタイプでは
よくCPUコードを使用します

00:17:19.172 --> 00:17:23.277 align:start position:29% line:-2
CPコードから
GPコードに向けた処理は

00:17:23.377 --> 00:17:27.314 align:start position:29% line:-2
リアルタイムで
取得できると思いがちです

00:17:28.415 --> 00:17:34.388 align:start position:21% line:-2
プロトタイピングとワークフローで
問題を早期発見するには？

00:17:35.522 --> 00:17:39.326 align:start position:25% line:-2
PyCoreImageという
解決策があります

00:17:39.426 --> 00:17:41.361 align:start position:25% line:-2
Core Imageのための
Python結合です

00:17:42.262 --> 00:17:46.600 align:start position:30% line:-2
Core Imageの
高性能レンダリングと―

00:17:46.733 --> 00:17:50.571 align:start position:25% line:-2
Pythonプログラム言語の
柔軟性の結合です

00:17:51.038 --> 00:17:55.843 align:start position:23% line:-2
iOSとmacOS両方のための
サポートと

00:17:55.943 --> 00:17:58.378 align:start position:27% line:-2
200以上の内蔵フィルタを
取得できます

00:17:58.879 --> 00:18:02.549 align:start position:18% line:-1
PyCoreImageの内部はこちら

