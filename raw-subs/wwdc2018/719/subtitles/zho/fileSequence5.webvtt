WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:55.662 --> 00:05:00.367 align:middle line:0
并且此源是在build时
而不是在运行时编译的

00:05:01.502 --> 00:05:05.606 align:middle line:0
和以前一样
你可以根据此代码建内核

00:05:06.106 --> 00:05:10.277 align:middle line:0
使用带有Metal函数名
和二进制数据的内核

00:05:12.012 --> 00:05:16.383 align:middle line:0
其优势点是可以应用此数据

00:05:16.450 --> 00:05:18.886 align:middle line:0
而无需耗用额外编译资源

00:05:19.486 --> 00:05:23.690 align:middle line:-2
需要注意的是
它适用Metal支持的CI上下文

00:05:24.258 --> 00:05:26.126 align:middle line:-1
但它带来了巨大的性能优势

00:05:27.928 --> 00:05:29.897 align:middle line:-1
所以 从这个版本开始

00:05:29.963 --> 00:05:33.333 align:middle line:-1
我们将把CI内核语言标为已弃用

00:05:33.700 --> 00:05:36.303 align:middle line:-1
因为 虽然我们会继续支持这种语言

00:05:37.237 --> 00:05:39.706 align:middle line:-2
我们认为编写
Metal内核的新方法

00:05:39.773 --> 00:05:42.142 align:middle line:-1
为作为开发人员的你提供了很多优势

00:05:42.376 --> 00:05:45.479 align:middle line:-2
首先 你获得了
我之前概述的性能优势

00:05:45.546 --> 00:05:50.083 align:middle line:-2
它同时还提供了
build时代码语法着色

00:05:50.150 --> 00:05:52.619 align:middle line:-1
和优秀的调试工具的优势

00:05:52.920 --> 00:05:55.489 align:middle line:-1
如果你使用Metal源的话

00:05:57.958 --> 00:05:59.092 align:middle line:-1
好

