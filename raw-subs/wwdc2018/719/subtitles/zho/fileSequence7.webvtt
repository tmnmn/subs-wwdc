WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.318 --> 00:07:00.721 align:middle line:-1
我们还可以写像素组

00:07:01.088 --> 00:07:04.157 align:middle line:0
即只需在着色器中一条指令
你就可以

00:07:04.458 --> 00:07:06.960 align:middle line:0
写入图像的四个像素

00:07:08.428 --> 00:07:10.264 align:middle line:-1
所有这三个功能

00:07:10.330 --> 00:07:15.302 align:middle line:-1
都可以用于着色器中极大地提高性能

00:07:15.369 --> 00:07:18.071 align:middle line:-1
我来谈一谈如何运作的例子

00:07:18.772 --> 00:07:22.976 align:middle line:-2
想象一下你有一个简单的
3乘3卷积内核

00:07:23.710 --> 00:07:26.547 align:middle line:-1
用于一个图像的一个通道

00:07:26.613 --> 00:07:28.315 align:middle line:-1
这是一种相当常见的操作

00:07:28.382 --> 00:07:31.084 align:middle line:-1
例如要锐化图像的亮度

00:07:31.485 --> 00:07:35.522 align:middle line:-2
在这样的内核中
通常每次调用内核时

00:07:35.923 --> 00:07:39.326 align:middle line:-1
它负责产生一个输出像素

00:07:39.860 --> 00:07:42.129 align:middle line:-1
但是因为这是一个三乘三的卷积

00:07:42.629 --> 00:07:45.132 align:middle line:-1
你的内核需要读取9个像素

00:07:45.699 --> 00:07:47.234 align:middle line:0
以达到这个效果

00:07:47.301 --> 00:07:50.103 align:middle line:0
因此 我们每写一个像素
就需读取个像素

00:07:51.371 --> 00:07:52.673 align:middle line:0
但我们通过新的组写功能

00:07:52.739 --> 00:07:55.909 align:middle line:0
改进这一点

00:07:56.310 --> 00:07:57.945 align:middle line:-1
使用新的组写功能

00:07:58.011 --> 00:08:02.950 align:middle line:-2
你的内核可以一次调用
写出二乘二的一组像素

