WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.260 --> 00:21:01.895 align:middle line:-1
让我们举一个例子

00:21:01.962 --> 00:21:03.797 align:middle line:-2
看如何用
PyCoreImage应用过滤器

00:21:03.864 --> 00:21:06.567 align:middle line:-1
你会看到这个框架多么简单和强大

00:21:07.134 --> 00:21:08.402 align:middle line:-1
你首先要做的是

00:21:08.468 --> 00:21:11.271 align:middle line:-2
从PyCoreImage包
导入你的CIMG类

00:21:12.072 --> 00:21:14.208 align:middle line:0
我们可以用它从文件加载图像

00:21:15.409 --> 00:21:18.679 align:middle line:0
注意 此时我们没有像素缓冲区

00:21:19.012 --> 00:21:20.647 align:middle line:0
Core Image
为图片创建配方

00:21:20.714 --> 00:21:22.516 align:middle line:0
在这种特殊情况下

00:21:22.583 --> 00:21:26.320 align:middle line:0
这个配方只是提供
从文件加载图像的指令

00:21:27.754 --> 00:21:29.356 align:middle line:0
你可以用过滤器

00:21:29.423 --> 00:21:30.657 align:middle line:0
创建更复杂的图表

00:21:30.724 --> 00:21:32.960 align:middle line:0
只需在其上调用CI过滤器名称

00:21:33.026 --> 00:21:35.529 align:middle line:0
并传递输入原色
在本例中为标准差

00:21:35.696 --> 00:21:38.131 align:middle line:0
可看到我们正组装一个更复杂的图形

00:21:38.198 --> 00:21:39.299 align:middle line:0
如果我们放大它

00:21:39.533 --> 00:21:41.235 align:middle line:0
我们可以看到模糊处理器

00:21:41.301 --> 00:21:42.202 align:middle line:0
就在中间

00:21:43.670 --> 00:21:45.739 align:middle line:0
如果你想获得像素缓冲区表示

00:21:45.806 --> 00:21:47.608 align:middle line:0
你可以在CIMG实例上

00:21:47.674 --> 00:21:48.909 align:middle line:0
调用生成

00:21:48.976 --> 00:21:52.012 align:middle line:0
你会得到一个合适的
NumPy缓冲区

00:21:55.782 --> 00:21:56.984 align:middle line:-1
为了做到这一点

00:21:57.050 --> 00:22:00.120 align:middle line:-2
我们需要对Core Image的
调用方式进行简化

