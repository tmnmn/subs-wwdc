WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.786 --> 00:02:03.190 align:middle line:-1
你不希望最大量地连接

00:02:03.857 --> 00:02:06.793 align:middle line:-2
例如 你的app里
可能有一个昂贵的过滤器

00:02:06.860 --> 00:02:08.461 align:middle line:-1
在过滤器链的早期

00:02:09.329 --> 00:02:10.864 align:middle line:-1
你的app的用户

00:02:10.931 --> 00:02:13.333 align:middle line:-1
在某个时刻可能正在调整

00:02:13.400 --> 00:02:14.768 align:middle line:-1
在图中跟随它的过滤器

00:02:15.135 --> 00:02:16.703 align:middle line:-1
这是一个经典的情况

00:02:16.770 --> 00:02:19.173 align:middle line:-1
中间缓冲区是个好主意

00:02:20.007 --> 00:02:22.109 align:middle line:-1
在介于两者之间的位置

00:02:22.809 --> 00:02:25.913 align:middle line:0
通过设这个中间缓冲区

00:02:26.180 --> 00:02:28.182 align:middle line:0
调整辅助过滤器时

00:02:28.415 --> 00:02:30.551 align:middle line:0
无需两次付出

00:02:30.717 --> 00:02:33.554 align:middle line:0
昂贵的过滤器的成本

00:02:34.087 --> 00:02:35.956 align:middle line:0
那么如何在app中操作？

00:02:36.023 --> 00:02:38.325 align:middle line:0
我们有一个新的API 顾名思义

00:02:38.859 --> 00:02:40.027 align:middle line:0
insertingIntermediate

00:02:40.794 --> 00:02:43.664 align:middle line:-1
我们谈谈这会如何影响我们的结果

00:02:43.730 --> 00:02:45.432 align:middle line:-1
我们所做的不是

00:02:45.499 --> 00:02:46.500 align:middle line:-1
尽可能多地连接

00:02:46.667 --> 00:02:49.136 align:middle line:-1
我们会尊重中间缓冲区的位置

00:02:49.369 --> 00:02:51.772 align:middle line:0
并尽可能多地连接它

00:02:53.207 --> 00:02:54.241 align:middle line:-1
这里有几点说明

00:02:54.308 --> 00:02:55.442 align:middle line:-1
要记住一件事

00:02:55.709 --> 00:02:57.244 align:middle line:-1
默认情况下

00:02:57.311 --> 00:02:59.413 align:middle line:-2
Core Image
对所有中间缓冲区作缓存

00:02:59.479 --> 00:03:02.249 align:middle line:-1
为后续生成作准备

