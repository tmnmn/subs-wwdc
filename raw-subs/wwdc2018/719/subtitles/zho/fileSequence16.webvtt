WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.658 --> 00:16:01.295 align:middle line:-1
你可以使用各种生成后端

00:16:01.361 --> 00:16:02.196 align:middle line:-1
如Core Image

00:16:04.631 --> 00:16:06.466 align:middle line:-1
Metal及Metal性能着色器

00:16:06.700 --> 00:16:09.236 align:middle line:-2
及vImage
如果你想留在CPU上

00:16:10.337 --> 00:16:14.408 align:middle line:-2
从原型到产品的初始转换
可能非常耗时

00:16:14.474 --> 00:16:18.512 align:middle line:-2
第一次生成可能看起来
不像你期望的那样

00:16:19.313 --> 00:16:21.648 align:middle line:-1
有各种各样的原因

00:16:21.715 --> 00:16:23.584 align:middle line:-1
可能导致这些像素差异

00:16:23.650 --> 00:16:25.452 align:middle line:-1
其中一个就是

00:16:25.519 --> 00:16:28.021 align:middle line:-1
过滤器在不同框架的实现方式

00:16:28.088 --> 00:16:29.122 align:middle line:-1
可能完全不同

00:16:29.590 --> 00:16:31.458 align:middle line:-1
我们看左边这个例子

00:16:31.525 --> 00:16:34.328 align:middle line:-2
我们有一个恒定的模糊
适用于这个漂亮的羽化

00:16:34.595 --> 00:16:36.029 align:middle line:-1
从前台到背景

00:16:36.530 --> 00:16:39.733 align:middle line:-1
这个过滤器的示例

00:16:39.800 --> 00:16:42.336 align:middle line:-1
可以显示各种性能优化

00:16:42.402 --> 00:16:43.570 align:middle line:-1
使其加速

00:16:44.338 --> 00:16:47.508 align:middle line:-1
这些优化会引入数字误差

00:16:47.574 --> 00:16:49.476 align:middle line:-1
而在过滤器堆栈中传播

00:16:50.077 --> 00:16:53.981 align:middle line:-2
从而可能会对过滤器输出
产生重大变化

00:16:55.649 --> 00:16:58.785 align:middle line:-2
当你写代码时
通常会出现的另一个问题

00:16:58.852 --> 00:17:00.654 align:middle line:-1
是在原型环境中

