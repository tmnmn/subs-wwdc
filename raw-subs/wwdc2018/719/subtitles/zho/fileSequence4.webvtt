WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.307 --> 00:04:03.510 align:middle line:-1
传统的方法是CI内核语言

00:04:03.944 --> 00:04:06.813 align:middle line:-2
在这种情况下
源文件中有一个字符串

00:04:06.880 --> 00:04:09.249 align:middle line:-2
你的Swift代码
或你的objective C代码

00:04:09.583 --> 00:04:11.652 align:middle line:-1
在运行时 你调用

00:04:11.718 --> 00:04:13.754 align:middle line:-1
内核及源代码

00:04:14.688 --> 00:04:18.325 align:middle line:-1
稍后 当你基于该内核创建图像时

00:04:18.492 --> 00:04:21.228 align:middle line:-1
你可以生成任何类型的CI上下文

00:04:21.295 --> 00:04:25.566 align:middle line:-2
不论该上下文是由Metal
还是Open GL支持

00:04:26.934 --> 00:04:30.337 align:middle line:-1
然而 当生成时 需要翻译该源

00:04:30.404 --> 00:04:33.240 align:middle line:-2
需要将其翻译为
Metal或GLSL

00:04:33.607 --> 00:04:35.609 align:middle line:-1
并且这个步骤有成本

00:04:36.310 --> 00:04:40.113 align:middle line:0
最后 该代码被编译为GPU指令集

00:04:40.180 --> 00:04:41.181 align:middle line:-1
然后执行

00:04:42.616 --> 00:04:44.785 align:middle line:0
从去年的iOS 11开始

00:04:44.852 --> 00:04:46.987 align:middle line:0
我们添加了一种
编写CI内核的新方法

00:04:47.054 --> 00:04:48.956 align:middle line:0
具有一些显著优势

00:04:49.122 --> 00:04:52.059 align:middle line:0
这就是基于
Metal着色语言的CI内核

00:04:52.593 --> 00:04:55.596 align:middle line:0
这种情况下 你的项目中有源代码

00:04:55.662 --> 00:05:00.367 align:middle line:0
并且此源是在build时
而不是在运行时编译的

