WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.011 --> 00:08:02.950 align:middle line:-2
你的内核可以一次调用
写出二乘二的一组像素

00:08:03.383 --> 00:08:06.053 align:middle line:-1
当然这二乘二小组有点大

00:08:06.119 --> 00:08:07.788 align:middle line:-1
所以不再是三乘三

00:08:08.121 --> 00:08:11.124 align:middle line:-1
而是四乘四像素读取

00:08:11.191 --> 00:08:13.627 align:middle line:-1
以写出这四个像素

00:08:14.394 --> 00:08:15.529 align:middle line:-1
我们算一下

00:08:15.896 --> 00:08:19.700 align:middle line:0
这意味着我们有16像素读取
4像素写入

00:08:19.766 --> 00:08:22.135 align:middle line:-1
所以我们已经看到了这方面的优势

00:08:24.972 --> 00:08:28.642 align:middle line:-1
我们的另一个功能是收集

00:08:29.076 --> 00:08:33.547 align:middle line:-2
在这个例子中
我们读取4乘4或16像素

00:08:33.614 --> 00:08:34.615 align:middle line:-1
有了这个功能

00:08:34.780 --> 00:08:38.818 align:middle line:-2
我们只需要四条指令
即可完成这16个红色像素

00:08:39.753 --> 00:08:41.554 align:middle line:0
如果你计算一下

00:08:41.621 --> 00:08:43.490 align:middle line:0
这意味着我们每写入四个像素

00:08:43.557 --> 00:08:44.925 align:middle line:0
只进行了四次读取

00:08:45.259 --> 00:08:47.628 align:middle line:0
这确实有助于提高性能

00:08:47.794 --> 00:08:50.731 align:middle line:-2
我们通过实际内核代码
了解一下这个过程

00:08:51.932 --> 00:08:55.736 align:middle line:-1
这是一个简单卷积的例子

00:08:55.802 --> 00:08:57.037 align:middle line:-1
就像我刚才描述的

00:08:57.437 --> 00:08:59.673 align:middle line:-1
这里 我们从输入图像

00:08:59.740 --> 00:09:01.241 align:middle line:-1
做九个样本

