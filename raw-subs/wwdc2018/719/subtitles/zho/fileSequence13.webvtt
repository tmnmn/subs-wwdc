WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.244 --> 00:13:00.147 align:middle line:-1
过去我们从内核返回一个值

00:13:00.214 --> 00:13:03.750 align:middle line:-1
而现在我们将调用目标写入

00:13:05.552 --> 00:13:08.422 align:middle line:-1
好 这一切的精彩之处是

00:13:08.722 --> 00:13:10.224 align:middle line:-1
只需很少的努力

00:13:10.290 --> 00:13:13.794 align:middle line:-2
我们可以在同样的着色器中
获得两倍的性能

00:13:13.861 --> 00:13:14.828 align:middle line:-1
这是一个非常简单的着色器

00:13:14.895 --> 00:13:16.797 align:middle line:-1
你可获得类似的结果

00:13:16.864 --> 00:13:18.065 align:middle line:-1
可在许多其它类型的着色器中实现

00:13:18.131 --> 00:13:20.200 align:middle line:-1
尤其是作卷积的那些

00:13:20.634 --> 00:13:24.304 align:middle line:-1
这是为内核提高性能的好方法

00:13:25.172 --> 00:13:27.441 align:middle line:0
我想告诉大家

00:13:27.508 --> 00:13:31.345 align:middle line:0
来看看这个很棒的内核语言新文档

00:13:31.645 --> 00:13:33.347 align:middle line:0
不论是传统的CI内核语言

00:13:33.413 --> 00:13:36.450 align:middle line:0
还是基于Metal的CI内核语言

00:13:36.517 --> 00:13:39.052 align:middle line:0
我强烈建议你阅读本文档

00:13:39.419 --> 00:13:41.655 align:middle line:0
现在我们讲过了为内核运行

00:13:41.722 --> 00:13:42.956 align:middle line:-1
提高性能的问题

00:13:43.490 --> 00:13:46.960 align:middle line:-1
我想请Emmanuel上台

00:13:47.027 --> 00:13:49.796 align:middle line:-1
来讲如何使你的新算法的

00:13:49.863 --> 00:13:50.864 align:middle line:-1
开发过程更快

00:13:55.702 --> 00:13:56.537 align:middle line:-1
谢谢 David

00:13:59.139 --> 00:14:00.307 align:middle line:-1
大家下午好

