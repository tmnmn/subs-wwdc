WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.626 --> 00:26:01.728 align:middle line:-1
这些都是在幕后处理的

00:26:02.829 --> 00:26:05.165 align:middle line:-2
Core Image
也支持过程图像

00:26:05.232 --> 00:26:07.201 align:middle line:-1
例如从颜色创建图像

00:26:07.768 --> 00:26:09.469 align:middle line:-1
或从生成器创建图像

00:26:11.805 --> 00:26:13.774 align:middle line:-1
现在我们看一下如何应用过滤器

00:26:14.942 --> 00:26:16.677 align:middle line:-1
应用过滤器再简单不过了

00:26:16.743 --> 00:26:18.078 align:middle line:-1
拿一个CIImage实例

00:26:18.345 --> 00:26:22.282 align:middle line:-2
直接在上调用过滤器名
称并传递输入原色列表

00:26:22.916 --> 00:26:27.721 align:middle line:-2
每个CIImage实例都增加了
200多个lambda表达式

00:26:28.121 --> 00:26:30.991 align:middle line:-2
直接映射到
Core Image过滤器

00:26:31.925 --> 00:26:32.826 align:middle line:-1
如果你用Swift

00:26:32.893 --> 00:26:34.962 align:middle line:-1
这是你之前看到的语法

00:26:35.028 --> 00:26:39.499 align:middle line:-2
应用过滤器
传入过滤器名称以及输入参数列表

00:26:39.566 --> 00:26:41.568 align:middle line:-1
以键值对的字典方式

00:26:43.604 --> 00:26:47.441 align:middle line:-2
要应用内核 可以在CIMG实例中
使用applyKernel

00:26:47.908 --> 00:26:50.677 align:middle line:-1
传入包含内核代码的源字符串

00:26:51.345 --> 00:26:53.847 align:middle line:-1
以及输入参数列表到该内核

00:26:53.914 --> 00:26:55.949 align:middle line:-1
我们等会儿再看一看

00:26:57.417 --> 00:26:59.820 align:middle line:-1
然后你只需指定应用该内核的范围

00:26:59.887 --> 00:27:03.957 align:middle line:-1
以及你在缓冲区中采样的感兴趣区域

