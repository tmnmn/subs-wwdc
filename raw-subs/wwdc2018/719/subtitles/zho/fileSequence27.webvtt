WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.887 --> 00:27:03.957 align:middle line:-1
以及你在缓冲区中采样的感兴趣区域

00:27:04.024 --> 00:27:05.292 align:middle line:-1
采样源

00:27:07.160 --> 00:27:11.031 align:middle line:-2
PyCoreImage
提供了一些有用的API

00:27:11.098 --> 00:27:12.666 align:middle line:-1
如复合操作

00:27:12.733 --> 00:27:13.867 align:middle line:-1
这是一个来源…

00:27:14.368 --> 00:27:17.271 align:middle line:-1
以及翻译等几何操作

00:27:17.604 --> 00:27:19.673 align:middle line:-1
缩放 旋转…

00:27:20.240 --> 00:27:21.074 align:middle line:-1
和裁剪

00:27:23.410 --> 00:27:28.415 align:middle line:-1
我想在GPU内核上再花一点时间

00:27:28.482 --> 00:27:31.652 align:middle line:-2
因为这是一个非常强大的功能
尤其对于原型

00:27:31.718 --> 00:27:33.554 align:middle line:-1
我们这里有一个字符串

00:27:33.620 --> 00:27:36.156 align:middle line:-1
包含GPU片段着色器的代码

00:27:36.690 --> 00:27:39.326 align:middle line:0
我们所拥有的基本上是一种方式

00:27:39.393 --> 00:27:41.995 align:middle line:0
让你实时原型化那种效果

00:27:43.664 --> 00:27:45.599 align:middle line:0
这是5抽头拉普拉斯算子的一个例子

00:27:45.832 --> 00:27:48.135 align:middle line:0
我们将使用它进行锐化

00:27:48.502 --> 00:27:51.305 align:middle line:0
我们在每个像素的邻域中
制作五个样本

00:27:51.772 --> 00:27:53.941 align:middle line:0
以计算局部导数的方式组合它们

00:27:54.007 --> 00:27:55.409 align:middle line:0
这将成为我们的细节

00:27:55.475 --> 00:27:58.045 align:middle line:0
我们添加回中心像素的顶部

00:27:58.779 --> 00:28:01.782 align:middle line:0
我不想太过关注过滤器本身
而是集中在如何调用它

