WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.139 --> 00:14:00.307 align:middle line:-1
大家下午好

00:14:00.774 --> 00:14:01.775 align:middle line:-1
很高兴来到这里

00:14:01.842 --> 00:14:04.344 align:middle line:-2
我叫Emmanuel
Core Image团队的工程师

00:14:05.412 --> 00:14:07.447 align:middle line:-1
本场会议的下半场时间

00:14:07.648 --> 00:14:10.217 align:middle line:-2
我们将把注意力
从Core Image引擎移开

00:14:10.284 --> 00:14:14.154 align:middle line:-2
转而探索用Core Image
作原型设计的新方法

00:14:14.788 --> 00:14:16.657 align:middle line:-1
我们还会看看

00:14:16.723 --> 00:14:19.860 align:middle line:-2
如何在机器学习app中
利用Core Image

00:14:19.927 --> 00:14:20.894 align:middle line:-1
我们开始吧

00:14:22.329 --> 00:14:24.064 align:middle line:-1
既然我们谈到原型设计

00:14:24.131 --> 00:14:27.868 align:middle line:-2
我们先看看图像处理过滤器的
生命周期

00:14:30.137 --> 00:14:33.440 align:middle line:-1
比如我们想做

00:14:33.507 --> 00:14:35.742 align:middle line:-1
前景背景分割

00:14:35.809 --> 00:14:39.980 align:middle line:-1
这意味着我们想得到一个掩码

00:14:40.047 --> 00:14:43.717 align:middle line:-2
前景为1.0
背景为0.0

00:14:43.784 --> 00:14:45.485 align:middle line:-1
二者之间有连续值

00:14:46.753 --> 00:14:48.989 align:middle line:-1
实现此类过滤器的难度

00:14:49.056 --> 00:14:51.592 align:middle line:-1
很大程度上取决于数据的特性

00:14:51.658 --> 00:14:56.129 align:middle line:-2
例如 如果你有一个
额外的深度缓冲区

00:14:56.296 --> 00:14:58.298 align:middle line:-1
与你的RGB图像一起

00:14:58.565 --> 00:15:00.267 align:middle line:-1
事情可以变得更容易

