WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.072 --> 00:24:01.108 align:middle line:-1
我们仍然可以提取数据的捕获时间

00:24:01.175 --> 00:24:04.811 align:middle line:-1
以及纵向深度和褪光信息

00:24:05.512 --> 00:24:08.982 align:middle line:-2
最后一个重点
你可以用200多个内置过滤器

00:24:09.850 --> 00:24:11.952 align:middle line:-1
我们做的第一个更改是 默认情况下

00:24:12.019 --> 00:24:14.988 align:middle line:-2
所有生成都用
完整的32位浮点数完成

00:24:16.890 --> 00:24:20.260 align:middle line:-2
第二个更改
一切都用sRGB颜色空间完成

00:24:21.662 --> 00:24:25.032 align:middle line:-2
第三 所有的边界条件都将
通过钳制和裁剪来处理

00:24:25.098 --> 00:24:28.869 align:middle line:-1
这意味着 如果你正在应用卷积运算

00:24:29.536 --> 00:24:31.672 align:middle line:-1
例如你的图片无限重复

00:24:32.172 --> 00:24:33.340 align:middle line:-1
将应用过滤器

00:24:33.540 --> 00:24:36.376 align:middle line:-1
并将生成的图像裁剪回输入尺寸

00:24:36.977 --> 00:24:40.480 align:middle line:-1
这也是一个可以一次覆盖的设置

00:24:42.282 --> 00:24:44.685 align:middle line:-1
最后 无限的图像变得有限

00:24:44.852 --> 00:24:47.487 align:middle line:-1
这样我们可以获取其像素缓冲区表示

00:24:49.590 --> 00:24:53.026 align:middle line:-2
这就是为何PyCoreImage
在幕后细节里

00:24:54.061 --> 00:24:54.895 align:middle line:-1
所以…

00:24:55.495 --> 00:24:58.932 align:middle line:-2
我们将作精彩演示
在实践中查看所有这些

00:24:58.999 --> 00:25:02.703 align:middle line:-2
在此之前 我想快速过一下
PyCoreImage的备忘单

