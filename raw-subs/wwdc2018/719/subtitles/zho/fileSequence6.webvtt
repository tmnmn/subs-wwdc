WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:03.630 --> 00:06:06.900 align:middle line:-1
考虑到这一点 我想谈谈其它几个

00:06:06.967 --> 00:06:09.469 align:middle line:-1
我们添加到内核语言中的功能

00:06:09.536 --> 00:06:11.738 align:middle line:-1
首先 我们增加了半浮动支持

00:06:12.139 --> 00:06:14.541 align:middle line:-1
很多情况下

00:06:14.741 --> 00:06:17.778 align:middle line:-1
当你的CI内核可完全

00:06:18.278 --> 00:06:20.547 align:middle line:-1
满足于半浮动带来的精度

00:06:20.781 --> 00:06:22.816 align:middle line:-1
如果你使用RGB颜色值

00:06:22.883 --> 00:06:24.852 align:middle line:-1
半浮点精度绰绰有余

00:06:25.419 --> 00:06:27.421 align:middle line:-1
在内核中使用半浮点数的优点

00:06:27.487 --> 00:06:29.523 align:middle line:-1
是它使操作运行得更快

00:06:29.590 --> 00:06:31.258 align:middle line:-1
尤其是在A11设备上

00:06:31.491 --> 00:06:32.626 align:middle line:-1
如iPhone 10

00:06:33.360 --> 00:06:35.996 align:middle line:-1
在内核中用半浮点数的另一个优点

00:06:36.063 --> 00:06:37.764 align:middle line:-1
它允许更小的寄存器

00:06:37.831 --> 00:06:40.200 align:middle line:-1
增加了GPU的利用率

00:06:40.267 --> 00:06:41.635 align:middle line:-1
这也有助于提高性能

00:06:42.236 --> 00:06:45.038 align:middle line:-2
今年我们在内核语言中
加了另一个精彩的功能

00:06:45.105 --> 00:06:47.040 align:middle line:-1
即对组读取的支持

00:06:47.274 --> 00:06:49.443 align:middle line:-2
只用一条指令
你的着色器能够执行

00:06:49.510 --> 00:06:52.045 align:middle line:-1
来自输入图像的四个

00:06:52.412 --> 00:06:54.114 align:middle line:-1
单通道读取

00:06:54.181 --> 00:06:55.382 align:middle line:-1
这真的有很大帮助

00:06:56.517 --> 00:06:58.252 align:middle line:-1
作为补充

00:06:58.318 --> 00:07:00.721 align:middle line:-1
我们还可以写像素组

