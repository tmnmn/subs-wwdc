WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.127 --> 00:16:01.061 align:middle line:-1
就像旋转矩阵一样

00:16:01.128 --> 00:16:03.096 align:middle line:-1
你可以使用乘法来结合旋转

00:16:03.163 --> 00:16:06.433 align:middle line:-2
并且也像旋转矩阵一样
乘法是非可交换的

00:16:06.867 --> 00:16:08.936 align:middle line:-2
所以这意味着
如果你改变操作数的顺序

00:16:09.002 --> 00:16:10.871 align:middle line:-1
你将改变旋转的顺序

00:16:13.440 --> 00:16:16.577 align:middle line:-2
这里我们要做的事情是
向上旋转三个pi的弧度

00:16:17.110 --> 00:16:18.979 align:middle line:-1
然后向右旋转三个pi的弧度

00:16:19.046 --> 00:16:21.048 align:middle line:-1
我们将它们组合成一个单一的旋转

00:16:26.854 --> 00:16:27.955 align:middle line:-1
你可用四元数和simd

00:16:28.021 --> 00:16:30.891 align:middle line:-1
来做的一些更有趣的事情是插值

00:16:30.958 --> 00:16:33.260 align:middle line:-1
我们支持两种类型的插值

00:16:34.862 --> 00:16:36.063 align:middle line:-1
第一种是Slerp

00:16:37.865 --> 00:16:39.833 align:middle line:-1
它代表球面线性插值

00:16:42.035 --> 00:16:43.670 align:middle line:-1
它实际上有两种变体

00:16:47.207 --> 00:16:48.475 align:middle line:-2
我们有一个
simd_slerp函数

00:16:48.542 --> 00:16:50.644 align:middle line:-1
它能找到这两个点之间的最短弧

00:16:50.711 --> 00:16:52.379 align:middle line:-2
这个例子中
是蓝色和绿色之间的弧

00:16:53.747 --> 00:16:56.216 align:middle line:-2
我们还有simd_slerp_longest函数
它会找到最长的圆弧

00:16:56.283 --> 00:16:58.218 align:middle line:-1
所以你会发现它位于单位球体后面

