WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:56.830 --> 00:10:00.100 align:middle line:-1
我们要对图像和样本执行FFT运算

00:10:01.235 --> 00:10:03.570 align:middle line:-1
然后我们将从该样本创建一个滤罩

00:10:03.837 --> 00:10:05.506 align:middle line:-1
并将其应用于图像

00:10:07.341 --> 00:10:08.275 align:middle line:-1
一旦完成这个步骤

00:10:08.342 --> 00:10:10.377 align:middle line:-1
我们就可以重建原始图像

00:10:10.711 --> 00:10:12.279 align:middle line:-1
我们来看一些代码

00:10:14.982 --> 00:10:16.049 align:middle line:-1
我们要做一个FFT

00:10:18.452 --> 00:10:20.087 align:middle line:-1
这意味着它必须是二次幂

00:10:20.220 --> 00:10:21.755 align:middle line:-1
这就是你看到log2调用的原因

00:10:22.890 --> 00:10:25.392 align:middle line:-1
1024x1024是图片的大小

00:10:28.562 --> 00:10:31.164 align:middle line:-2
然后我们将它传递给
fft2d_zrop函数

00:10:31.231 --> 00:10:32.499 align:middle line:-1
这里的参数可不少

00:10:32.900 --> 00:10:35.702 align:middle line:-2
这里的重点是
op代表空间不足

00:10:35.769 --> 00:10:38.839 align:middle line:-2
所以我们将不得不创建
一些临时空间来存储结果

00:10:41.542 --> 00:10:43.744 align:middle line:-1
我们将把它存储在这个复数结构中

00:10:43.944 --> 00:10:45.212 align:middle line:-1
这实际上是说

00:10:45.279 --> 00:10:47.548 align:middle line:-1
我们将把复数存储在两个数组中

00:10:48.182 --> 00:10:49.716 align:middle line:-1
实数部分存储在一个数组中

00:10:49.883 --> 00:10:51.385 align:middle line:-1
虚数部分存在第二个数组

00:10:52.486 --> 00:10:54.388 align:middle line:-1
我们还需要指定一个方向

00:10:54.855 --> 00:10:56.623 align:middle line:-2
这例子中
我们要做一个正向FFT

00:10:59.960 --> 00:11:01.528 align:middle line:-1
（频率移除）

