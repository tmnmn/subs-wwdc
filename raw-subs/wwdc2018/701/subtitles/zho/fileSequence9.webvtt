WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.573 --> 00:09:01.308 align:middle line:-1
让我向你展示第一次尝试

00:09:04.811 --> 00:09:07.314 align:middle line:-1
我们所做的是我们识别了

00:09:07.714 --> 00:09:09.883 align:middle line:-1
某个阈值的频率分量

00:09:10.384 --> 00:09:13.921 align:middle line:-1
任何高于该阈值的频率分量

00:09:15.088 --> 00:09:15.989 align:middle line:-1
我们都将会删除

00:09:17.024 --> 00:09:18.625 align:middle line:-1
你看 如果我们设置的阈值太低

00:09:19.960 --> 00:09:22.129 align:middle line:-1
我们不仅移除了痕迹

00:09:22.196 --> 00:09:23.997 align:middle line:-1
也移除了图片的一部分

00:09:27.968 --> 00:09:29.236 align:middle line:-1
如果我们设置得太高

00:09:32.239 --> 00:09:34.107 align:middle line:-1
你可以看到这没有任何效果

00:09:38.946 --> 00:09:40.113 align:middle line:-1
中等程度看起来不错

00:09:40.747 --> 00:09:45.719 align:middle line:-2
中等程度似乎能够正确识别
图像中的痕迹

00:09:45.886 --> 00:09:47.788 align:middle line:-1
且不至于损坏太多的图像

00:09:48.689 --> 00:09:49.857 align:middle line:-1
告诉你我们如何做到

00:09:55.262 --> 00:09:56.763 align:middle line:-2
从更高层面来说
我们要做的是

00:09:56.830 --> 00:10:00.100 align:middle line:-1
我们要对图像和样本执行FFT运算

