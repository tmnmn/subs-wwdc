WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:59.156 --> 00:54:00.646 A:middle
那么最后 5 秒

00:54:00.646 --> 00:54:03.466 A:middle
记录模式

00:54:03.466 --> 00:54:04.066 A:middle
是最有效的

00:54:04.346 --> 00:54:05.816 A:middle
你可以在跟踪文档的

00:54:05.816 --> 00:54:07.256 A:middle
记录选项中进行切换

00:54:07.256 --> 00:54:08.886 A:middle
之后你将看到

00:54:08.886 --> 00:54:09.776 A:middle
你可以在即时 延迟

00:54:09.776 --> 00:54:11.256 A:middle
和最后 n 秒模式之间

00:54:11.256 --> 00:54:12.676 A:middle
进行选择

00:54:13.246 --> 00:54:14.486 A:middle
更加有效的原因是

00:54:14.486 --> 00:54:16.476 A:middle
它允许记录技术

00:54:16.476 --> 00:54:18.016 A:middle
使用缓冲

00:54:18.296 --> 00:54:19.666 A:middle
来提高性能

00:54:19.716 --> 00:54:20.906 A:middle
这样它就不会一直尝试

00:54:20.906 --> 00:54:22.976 A:middle
实时向 Instruments 提供数据

00:54:23.376 --> 00:54:24.586 A:middle
这将产生深远的影响

00:54:24.586 --> 00:54:26.876 A:middle
它会对 signpost 数据

00:54:26.876 --> 00:54:28.286 A:middle
产生巨大的影响

00:54:28.286 --> 00:54:29.856 A:middle
在最后 5 秒模式下

00:54:30.096 --> 00:54:31.756 A:middle
速度可以提升 10 倍

00:54:32.246 --> 00:54:33.326 A:middle
当然 为此的权衡是

00:54:33.466 --> 00:54:34.796 A:middle
你只能看到

00:54:34.796 --> 00:54:37.136 A:middle
最后 5 秒的数据

00:54:37.296 --> 00:54:39.056 A:middle
但是对于产生大量

00:54:39.056 --> 00:54:40.736 A:middle
数据的 Instrument 来说

00:54:40.736 --> 00:54:41.276 A:middle
这通常是件好事

00:54:41.446 --> 00:54:43.016 A:middle
这使得它成为

00:54:43.016 --> 00:54:45.346 A:middle
系统跟踪和 Metal 系统跟踪

00:54:45.346 --> 00:54:46.916 A:middle
以及游戏性能模板的通用模式

00:54:47.176 --> 00:54:50.066 A:middle
如果你的目标是这类 App 

00:54:50.066 --> 00:54:51.546 A:middle
我也会建议

00:54:51.546 --> 00:54:53.136 A:middle
你的 Instrument 不要支持即时模式

00:54:53.476 --> 00:54:54.506 A:middle
这样你的用户体验

00:54:54.506 --> 00:54:56.096 A:middle
就不会很糟糕

00:54:56.096 --> 00:54:58.086 A:middle
Instruments 在获取数据时

00:54:58.086 --> 00:54:59.236 A:middle
也不会出现延后

00:54:59.236 --> 00:55:00.746 A:middle
你在区间中也不会遇到类似的问题

