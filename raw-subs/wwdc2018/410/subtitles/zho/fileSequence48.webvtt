WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.846 --> 00:48:00.096 A:middle
signpost “Begin” 和 “End”

00:48:00.136 --> 00:48:01.526 A:middle
必须有相同的标识符

00:48:02.706 --> 00:48:04.336 A:middle
我们在工作内存中

00:48:04.566 --> 00:48:07.296 A:middle
寻找一个具有我们捕获到的

00:48:07.296 --> 00:48:09.726 A:middle
signpost identifier 的事实

00:48:09.726 --> 00:48:11.346 A:middle
并收回这个事实

00:48:14.116 --> 00:48:16.286 A:middle
然后我们可以编写 RECORDER:: 规则

00:48:16.286 --> 00:48:18.976 A:middle
来生成所有的叙事数据

00:48:24.216 --> 00:48:27.106 A:middle
这个 RECORDER:: 规则

00:48:27.106 --> 00:48:28.546 A:middle
查看所有 started-download 事实

00:48:28.726 --> 00:48:29.986 A:middle
并捕获它们

00:48:30.616 --> 00:48:32.136 A:middle
我们捕获 time caller-address

00:48:32.136 --> 00:48:33.696 A:middle
以及 image-name

00:48:34.796 --> 00:48:36.936 A:middle
如果这里是 true

00:48:37.606 --> 00:48:39.176 A:middle
有另一个具有相同 caller-address 的

00:48:39.216 --> 00:48:40.996 A:middle
started-download 事实

00:48:40.996 --> 00:48:42.786 A:middle
你就可以注意到

00:48:42.786 --> 00:48:44.646 A:middle
这里引用的变量是相同的

00:48:45.376 --> 00:48:48.616 A:middle
并且在第一个事实之前发生

00:48:49.606 --> 00:48:51.136 A:middle
我们注意到

00:48:51.136 --> 00:48:52.326 A:middle
存在一些反向模式

00:48:52.326 --> 00:48:53.616 A:middle
而且在请求中存在重叠

00:48:54.716 --> 00:48:56.086 A:middle
我们可以检查

00:48:56.086 --> 00:48:57.346 A:middle
是否可以访问

00:48:57.346 --> 00:49:01.386 A:middle
downloader-narrative Schema

