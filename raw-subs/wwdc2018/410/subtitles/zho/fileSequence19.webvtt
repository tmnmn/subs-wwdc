WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:56.896 --> 00:19:00.066 A:middle
还有 “Aggregation（聚合）”

00:19:00.176 --> 00:19:01.976 A:middle
当你想要

00:19:01.976 --> 00:19:03.186 A:middle
去除时间分量

00:19:03.186 --> 00:19:04.586 A:middle
概览你的数据

00:19:04.586 --> 00:19:06.726 A:middle
而且想要在表格中应用一些

00:19:06.726 --> 00:19:07.956 A:middle
统计数据的时候

00:19:07.956 --> 00:19:08.556 A:middle
聚合是很适合的选择

00:19:09.376 --> 00:19:10.406 A:middle
当我们定义一个聚合

00:19:10.406 --> 00:19:12.316 A:middle
我们需要注意

00:19:12.316 --> 00:19:14.596 A:middle
列现在是函数

00:19:14.896 --> 00:19:15.956 A:middle
你可以使用

00:19:16.026 --> 00:19:19.186 A:middle
sum() average() count()

00:19:19.186 --> 00:19:20.436 A:middle
以及其他的一些统计函数

00:19:20.726 --> 00:19:24.396 A:middle
来帮助你创建

00:19:24.396 --> 00:19:26.256 A:middle
你想要创建的聚合视图

00:19:28.146 --> 00:19:30.776 A:middle
聚合的好处在于 你也可以定义

00:19:30.776 --> 00:19:32.096 A:middle
一个层级结构

00:19:32.266 --> 00:19:33.846 A:middle
这里我们在

00:19:33.926 --> 00:19:35.296 A:middle
虚拟内存操作结构中

00:19:35.296 --> 00:19:37.316 A:middle
定义了一个进程线程

00:19:37.316 --> 00:19:38.976 A:middle
我们可以看到它被分解为

00:19:38.976 --> 00:19:40.626 A:middle
进程 然后是

00:19:40.626 --> 00:19:41.766 A:middle
进程中的每个线程

00:19:42.086 --> 00:19:43.286 A:middle
然后是这个线程中的

00:19:43.286 --> 00:19:45.156 A:middle
这个进程中的

00:19:45.246 --> 00:19:46.036 A:middle
每个类型的操作

00:19:46.206 --> 00:19:47.556 A:middle
所以聚合是一种很好

00:19:47.626 --> 00:19:49.156 A:middle
很强大的方式

00:19:49.156 --> 00:19:50.386 A:middle
来总结很多数据

00:19:51.476 --> 00:19:53.396 A:middle
另一种类型的聚合

00:19:53.396 --> 00:19:54.476 A:middle
称为 “Call Tree（调用树）”

00:19:55.496 --> 00:19:56.696 A:middle
当你有一个列是回溯

00:19:56.696 --> 00:19:57.876 A:middle
而且另一个列是

00:19:57.876 --> 00:19:59.466 A:middle
权重的时候

00:19:59.466 --> 00:20:00.246 A:middle
调用树就会很有用处

