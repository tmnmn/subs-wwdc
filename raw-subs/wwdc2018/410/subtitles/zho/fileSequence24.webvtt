WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.106 --> 00:24:01.336 A:middle
然而 能够定义自己的 Schema

00:24:01.336 --> 00:24:02.856 A:middle
是非常重要的

00:24:02.856 --> 00:24:04.826 A:middle
我们今年有了一个新的 os_signpost API

00:24:04.826 --> 00:24:06.696 A:middle
它是把数据

00:24:06.696 --> 00:24:07.736 A:middle
导入 Instruments 的绝佳方式

00:24:08.596 --> 00:24:10.756 A:middle
我们为它创造了一条捷径

00:24:12.056 --> 00:24:14.246 A:middle
在你的包中 你可以定义所谓的

00:24:14.246 --> 00:24:16.346 A:middle
os-signpost-interval-schema

00:24:16.346 --> 00:24:17.616 A:middle
它既可以定义 Schema

00:24:17.616 --> 00:24:20.046 A:middle
也可以为我们提供足够的指令

00:24:20.046 --> 00:24:22.006 A:middle
以便能够代替你

00:24:22.106 --> 00:24:23.616 A:middle
生成一个建模器

00:24:24.226 --> 00:24:25.686 A:middle
在那里你可以

00:24:25.686 --> 00:24:26.776 A:middle
捕获在 os_signpost 调用的

00:24:26.776 --> 00:24:28.856 A:middle
元数据中

00:24:28.856 --> 00:24:31.926 A:middle
记录的数据

00:24:31.926 --> 00:24:33.986 A:middle
你可以使用捕获的元数据

00:24:33.986 --> 00:24:35.776 A:middle
和表达式来定义

00:24:35.776 --> 00:24:38.796 A:middle
如何填充你的 Schema 的列

00:24:39.816 --> 00:24:42.196 A:middle
我们来看一个非常简单的例子

00:24:43.136 --> 00:24:44.556 A:middle
假设我们要做 JSON 解码

00:24:44.556 --> 00:24:46.776 A:middle
我们有一个 os_signpost

00:24:47.026 --> 00:24:50.726 A:middle
标记了解码 Activity 的开始

00:24:50.726 --> 00:24:52.186 A:middle
和解码 Activity 的结束

00:24:52.746 --> 00:24:54.276 A:middle
在开始时

00:24:54.276 --> 00:24:55.936 A:middle
我们还需捕获一些元数据

00:24:55.936 --> 00:24:57.676 A:middle
以指示我们将要解析的

00:24:57.676 --> 00:24:59.526 A:middle
JSON 对象的大小

