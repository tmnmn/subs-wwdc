WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.456 --> 00:03:00.946 A:middle
多个性能工具就可以同时运行

00:03:01.616 --> 00:03:02.966 A:middle
那时和现在的 Instruments 之间的

00:03:02.966 --> 00:03:04.646 A:middle
主要区别是

00:03:04.716 --> 00:03:05.516 A:middle
当时的 Instruments 基础结构

00:03:05.516 --> 00:03:06.816 A:middle
并无法帮助我们

00:03:06.816 --> 00:03:08.976 A:middle
快速编写 Instrument

00:03:09.746 --> 00:03:11.606 A:middle
在当时这样还好

00:03:11.606 --> 00:03:12.866 A:middle
因为我们已经

00:03:12.916 --> 00:03:14.526 A:middle
继承了一些我们已有的

00:03:14.526 --> 00:03:16.336 A:middle
素材和性能工具

00:03:16.796 --> 00:03:17.956 A:middle
它们都有自己的

00:03:17.956 --> 00:03:18.726 A:middle
记录技术和分析逻辑

00:03:18.726 --> 00:03:20.436 A:middle
我们所要做的就是建立一个

00:03:20.436 --> 00:03:22.196 A:middle
自定义的存储机制

00:03:22.196 --> 00:03:23.266 A:middle
来获取跟踪中的数据

00:03:23.266 --> 00:03:25.506 A:middle
以及一个自定义的 UI 来帮助它

00:03:25.506 --> 00:03:27.786 A:middle
与 App 的其他部分集成

00:03:27.886 --> 00:03:29.816 A:middle
随着时间的推移

00:03:29.816 --> 00:03:31.126 A:middle
Instruments 的维护成本

00:03:31.126 --> 00:03:32.736 A:middle
和模型的维护成本都上升了

00:03:33.576 --> 00:03:34.626 A:middle
原因就是

00:03:34.626 --> 00:03:36.526 A:middle
每次我们想要

00:03:36.526 --> 00:03:37.876 A:middle
添加新特性时

00:03:37.876 --> 00:03:39.546 A:middle
我们必须修改 7 个自定义 UI

00:03:39.546 --> 00:03:41.846 A:middle
和 7 个自定义存储机制

00:03:42.196 --> 00:03:43.746 A:middle
但这不是我们想让你们

00:03:43.746 --> 00:03:44.676 A:middle
学习的处理方式

00:03:44.676 --> 00:03:45.626 A:middle
我们不想让你们

00:03:45.626 --> 00:03:46.756 A:middle
承担这种维护成本

00:03:47.216 --> 00:03:48.516 A:middle
所以在我们讨论

00:03:48.516 --> 00:03:49.646 A:middle
定制 Instrument 的特性之前

00:03:49.646 --> 00:03:51.236 A:middle
我们首先需要解决这个问题

00:03:51.236 --> 00:03:52.776 A:middle
我认为我们做到了

00:03:53.586 --> 00:03:54.556 A:middle
在新版本的 Instruments 中

00:03:54.556 --> 00:03:56.186 A:middle
我们没有自定义 UI

00:03:56.186 --> 00:03:57.516 A:middle
和自定义存储机制

00:03:57.516 --> 00:03:58.906 A:middle
而是有两个

00:03:58.906 --> 00:04:00.456 A:middle
标准化的组件

