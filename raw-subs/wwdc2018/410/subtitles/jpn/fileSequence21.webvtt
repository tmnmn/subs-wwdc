WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.791 --> 00:21:01.094 align:start position:32% line:-2
プロセスがどう働くか
説明します

00:21:02.663 --> 00:21:05.732 align:start position:32% line:-1
レコードを押す前に―

00:21:05.833 --> 00:21:09.570 align:start position:25% line:-2
Analysis Coreが
テーブルを取ります

00:21:09.670 --> 00:21:13.173 align:start position:29% line:-2
マッピングして
ストレージを割り当てます

00:21:13.640 --> 00:21:17.010 align:start position:21% line:-2
テーブルがまったく同じスキーマで
属性を持てば―

00:21:17.110 --> 00:21:21.849 align:start position:27% line:-2
定義上 同じデータなので
同じストアでマップされます

00:21:23.016 --> 00:21:27.521 align:start position:25% line:-2
次に 各ストアに
データ用プロバイダを探します

00:21:27.654 --> 00:21:31.058 align:start position:21% line:-2
ターゲットのデータストリームから
直接レコードすることも可能ですし

00:21:31.258 --> 00:21:34.361 align:start position:32% line:-2
モデラを使って
データを統合できます

00:21:35.195 --> 00:21:37.464 align:start position:30% line:-2
モデラは独自の入力を
要求することができます

00:21:37.564 --> 00:21:40.167 align:start position:32% line:-2
これらは他のモデラの
出力にもなり

00:21:40.267 --> 00:21:42.536 align:start position:21% line:-2
直接レコードする方法が分からない
残りのデータを統合し

00:21:42.636 --> 00:21:46.740 align:start position:32% line:-2
データストリームより
直接レコード可能です

00:21:47.341 --> 00:21:52.846 align:start position:11% line:-2
Analysis Coreの中にストアされた
すべてのデータソースを得られます

00:21:53.180 --> 00:21:57.384 align:start position:9% line:-2
このbinding solutionですが
binding solutionを可視化します

00:21:57.484 --> 00:22:00.754 align:start position:16% line:-2
Instrumentsがbinding
solutionを見られるようにします

