WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.646 --> 00:17:00.216 A:middle
你可以一次性完成三次调用

00:17:00.706 --> 00:17:01.886 A:middle
现在我们添加上面例子中的

00:17:01.886 --> 00:17:03.546 A:middle
相同的四个项目

00:17:03.846 --> 00:17:04.646 A:middle
但是我们会在一次网络

00:17:04.646 --> 00:17:05.146 A:middle
请求中完成

00:17:05.715 --> 00:17:11.476 A:middle
接下来我们看看事件

00:17:11.636 --> 00:17:12.945 A:middle
MusicKit 会

00:17:13.256 --> 00:17:14.806 A:middle
触发事件来驱动 UI

00:17:15.185 --> 00:17:16.846 A:middle
我们之所以这样做是因为

00:17:16.955 --> 00:17:18.445 A:middle
MusicKit 为了播放完整的曲目

00:17:18.636 --> 00:17:20.826 A:middle
需要控制音频元素

00:17:21.376 --> 00:17:22.606 A:middle
这里我们会用

00:17:22.766 --> 00:17:24.656 A:middle
addEventListener 

00:17:24.656 --> 00:17:26.016 A:middle
如果你之前写过 DOM 脚本

00:17:26.016 --> 00:17:27.606 A:middle
这对你来说会非常熟悉

00:17:28.856 --> 00:17:30.096 A:middle
作为例子 我们会

00:17:30.096 --> 00:17:31.256 A:middle
详细看看几个事件

00:17:34.756 --> 00:17:36.756 A:middle
mediaItemWillChange 和

00:17:36.756 --> 00:17:38.536 A:middle
mediaItemDidChange 事件会在

00:17:38.536 --> 00:17:39.766 A:middle
队列中的正在播放项目变化时触发

00:17:39.766 --> 00:17:41.386 A:middle
以及在正在播放的

00:17:41.386 --> 00:17:43.326 A:middle
第一首切换到第二首的时候

00:17:44.266 --> 00:17:45.646 A:middle
你可以用它来触发

00:17:45.646 --> 00:17:47.726 A:middle
更新 UI

00:17:47.726 --> 00:17:48.696 A:middle
显示正在播放的歌曲

00:17:49.186 --> 00:17:53.106 A:middle
当你真正开始播放时

00:17:53.106 --> 00:17:54.616 A:middle
playbackStateChange

00:17:54.686 --> 00:17:56.096 A:middle
事件会被激发

00:17:56.266 --> 00:17:57.326 A:middle
同样 这里我们有 playbackStateWillChange 

00:17:57.326 --> 00:17:58.686 A:middle
和 playbackStateDidChange

00:17:59.616 --> 00:18:01.586 A:middle
比如说 你能知道一首歌曲

