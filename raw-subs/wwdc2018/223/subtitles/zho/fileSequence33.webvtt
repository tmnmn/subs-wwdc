WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.946 --> 00:33:00.586 A:middle
豆包” 他问道

00:33:00.586 --> 00:33:02.306 A:middle
我不知道

00:33:02.306 --> 00:33:02.906 A:middle
他在说什么

00:33:03.466 --> 00:33:05.276 A:middle
代码很简洁

00:33:05.276 --> 00:33:05.666 A:middle
而且运行正常

00:33:07.016 --> 00:33:08.336 A:middle
“语义 小子

00:33:09.046 --> 00:33:10.216 A:middle
我怎么能从其他代码中使用它们

00:33:10.216 --> 00:33:11.416 A:middle
如果我不知道

00:33:11.416 --> 00:33:12.156 A:middle
它们是什么意思呢”

00:33:12.786 --> 00:33:17.156 A:middle
于是我意识到

00:33:17.156 --> 00:33:18.926 A:middle
每一次我们使用新的算法

00:33:19.446 --> 00:33:20.326 A:middle
我们都依靠他的文档

00:33:20.326 --> 00:33:21.936 A:middle
得出关于

00:33:21.936 --> 00:33:23.416 A:middle
我们自己代码的

00:33:23.726 --> 00:33:25.296 A:middle
意义和效率的结论

00:33:26.346 --> 00:33:27.846 A:middle
因为大多数算法都是

00:33:27.846 --> 00:33:29.456 A:middle
由其他算法构建的

00:33:29.896 --> 00:33:32.816 A:middle
所以它们依赖于相同的东西

00:33:33.026 --> 00:33:34.826 A:middle
最近 我正在面试一位

00:33:34.826 --> 00:33:36.486 A:middle
未来的实习生并且问他

00:33:36.486 --> 00:33:38.236 A:middle
关于文档的作用

00:33:38.636 --> 00:33:40.226 A:middle
他以一个我不会忘记的

00:33:40.226 --> 00:33:41.156 A:middle
短语开始

00:33:41.966 --> 00:33:44.206 A:middle
“哦 它实在太重要了” 他说

00:33:45.646 --> 00:33:46.816 A:middle
“我们正在构建这些抽象的塔”

00:33:46.816 --> 00:33:48.996 A:middle
我在向你们复述他的话

00:33:48.996 --> 00:33:50.946 A:middle
“我们之所以能够成功构建

00:33:50.946 --> 00:33:52.286 A:middle
而无需经常检查

00:33:52.286 --> 00:33:54.086 A:middle
下面层级的内容

00:33:54.706 --> 00:33:56.036 A:middle
是因为我们构建的部分

00:33:56.036 --> 00:33:57.176 A:middle
是有文档记录的”

00:33:57.666 --> 00:34:01.966 A:middle
现在 作为一名 App 开发者

