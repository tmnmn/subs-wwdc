WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.046 --> 00:11:00.676 A:middle
然后 shapes.removeAll

00:11:00.676 --> 00:11:02.186 A:middle
(where: { $0.isSelected})

00:11:03.146 --> 00:11:03.326 A:middle
嗯

00:11:04.026 --> 00:11:05.236 A:middle
试试合不合身”

00:11:06.216 --> 00:11:07.756 A:middle
然后 Crusty 离开了

00:11:07.756 --> 00:11:08.856 A:middle
去洗他的咖啡机的拉花缸

00:11:08.856 --> 00:11:11.066 A:middle
留下我去琢磨

00:11:11.066 --> 00:11:12.816 A:middle
我的代码里到底

00:11:13.666 --> 00:11:13.766 A:middle
发生了什么

00:11:14.736 --> 00:11:17.756 A:middle
首先 我检查过并且发现

00:11:17.756 --> 00:11:19.286 A:middle
性能问题确实解决了

00:11:19.856 --> 00:11:20.226 A:middle
太棒了

00:11:21.536 --> 00:11:22.886 A:middle
我不想再听一遍

00:11:22.886 --> 00:11:24.226 A:middle
Crusty 唠叨说看文档

00:11:24.226 --> 00:11:26.626 A:middle
所以我弹出 removeAll(where: ) 的

00:11:26.626 --> 00:11:28.126 A:middle
“Quick Help”

00:11:28.676 --> 00:11:32.856 A:middle
然后我发现它的复杂度

00:11:32.856 --> 00:11:34.266 A:middle
也与集合的长度

00:11:34.266 --> 00:11:36.176 A:middle
成正地变化

00:11:36.176 --> 00:11:36.806 A:middle
就像 removeAt 一样

00:11:37.796 --> 00:11:39.656 A:middle
但是由于我不必

00:11:39.656 --> 00:11:41.576 A:middle
把它放入循环中

00:11:41.576 --> 00:11:42.836 A:middle
那么它就变成了我整个

00:11:42.836 --> 00:11:43.376 A:middle
运算的复杂度

00:11:44.576 --> 00:11:46.776 A:middle
现在 我想让你们

00:11:46.776 --> 00:11:48.026 A:middle
直观地理解

00:11:48.106 --> 00:11:50.106 A:middle
这能带来什么不同

00:11:50.566 --> 00:11:52.476 A:middle
O(n) 表示算法运行的时间

00:11:52.476 --> 00:11:54.216 A:middle
与问题的大小

00:11:54.566 --> 00:11:56.166 A:middle
成线性关系

00:11:56.696 --> 00:11:57.936 A:middle
这个图是一条直线

00:11:59.396 --> 00:12:00.826 A:middle
然后 这个橙色线是

