WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.496 --> 00:04:00.286 A:middle
除非你的测试碰巧

00:04:00.286 --> 00:04:02.716 A:middle
试运行了它

00:04:02.946 --> 00:04:04.416 A:middle
但是如果我们足够幸运注意到了它

00:04:04.416 --> 00:04:06.496 A:middle
我们便可以继续

00:04:06.496 --> 00:04:08.826 A:middle
用一个 else 代码块

00:04:08.826 --> 00:04:10.026 A:middle
来保护自增语句 再次修复

00:04:10.026 --> 00:04:10.586 A:middle
这个实现

00:04:11.226 --> 00:04:13.596 A:middle
那么 我们完成了吗

00:04:13.596 --> 00:04:16.476 A:middle
我们有把握确定 这次是正确的吗

00:04:17.706 --> 00:04:19.906 A:middle
我认为我可以自证

00:04:19.995 --> 00:04:20.755 A:middle
它能够运行

00:04:21.875 --> 00:04:24.106 A:middle
不管怎样 经过这次的严峻的考验

00:04:24.106 --> 00:04:25.356 A:middle
我们收获了什么

00:04:25.746 --> 00:04:27.336 A:middle
当然 我们将这个

00:04:27.336 --> 00:04:28.696 A:middle
九行的代码套路 牢记在脑中

00:04:28.696 --> 00:04:30.506 A:middle
这样我们就可以在想要

00:04:30.506 --> 00:04:32.456 A:middle
删除什么的时候 把它调出来

00:04:33.026 --> 00:04:35.666 A:middle
现在 我确定你们中的许多人

00:04:35.666 --> 00:04:36.676 A:middle
正控制着自己

00:04:36.676 --> 00:04:38.566 A:middle
不向我大声喊叫

00:04:38.656 --> 00:04:40.506 A:middle
因为有一个

00:04:40.506 --> 00:04:41.906 A:middle
更加优雅的方式可以用

00:04:41.906 --> 00:04:43.206 A:middle
我仍然记得 自己发现了

00:04:43.206 --> 00:04:44.686 A:middle
这个技巧的那一天

00:04:45.106 --> 00:04:46.666 A:middle
因为一旦你发现了它 你就不用

00:04:46.666 --> 00:04:48.456 A:middle
再用那九行套路代码了

00:04:49.406 --> 00:04:51.496 A:middle
迭代限制以及

00:04:51.556 --> 00:04:52.786 A:middle
下一个要检查的项的索引

00:04:52.786 --> 00:04:54.956 A:middle
像传送带一样不断滚动

00:04:54.956 --> 00:04:56.866 A:middle
因为 remove(at: i)

00:04:57.746 --> 00:04:59.696 A:middle
改变了数组中 i 之后的部分

