WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.186 --> 00:14:00.196 A:middle
表明了

00:14:00.196 --> 00:14:02.116 A:middle
它保留了不移动的

00:14:02.116 --> 00:14:03.646 A:middle
元素的顺序

00:14:04.486 --> 00:14:06.396 A:middle
但是它也可以打乱

00:14:06.436 --> 00:14:09.026 A:middle
移动到最后的元素

00:14:09.206 --> 00:14:10.426 A:middle
有些时候

00:14:10.426 --> 00:14:11.786 A:middle
这不是很重要

00:14:11.786 --> 00:14:13.166 A:middle
因为第二个算法 removeSubrange()

00:14:13.166 --> 00:14:14.146 A:middle
无论如何也会

00:14:14.146 --> 00:14:14.456 A:middle
删除子区间

00:14:16.476 --> 00:14:17.956 A:middle
我们都见过这个

00:14:17.956 --> 00:14:18.696 A:middle
部分区间的标记吗

00:14:19.256 --> 00:14:21.426 A:middle
它是一种非常方便的

00:14:21.426 --> 00:14:22.656 A:middle
方式来编写扩展到

00:14:22.656 --> 00:14:24.000 A:middle
集合末尾的范围

00:14:26.896 --> 00:14:27.116 A:middle
好的

00:14:27.846 --> 00:14:29.986 A:middle
现在 removeSubrange 是

00:14:29.986 --> 00:14:31.826 A:middle
库全局 API 的一部分

00:14:31.826 --> 00:14:33.496 A:middle
因此你可以在网上找到它的文档

00:14:33.496 --> 00:14:36.276 A:middle
但是 halfStablePartition

00:14:36.456 --> 00:14:37.696 A:middle
是一个运行的细节

00:14:38.236 --> 00:14:42.166 A:middle
现在 我们不打算

00:14:42.166 --> 00:14:43.556 A:middle
一一介绍 但是这里有一些

00:14:43.556 --> 00:14:45.116 A:middle
值得注意的地方

00:14:46.516 --> 00:14:48.846 A:middle
首先 它一开始

00:14:48.846 --> 00:14:49.696 A:middle
调用另一个算法

00:14:50.486 --> 00:14:52.596 A:middle
firstIndex(where: )

00:14:52.856 --> 00:14:54.716 A:middle
来查找属于后缀的

00:14:54.716 --> 00:14:55.796 A:middle
第一个元素的位置

00:14:57.176 --> 00:14:58.766 A:middle
接下来 它设置了一个循环变量 j

00:14:58.766 --> 00:15:01.126 A:middle
有一个循环

