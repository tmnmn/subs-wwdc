WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.286 --> 00:12:02.456 align:start position:27% line:-1
オレンジはｎの２乗の線です

00:12:03.257 --> 00:12:07.494 align:start position:29% line:-2
一次のアルゴリズムは
小さな問題では効率が悪く

00:12:07.594 --> 00:12:10.898 align:start position:25% line:-1
徐々に二次よりも高くなります

00:12:11.798 --> 00:12:17.771 align:start position:25% line:-2
ちなみに一次のアルゴリズムの
コストがいくら高くても

00:12:18.205 --> 00:12:21.241 align:start position:29% line:-1
それは問題ではありません

00:12:22.142 --> 00:12:28.515 align:start position:21% line:-2
問題のサイズが大きくなれば
ある点以降 一次が常に上回ります

00:12:29.216 --> 00:12:33.420 align:start position:29% line:-2
なお これは
スケーラビリティの話です

00:12:36.356 --> 00:12:41.094 align:start position:23% line:-2
さて スケーラビリティの問題は
解決しましたが

00:12:41.195 --> 00:12:46.934 align:start position:20% line:-2
逆方向の削除に対して
標準ライブラリはどう改善するのか？

00:12:47.901 --> 00:12:51.471 align:start position:21% line:-1
Swiftはオープンソースなので

00:12:51.572 --> 00:12:55.609 align:start position:18% line:-1
GitHubからデータを引き出せます

00:12:59.146 --> 00:13:02.182 align:start position:23% line:-1
目に付くのはコメントの部分です

