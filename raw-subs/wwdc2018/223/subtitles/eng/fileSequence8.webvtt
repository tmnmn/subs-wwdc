WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.006 --> 00:08:00.376 A:middle
about a few hundred steps, and

00:08:00.376 --> 00:08:01.936 A:middle
since the steps are pretty fast,

00:08:02.046 --> 00:08:02.876 A:middle
it seemed great.

00:08:04.116 --> 00:08:05.396 A:middle
But the problem is that it

00:08:05.396 --> 00:08:06.296 A:middle
doesn't scale well.

00:08:06.796 --> 00:08:10.576 A:middle
Fifty squared is 2,500 and 100

00:08:10.576 --> 00:08:11.986 A:middle
squared is 10,000.

00:08:12.546 --> 00:08:15.326 A:middle
So, if you do all your testing

00:08:15.326 --> 00:08:17.186 A:middle
in this little region down here,

00:08:17.476 --> 00:08:18.766 A:middle
you'll probably never see it,

00:08:19.336 --> 00:08:21.746 A:middle
but scalability matters because

00:08:21.746 --> 00:08:23.336 A:middle
people are using their phones

00:08:23.336 --> 00:08:25.626 A:middle
and iPads to manage more and

00:08:25.626 --> 00:08:27.376 A:middle
more data, and we keep shipping

00:08:27.376 --> 00:08:29.096 A:middle
devices with more memory to help

00:08:29.096 --> 00:08:29.586 A:middle
them do it.

00:08:30.606 --> 00:08:32.346 A:middle
You care about this because

00:08:32.346 --> 00:08:34.476 A:middle
scalability is predictability

00:08:34.476 --> 00:08:35.296 A:middle
for your users.

00:08:35.826 --> 00:08:39.946 A:middle
So, now, I understood the

00:08:39.946 --> 00:08:41.986 A:middle
problem, but I still wasn't sure

00:08:41.986 --> 00:08:42.746 A:middle
what to do about it.

00:08:43.326 --> 00:08:43.706 A:middle
"Now what?"

00:08:43.706 --> 00:08:44.446 A:middle
I asked Crusty.

00:08:45.526 --> 00:08:47.056 A:middle
"You know, kid," he said,

00:08:47.496 --> 00:08:49.776 A:middle
popping a lozenge, "there is an

00:08:49.776 --> 00:08:51.466 A:middle
algorithm for that."

00:08:53.056 --> 00:08:56.236 A:middle
I told him, "Listen, Crusty, I'm

00:08:56.236 --> 00:08:57.176 A:middle
an app developer.

00:08:58.226 --> 00:09:00.176 A:middle
You say you don't do object

