WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:01.788 --> 00:17:04.625 align:middle line:-1
现在我们已经看到它是如何工作的

00:17:04.691 --> 00:17:07.160 align:middle line:-1
但我想在查看代码时强调一些事情

00:17:08.862 --> 00:17:10.964 align:middle line:0
我保证我们将在这里现场写一些代码

00:17:12.199 --> 00:17:13.032 align:middle line:0
好的

00:17:14.134 --> 00:17:16.770 align:middle line:0
让我把一切不需要的东西都关掉

00:17:18.704 --> 00:17:19.873 align:middle line:0
并让它更大一些

00:17:22.108 --> 00:17:25.012 align:middle line:-1
好的 我是如何解决这一切的呢？

00:17:25.345 --> 00:17:28.949 align:middle line:-2
一开始 我们创建了一个
序列请求处理程序

00:17:29.016 --> 00:17:31.885 align:middle line:-1
它被用于进行配准

00:17:31.952 --> 00:17:34.821 align:middle line:-2
正如Sergei
在上个演讲中提到的

00:17:35.222 --> 00:17:36.857 align:middle line:-1
它非常擅长跟踪对象

00:17:37.925 --> 00:17:41.528 align:middle line:-2
然后创建我的请求
将它们放入一个数组中

00:17:41.595 --> 00:17:43.197 align:middle line:-1
你在这里看到的是 对于配准

00:17:43.263 --> 00:17:46.433 align:middle line:-1
只保留最近15个配准结果

00:17:46.767 --> 00:17:48.535 align:middle line:-1
然后我会对其做一些分析

00:17:48.602 --> 00:17:50.204 align:middle line:-1
来看看我是否真的拿稳了相机

00:17:51.238 --> 00:17:53.907 align:middle line:-1
当分析它们时 我要保留一个

00:17:53.974 --> 00:17:55.209 align:middle line:-1
用于此目的的缓冲区

00:17:55.275 --> 00:17:57.311 align:middle line:-1
这实际上就是分类所运行的地方

00:17:58.645 --> 00:18:01.315 align:middle line:-1
并且由于这是一个很耗时的任务

