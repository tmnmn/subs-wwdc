WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.107 --> 00:24:02.075 align:middle line:-1
来与前一帧进行比较

00:24:03.343 --> 00:24:08.282 align:middle line:-2
除此之外 我们从alignmentTransform中
得到了平移方式

00:24:08.348 --> 00:24:11.885 align:middle line:-1
它告诉我前一帧如何移动X和Y

00:24:12.786 --> 00:24:14.221 align:middle line:-1
从而达到当前这帧

00:24:15.923 --> 00:24:19.359 align:middle line:-2
然后我们谈到
我们只想在场景稳定时进行分析

00:24:20.194 --> 00:24:22.262 align:middle line:-1
为此 我们创建了

00:24:22.329 --> 00:24:25.032 align:middle line:-2
当前缓冲区的
VNImageRequestHandler

00:24:25.933 --> 00:24:27.568 align:middle line:-1
并且我们一起传入

00:24:27.701 --> 00:24:31.538 align:middle line:-1
条码检测请求和分类请求

00:24:32.105 --> 00:24:35.142 align:middle line:-1
这允许Vision在底层进行优化

00:24:35.309 --> 00:24:39.079 align:middle line:-1
这比将它们作为单独的请求运行

00:24:39.146 --> 00:24:40.547 align:middle line:-1
要快得多

00:24:43.083 --> 00:24:47.287 align:middle line:-2
下一部分关于我们在运行时
需要多大的缓冲区

00:24:47.588 --> 00:24:49.656 align:middle line:-1
所以说要“管理你的缓冲区”

00:24:50.858 --> 00:24:54.094 align:middle line:-2
有些Vision请求
如这类卷积网络

00:24:54.161 --> 00:24:55.362 align:middle line:-1
可能耗费较长时间

00:24:55.896 --> 00:24:58.465 align:middle line:-1
这些运行时间更长的任务最好

00:24:58.532 --> 00:25:02.803 align:middle line:-2
运行在后台队列上 以便你的UI
或你在相机中做的任何事情

