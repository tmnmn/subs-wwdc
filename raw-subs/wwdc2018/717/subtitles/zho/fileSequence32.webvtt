WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.452 --> 00:32:00.387 align:middle line:-1
然后就可以将其显示到早餐查找器中

00:32:04.091 --> 00:32:06.927 align:middle line:-1
我想在这个例子中强调一件事

00:32:08.328 --> 00:32:10.531 align:middle line:-1
你可以看到这些边界框有点抖动

00:32:10.597 --> 00:32:13.634 align:middle line:-1
因为我一帧一帧一帧地运行检测器

00:32:14.935 --> 00:32:17.137 align:middle line:-1
跟踪往往是这里更好的选择

00:32:17.271 --> 00:32:21.508 align:middle line:-1
为什么呢？即使在运行方面

00:32:21.575 --> 00:32:23.310 align:middle line:-1
跟踪也比运行这些模型要快得多

00:32:25.179 --> 00:32:29.750 align:middle line:-2
因此重新检测比运行跟踪请求
需要更多时间

00:32:31.218 --> 00:32:35.689 align:middle line:-2
只要我想在屏幕上跟踪某对象
我就可以使用跟踪器

00:32:37.057 --> 00:32:39.393 align:middle line:-2
因为它是一种更轻量级的算法
它运行得更快

00:32:39.826 --> 00:32:43.030 align:middle line:-1
最重要的是 我们有时间平滑

00:32:43.096 --> 00:32:45.065 align:middle line:-1
这样这些框就不再抖动了

00:32:45.132 --> 00:32:47.534 align:middle line:-1
如果你查看我们的一些跟踪示例

00:32:47.601 --> 00:32:50.237 align:middle line:-1
它们实际上在屏幕上移动得非常顺畅

00:32:50.871 --> 00:32:52.606 align:middle line:-1
如果你想了解有关跟踪的更多信息

00:32:54.074 --> 00:32:56.643 align:middle line:-1
我的同事Sergei的上一次演讲

00:32:56.877 --> 00:32:59.813 align:middle line:-1
讨论了如何实现这一点

