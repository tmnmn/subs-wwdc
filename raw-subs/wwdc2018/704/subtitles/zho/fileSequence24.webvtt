WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.571 --> 00:24:00.707 align:middle line:-2
这样你就不会在用户已付款的情况下
中断用户的服务

00:24:03.110 --> 00:24:06.713 align:middle line:-2
在推广的app内程序购买中
用户点击App Store中的这些内容

00:24:07.147 --> 00:24:08.882 align:middle line:-1
交易会转移到你的app

00:24:09.483 --> 00:24:11.518 align:middle line:-1
所以你要确保衔接顺利

00:24:13.587 --> 00:24:15.822 align:middle line:-2
最后如果你为app内购买
设置了促销代码

00:24:16.089 --> 00:24:17.524 align:middle line:-1
这些会从App Store兑换

00:24:17.591 --> 00:24:18.592 align:middle line:-1
然后也会被发送到你的app

00:24:23.263 --> 00:24:26.600 align:middle line:-2
我们遇到的另一个问题是何时该调用
finishTransaction

00:24:27.968 --> 00:24:30.404 align:middle line:-2
一般来说你应该
在交易完全成功后

00:24:30.838 --> 00:24:32.906 align:middle line:-1
调用finishTransaction

00:24:33.273 --> 00:24:35.909 align:middle line:-1
还有已下载并向用户交付了所有内容

00:24:36.844 --> 00:24:39.379 align:middle line:-1
或是在交易未成功完成的时候

00:24:41.048 --> 00:24:44.651 align:middle line:-2
为了更具体地解释
让我们来看看所有的交易状态

00:24:45.118 --> 00:24:46.687 align:middle line:-1
并讨论下如何处理它们

00:24:48.188 --> 00:24:50.958 align:middle line:-2
你目前无需在购买状态下
执行任何操作

00:24:51.024 --> 00:24:54.294 align:middle line:-2
只需继续观察付款队列
并等待状态发生变化即可

00:24:56.463 --> 00:24:59.132 align:middle line:-2
在已购买状态下
交易已经成功完成了

