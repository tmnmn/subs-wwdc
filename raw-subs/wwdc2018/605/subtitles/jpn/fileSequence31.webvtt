WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:56.290 --> 00:31:01.061 align:start position:12% line:-2
“WritableBitStream”では
ジェネリックメソッドを加え

00:31:01.161 --> 00:31:02.930 align:start position:36% line:-1
エンコード可能に

00:31:03.363 --> 00:31:04.765 align:start position:41% line:-1
アペンドし

00:31:04.865 --> 00:31:09.770 align:start position:30% line:-2
新たな静的プロパティで
ビットを計算します

00:31:11.638 --> 00:31:13.807 align:start position:30% line:-1
シンプルになりましたね

00:31:14.141 --> 00:31:19.580 align:start position:7% line:-2
CodingKeysで“appendEnum”を
使えば後はお任せです

00:31:19.947 --> 00:31:23.817 align:start position:29% line:-2
ケースを加えると
ビットフィールドが拡張し

00:31:23.917 --> 00:31:27.955 align:start position:27% line:-1
削除すれば自動で縮小します

00:31:31.592 --> 00:31:34.528 align:start position:20% line:-2
BitStreamCodableの
実力とは？

00:31:34.962 --> 00:31:38.532 align:start position:27% line:-2
オブジェクトの動きに関する
メッセージで

00:31:38.632 --> 00:31:42.669 align:start position:29% line:-2
送信時のパフォーマンスを
検査しました

00:31:43.971 --> 00:31:47.741 align:start position:32% line:-2
サイズは10分の１
エンコード速度は２倍

00:31:47.841 --> 00:31:49.610 align:start position:32% line:-1
デコード速度は10倍

00:31:50.144 --> 00:31:54.548 align:start position:30% line:-2
75マイクロ秒が
６マイクロ秒になっても

00:31:54.648 --> 00:31:56.417 align:start position:41% line:-1
大差はない

00:31:56.884 --> 00:32:00.254 align:start position:32% line:-2
よく使うオブジェクト
200個なら

