WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:01.882 --> 00:23:04.318 align:middle line:-1
接下来让我们谈谈游戏中的物理模拟

00:23:04.952 --> 00:23:07.688 align:middle line:-2
像SwiftShot一样的游戏
物理非常关键

00:23:07.754 --> 00:23:11.158 align:middle line:-2
对于创建
源于现实的有趣的交互作用来说

00:23:11.225 --> 00:23:14.027 align:middle line:-2
在对象和游戏之间
它是一个很棒的体验

00:23:14.094 --> 00:23:17.130 align:middle line:-2
拉动弹弓
然后对准游戏中的一个对象发射

00:23:17.197 --> 00:23:18.532 align:middle line:-1
并缴获对手的弹弓

00:23:19.700 --> 00:23:21.368 align:middle line:-1
那其实是源自物理模拟

00:23:23.670 --> 00:23:25.672 align:middle line:-2
我们用了SceneKit
内置物理引擎

00:23:26.039 --> 00:23:27.641 align:middle line:-1
它集成了渲染引擎

00:23:27.708 --> 00:23:30.444 align:middle line:-1
在场景中自动更新对象的位置

00:23:30.911 --> 00:23:33.113 align:middle line:-1
如果发生碰撞就通过委托提醒我们

00:23:34.581 --> 00:23:37.050 align:middle line:-2
在我们的实施中
我们决定最好的方式是

00:23:37.117 --> 00:23:41.722 align:middle line:-2
让会话中的一台设备
担任事实来源或服务器

00:23:42.256 --> 00:23:46.260 align:middle line:-2
它会把物理状态的定期更新
发送到网络中的其它设备上

00:23:46.326 --> 00:23:50.931 align:middle line:-1
通过多点连通性推送方法

00:23:52.699 --> 00:23:56.970 align:middle line:-1
现在其它设备也拥有物理模拟了

00:23:57.704 --> 00:24:00.741 align:middle line:-2
这是因为我们并不是发送
游戏中每一个对象的信息

