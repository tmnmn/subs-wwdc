WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:56.356 --> 00:31:01.128 align:middle line:-2
最后我们添加了通用方法
在可写入BitStream类型上

00:31:01.195 --> 00:31:02.763 align:middle line:-1
允许我们编码那个枚举

00:31:03.397 --> 00:31:07.467 align:middle line:-2
它会附加那个类型的东西
并且会使用那个新的静态属性来计算

00:31:07.534 --> 00:31:09.736 align:middle line:-1
所需要使用的位元数

00:31:11.705 --> 00:31:13.740 align:middle line:-1
现在我们的编码方法变得更简单了

00:31:14.208 --> 00:31:17.845 align:middle line:-2
在适当的代码键上
我们只使用了附加枚举

00:31:17.911 --> 00:31:19.346 align:middle line:-1
Swift会替我们完成剩下的事

00:31:19.980 --> 00:31:23.717 align:middle line:-2
当我们向枚举中添加更多情况时
BitField会自动扩展

00:31:23.984 --> 00:31:26.286 align:middle line:-1
如果我们移除情况 它会自动缩小

00:31:26.520 --> 00:31:27.754 align:middle line:-1
我们不用担心它

00:31:31.658 --> 00:31:34.695 align:middle line:-2
BitStreamCodable
到底有多快多紧凑呢？

00:31:35.028 --> 00:31:38.298 align:middle line:-2
我们运行一些测试
使用XE测试支持用于性能测试

00:31:38.665 --> 00:31:42.503 align:middle line:-2
使用代表性的信息
我们发送关于对象移动的信息

00:31:44.004 --> 00:31:47.841 align:middle line:-2
结果令人印象深刻：十分之一的尺寸
两倍速度的编码

00:31:47.908 --> 00:31:49.376 align:middle line:-1
十倍速度的解码

00:31:50.177 --> 00:31:54.581 align:middle line:-2
现在当我们谈到从75毫秒
降低到6毫秒时

00:31:54.648 --> 00:31:56.116 align:middle line:-1
看起来微不足道

00:31:56.917 --> 00:32:00.254 align:middle line:-2
但游戏中有大约200个对象
我们要非常频繁地操作

