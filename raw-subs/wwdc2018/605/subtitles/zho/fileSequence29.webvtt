WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.007 --> 00:29:02.042 align:middle line:-2
谈谈如何通过
BitStream来实现

00:29:03.844 --> 00:29:07.514 align:middle line:-2
对于常规的codable
如果你正在做你自己的序列化

00:29:07.581 --> 00:29:11.385 align:middle line:-2
你要在枚举中的不同情况下
指定枚举的编码关键字

00:29:12.186 --> 00:29:16.857 align:middle line:-2
对于BitStream
我们用了整数值而非字符串值

00:29:18.525 --> 00:29:23.330 align:middle line:0
然后再我们的编码方法中
我们可以先附加那个值

00:29:23.397 --> 00:29:27.601 align:middle line:0
接着是与那个枚举情况
相关联的数据结构

00:29:28.468 --> 00:29:31.205 align:middle line:0
现在 如果你查找这个代码
这里有一个陷阱

00:29:31.805 --> 00:29:36.577 align:middle line:0
我们知道这个例子有三种不同的情况

00:29:37.211 --> 00:29:39.213 align:middle line:-1
我们只需要两个位元来编码它

00:29:40.681 --> 00:29:45.452 align:middle line:-2
但当我们添加另一情况后会怎样呢？
四个位元对应四种情况仍然还不错

00:29:45.752 --> 00:29:49.923 align:middle line:-2
我们添加了第五种情况
现在我们就要修改那个

00:29:49.990 --> 00:29:53.427 align:middle line:-2
我们每次这样做时
我们用的是三个位元而非两个

00:29:54.061 --> 00:29:57.197 align:middle line:-2
现在这就有点乏味了
这个代码有点重复了

00:29:57.264 --> 00:29:59.666 align:middle line:-2
并且你知道的
这里的内容可能会发生错误

00:29:59.733 --> 00:30:02.703 align:middle line:-2
如果我们不记得这个
我们只能得到一个糟糕的结果

