WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.726 --> 00:36:01.828 align:middle line:-2
它很好地改善了
游戏环境中的沉浸体验

00:36:02.596 --> 00:36:04.831 align:middle line:-1
我们想要一个真实的刮风的效果

00:36:05.165 --> 00:36:08.168 align:middle line:-2
现在我们可以在物理引擎外部
使用布料模拟

00:36:09.469 --> 00:36:13.040 align:middle line:-2
但相反 我们决定使用GPU
并用Metal实现

00:36:15.275 --> 00:36:18.011 align:middle line:-2
我们从由技术设计师创建的
SceneKit资产开始

00:36:18.478 --> 00:36:22.449 align:middle line:-2
要在旗子上获取Apple标识
我们在Runtime时应用了纹理

00:36:23.684 --> 00:36:26.253 align:middle line:-2
然后在Metal设备周围
创建了一个Swift类

00:36:26.787 --> 00:36:30.424 align:middle line:-2
Swift代码创建了metal
命令队列并插入

00:36:30.490 --> 00:36:33.193 align:middle line:-1
从游戏状态中获取的信息 比如风向

00:36:34.561 --> 00:36:37.164 align:middle line:-2
那个命令队列运行的是
自定义Metal计算着色器

00:36:37.798 --> 00:36:39.900 align:middle line:-1
它来自用C创建的老程序

00:36:40.133 --> 00:36:44.805 align:middle line:-2
但因Metal基于现代的C++
所以这是一个很简单的转换

00:36:45.772 --> 00:36:49.776 align:middle line:-2
然后我们还运行了另一个计算着色器
来计算表面的法线

00:36:49.843 --> 00:36:52.346 align:middle line:-2
这样我们就得到了一个很棒
很流畅的旗子效果

00:36:52.579 --> 00:36:54.915 align:middle line:-1
而不需要在场景中有大量的多边形

00:36:55.582 --> 00:36:57.251 align:middle line:-1
旗子效果看起来真的很棒

00:36:58.252 --> 00:37:01.722 align:middle line:-2
每一帧 着色器都会把
匹配的几何结构更新为

