WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.259 --> 00:21:02.763 align:middle line:-2
因此多点连通性
允许你做出决策并确定

00:21:02.829 --> 00:21:06.767 align:middle line:-1
可靠或不可靠地发送特定数据包

00:21:07.434 --> 00:21:08.735 align:middle line:-1
如果你选择可靠地发送

00:21:09.203 --> 00:21:11.972 align:middle line:-1
多点连通性会替你不断重试

00:21:12.039 --> 00:21:14.441 align:middle line:-1
因此你不需要在代码中担忧这个问题

00:21:15.843 --> 00:21:18.712 align:middle line:-1
即使当你向会话中的所有成员推广时

00:21:21.648 --> 00:21:23.350 align:middle line:-1
现在我们有一个网络层

00:21:23.417 --> 00:21:25.619 align:middle line:-2
我们要在网络层顶部
创建我们的app协议

00:21:26.386 --> 00:21:29.823 align:middle line:-2
带相关联类型SwiftEnums
让这个过程变得非常简单

00:21:30.757 --> 00:21:32.759 align:middle line:-1
每个例子中都有一个数据结构

00:21:33.126 --> 00:21:36.196 align:middle line:-2
确保类型的安全性
当信息在系统中移动时

00:21:37.464 --> 00:21:39.600 align:middle line:-1
其中有些可以进一步枚举

00:21:39.833 --> 00:21:42.636 align:middle line:-2
比如在本例中
gameAction包括

00:21:42.703 --> 00:21:46.440 align:middle line:-2
像玩家抓取弹弓
弹丸发射等等这样的东西

00:21:47.307 --> 00:21:49.810 align:middle line:-2
PhysicsSyncData
是一个结构 我们稍后再具体谈谈

00:21:49.877 --> 00:21:51.645 align:middle line:-1
我们是如何进行编码的

00:21:53.480 --> 00:21:55.449 align:middle line:-1
Swift让这个过程变得很简单

00:21:55.516 --> 00:21:58.552 align:middle line:-2
对于结构 如果结构中的全部成员
都是可编码的

00:21:58.919 --> 00:22:01.822 align:middle line:-2
你所要做的就是把那个结构
标记为可编码

