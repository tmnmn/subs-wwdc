WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.078 --> 00:33:01.315 align:middle line:0
如果我们继续并让一切对象都直接
BitStream Codable

00:33:01.849 --> 00:33:04.651 align:middle line:0
但我们发现我们不需要针对
游戏中的每一个对象这样做

00:33:04.718 --> 00:33:06.587 align:middle line:0
只针对最频繁的信息即可

00:33:06.653 --> 00:33:10.691 align:middle line:-2
这让我们的移动非常快速
并让它在游戏中保持运行

00:33:12.526 --> 00:33:13.961 align:middle line:-1
那么这是我们如何处理物理

00:33:14.228 --> 00:33:17.097 align:middle line:-2
接下来我想谈谈如何针对游戏等级
处理资产

00:33:17.164 --> 00:33:20.033 align:middle line:-1
楼下有很多人提到了这个问题

00:33:22.002 --> 00:33:24.404 align:middle line:-1
你知道的 资产包括3D模块、纹理

00:33:24.471 --> 00:33:25.772 align:middle line:-1
动画等等

00:33:26.406 --> 00:33:28.342 align:middle line:-2
Apple中有些文本角度的
艺术作品

00:33:28.709 --> 00:33:31.445 align:middle line:-2
并且它们使用了一些商业工具
来针对游戏创建视觉效果

00:33:31.512 --> 00:33:33.280 align:middle line:-1
砖块、弹弩等等

00:33:34.047 --> 00:33:38.185 align:middle line:-2
然后他们把资产导出为
常用的DAE文件格式

00:33:38.252 --> 00:33:40.921 align:middle line:-1
我们想要让商业工具支持USDZ

00:33:41.255 --> 00:33:42.789 align:middle line:-2
但对于这个游戏
还没达到目标

00:33:44.424 --> 00:33:49.162 align:middle line:-2
在Swift中创建了命令行工具
使用SceneKit API

00:33:49.229 --> 00:33:52.733 align:middle line:-2
将对象从DAE转换为
SceneKit文件

00:33:53.133 --> 00:33:56.937 align:middle line:-2
因为SceneKit在iOS
和macOS上提供相同的API

00:33:57.337 --> 00:34:01.241 align:middle line:-2
我们可以把这个工具
作为macOS上创建过程的一部分

