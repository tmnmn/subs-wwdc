WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.178 --> 00:28:01.114 align:middle line:-1
要实施它 我们创建了两个协议

00:28:01.181 --> 00:28:03.951 align:middle line:-2
BitStream Encodable
和BitStream Decodable

00:28:04.651 --> 00:28:06.520 align:middle line:-2
把两个结合起来就能得到
BitStream Codable

00:28:07.387 --> 00:28:11.124 align:middle line:-2
然后我们用它标记
我们需要序列化的所有对象

00:28:11.191 --> 00:28:13.594 align:middle line:-1
使用那个协议 帮助我们获得实施

00:28:14.027 --> 00:28:17.898 align:middle line:-2
那既包括我们自己的数据对象
也包括我们从系统中使用的对象

00:28:17.965 --> 00:28:22.269 align:middle line:-1
比如simD浮点矢量类型

00:28:25.272 --> 00:28:27.908 align:middle line:-1
那么这是压缩浮点的实施

00:28:28.509 --> 00:28:31.578 align:middle line:-1
压缩器配置了最小和最大范围

00:28:31.645 --> 00:28:33.347 align:middle line:-1
以及我们想要使用的位数

00:28:35.115 --> 00:28:39.253 align:middle line:-2
它把值压缩到那个范围
然后把它转化为一个整数值

00:28:39.319 --> 00:28:41.722 align:middle line:-1
用于编码 使用指定位数

00:28:42.823 --> 00:28:45.859 align:middle line:-2
场景中每个对象的每个组件
都是以这种方式压缩的

00:28:46.593 --> 00:28:48.829 align:middle line:-1
我们之前还使用额外位数

00:28:48.896 --> 00:28:51.298 align:middle line:-2
来表示对象自上次更新后
是否发生了移动

00:28:51.999 --> 00:28:54.735 align:middle line:-2
如果它没有移动过
我们就不再重复发送那个信息

00:28:57.271 --> 00:28:59.940 align:middle line:-2
那么让我们返回我们的行动枚举
有三个不同的行动

