WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.566 --> 00:20:01.468 align:middle line:-1
作为游戏状态的事实来源

00:20:01.702 --> 00:20:05.172 align:middle line:-2
这是我们在网络协议顶层
所做出的决策

00:20:05.239 --> 00:20:07.274 align:middle line:-1
它并不是多点连通性所固有的

00:20:10.077 --> 00:20:11.578 align:middle line:-1
一旦设置好会话

00:20:11.645 --> 00:20:15.482 align:middle line:-2
多点连通性就让我们以三种方式
在点之间发送数据：

00:20:15.916 --> 00:20:17.117 align:middle line:-1
作为数据包

00:20:17.651 --> 00:20:20.654 align:middle line:-2
作为资源
在本地存储上把URL归档

00:20:21.054 --> 00:20:22.155 align:middle line:-1
以及作为数据流

00:20:22.723 --> 00:20:25.659 align:middle line:-2
你可以发送数据对象
向网络中的所有点推送

00:20:25.993 --> 00:20:28.795 align:middle line:-1
而资源和数据流是设备对设备的操作

00:20:29.730 --> 00:20:35.102 align:middle line:-2
在SwiftShot中
我们主要把数据包用于共享游戏事件

00:20:35.169 --> 00:20:37.671 align:middle line:-1
以及物理状态 我们稍后再谈

00:20:38.839 --> 00:20:41.108 align:middle line:-2
然后我们使用资源
来迁移WorldMap

00:20:42.176 --> 00:20:44.111 align:middle line:-2
然后它就结束了
我们的app不需要数据流

00:20:46.079 --> 00:20:48.015 align:middle line:-1
在底层 多点连通性

00:20:48.081 --> 00:20:50.617 align:middle line:-2
依赖于UDP
用于在设备间进行迁移

00:20:51.285 --> 00:20:55.656 align:middle line:-2
这就提供了低延迟
对于游戏这样的app来说非常棒

00:20:56.490 --> 00:20:58.825 align:middle line:-1
现在固有的UDP并不能保证交付

00:20:59.259 --> 00:21:02.763 align:middle line:-2
因此多点连通性
允许你做出决策并确定

