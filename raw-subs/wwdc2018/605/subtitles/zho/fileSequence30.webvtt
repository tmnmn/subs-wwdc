WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.733 --> 00:30:02.703 align:middle line:-2
如果我们不记得这个
我们只能得到一个糟糕的结果

00:30:03.804 --> 00:30:05.339 align:middle line:-1
那么让我们查看一下

00:30:05.405 --> 00:30:08.909 align:middle line:-1
想想Swift是否可以提供帮助

00:30:11.078 --> 00:30:15.482 align:middle line:-2
我们用了Swift 4.2新特性
叫做情况可迭代

00:30:16.450 --> 00:30:21.688 align:middle line:-2
我们在我们的枚举类型中
添加了协议一致性

00:30:22.489 --> 00:30:26.827 align:middle line:-2
当你这样做时 Swift
就会添加一个类型的新静态成员

00:30:26.894 --> 00:30:29.897 align:middle line:-2
叫做全部情况
包括枚举中的每一种情况

00:30:30.664 --> 00:30:34.034 align:middle line:-1
让就让我们自动获得情况数量

00:30:34.968 --> 00:30:38.772 align:middle line:-2
然后我们添加了另一个扩展
这一次是在原生的可描绘类型上

00:30:38.839 --> 00:30:42.543 align:middle line:-1
所有带数字类型的枚举都会遵循它

00:30:43.110 --> 00:30:46.346 align:middle line:-1
这种情况可迭代 并且数字是整数

00:30:47.047 --> 00:30:50.117 align:middle line:-1
为此我们要自动获取情况的数量

00:30:50.184 --> 00:30:54.254 align:middle line:-2
并算出表达全部那些情况
需要多少位元数

00:30:56.356 --> 00:31:01.128 align:middle line:-2
最后我们添加了通用方法
在可写入BitStream类型上

