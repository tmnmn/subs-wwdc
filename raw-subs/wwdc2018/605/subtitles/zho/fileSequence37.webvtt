WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.252 --> 00:37:01.722 align:middle line:-2
每一帧 着色器都会把
匹配的几何结构更新为

00:37:01.788 --> 00:37:02.789 align:middle line:-1
它的新位置

00:37:03.257 --> 00:37:05.459 align:middle line:-1
通过以这种方式利用GPU

00:37:05.526 --> 00:37:09.730 align:middle line:-2
我们得到了一个很棒的效果
而它也不会影响主CPU

00:37:12.399 --> 00:37:15.769 align:middle line:-2
最后我想谈谈
SwiftShot中的音频实施

00:37:16.670 --> 00:37:19.806 align:middle line:-2
音频可以让任何游戏变得
更加拟真和迷人

00:37:20.674 --> 00:37:23.443 align:middle line:-1
我们知道我们想提供真实的声音效果

00:37:23.510 --> 00:37:26.813 align:middle line:-2
并在虚拟世界中适当地投放
从而得到真正拟真的体验

00:37:26.880 --> 00:37:28.315 align:middle line:-1
并给用户提供很好的反馈

00:37:28.382 --> 00:37:30.017 align:middle line:-1
关于他们要如何与那个世界交互

00:37:30.884 --> 00:37:33.453 align:middle line:-1
我们还想确保这个速度够快并关注

00:37:33.520 --> 00:37:36.390 align:middle line:-1
添加多少音频会增加我们app的大小

00:37:37.057 --> 00:37:39.326 align:middle line:-2
那么我们遇到了一个
我们认为很棒的方案

00:37:40.294 --> 00:37:42.963 align:middle line:-1
我们创建了一些代表性的声音示例

00:37:43.030 --> 00:37:46.099 align:middle line:-2
通过我们从团队员工的孩子们那儿
借来的玩具

00:37:47.301 --> 00:37:52.439 align:middle line:-2
然后我们录制了那些声音
并把它们结合到一个AU预设文件中

00:37:52.739 --> 00:37:56.343 align:middle line:-2
并用这些声音在AV Foundation中
创建自定义Midi乐器

00:37:56.677 --> 00:37:58.712 align:middle line:-2
使用AV Audio Unit
Midi Instrument

00:37:59.413 --> 00:38:02.115 align:middle line:-2
那样就能在合适的时候
快速播放合适的声音

