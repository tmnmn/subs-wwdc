WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:56.917 --> 00:32:00.254 align:middle line:-2
但游戏中有大约200个对象
我们要非常频繁地操作

00:32:00.320 --> 00:32:03.023 align:middle line:-2
从而确保每一个参与者
都能流畅地玩游戏

00:32:03.524 --> 00:32:04.992 align:middle line:-1
通过使用这个编码格式

00:32:05.058 --> 00:32:08.495 align:middle line:-2
我们就能以60帧/秒
来实现物理更新

00:32:08.562 --> 00:32:11.164 align:middle line:-2
确保游戏中的每一个人
都能拥有流畅的体验

00:32:13.400 --> 00:32:16.737 align:middle line:-2
现在 我已经讲过了
我们对codable做了一些事

00:32:16.803 --> 00:32:20.174 align:middle line:-2
还有BitStream Codable
你可能会有一个问题

00:32:20.240 --> 00:32:22.075 align:middle line:-1
因为我们用了两种不同的方式来编码

00:32:22.309 --> 00:32:24.077 align:middle line:-1
那意味着需要两种不同的代码路径

00:32:24.144 --> 00:32:25.012 align:middle line:-1
在我们的app中

00:32:26.113 --> 00:32:29.149 align:middle line:-2
Swift再次给我们提供了帮助
算出如何把它们结合在一起

00:32:30.117 --> 00:32:33.086 align:middle line:-1
然后我们添加了受约束的扩展

00:32:33.153 --> 00:32:36.390 align:middle line:-2
因此BitStream Codable中
任何对象都可编码

00:32:36.657 --> 00:32:39.860 align:middle line:-2
我们提供了BitStream
编码的默认实施

00:32:40.460 --> 00:32:45.199 align:middle line:-2
然后我们只需要继续
并使用一个二进制属性列表编码器

00:32:45.832 --> 00:32:48.168 align:middle line:-2
来编码数据并把它放在
BitStream中

00:32:49.236 --> 00:32:52.105 align:middle line:0
然后任何对象
任何结构都是可编码的

00:32:52.172 --> 00:32:54.575 align:middle line:0
我们只需要添加它并把它标记为
BitStream Codable

00:32:54.908 --> 00:32:58.011 align:middle line:0
现在这个实施并不是那么快速和紧凑

00:32:58.078 --> 00:33:01.315 align:middle line:0
如果我们继续并让一切对象都直接
BitStream Codable

