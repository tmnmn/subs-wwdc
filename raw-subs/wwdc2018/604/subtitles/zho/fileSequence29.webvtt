WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.266 --> 00:29:00.506 A:middle
三个 4 字节的部件就是

00:29:00.506 --> 00:29:01.096 A:middle
12 个字节对吧

00:29:01.936 --> 00:29:03.436 A:middle
那么如果你将你的数据这样打包

00:29:03.436 --> 00:29:04.716 A:middle
你就会有麻烦的

00:29:05.356 --> 00:29:06.586 A:middle
因为你的着色器语言

00:29:06.666 --> 00:29:08.296 A:middle
实际上将 float3 类型解释为 

00:29:08.296 --> 00:29:09.586 A:middle
会消耗 16 个字节

00:29:10.336 --> 00:29:11.236 A:middle
这是因为类型被更严格

00:29:11.236 --> 00:29:12.936 A:middle
地定义了对准方式

00:29:12.936 --> 00:29:16.366 A:middle
这是为了 CPU 和 GPU 的优化以及

00:29:16.366 --> 00:29:16.816 A:middle
CPU 和 GPU 的用量

00:29:18.026 --> 00:29:19.626 A:middle
类似的错误还经常发生在

00:29:19.996 --> 00:29:21.176 A:middle
三乘三的矩阵中

00:29:22.316 --> 00:29:23.936 A:middle
如果你真的想追踪它

00:29:23.936 --> 00:29:26.046 A:middle
如果你真的想紧密地包装数据

00:29:26.186 --> 00:29:28.996 A:middle
我们在 Metal 着色器语言中

00:29:28.996 --> 00:29:30.776 A:middle
提供了包装类型

00:29:31.246 --> 00:29:33.126 A:middle
在你将打包好的数据传进缓存以后

00:29:33.126 --> 00:29:34.596 A:middle
你的着色器代码将会

00:29:34.596 --> 00:29:37.356 A:middle
去包装数据

00:29:37.356 --> 00:29:38.846 A:middle
在你处理这些数据以前

00:29:38.846 --> 00:29:40.686 A:middle
你需要将这些包装好的数据传递给

00:29:40.686 --> 00:29:42.236 A:middle
一个规则向量

00:29:43.716 --> 00:29:45.436 A:middle
所以在你发布你的 App 时

00:29:45.436 --> 00:29:48.446 A:middle
我建议你使用

00:29:48.756 --> 00:29:50.376 A:middle
最方便的存储模式

00:29:51.396 --> 00:29:53.436 A:middle
这使得你在那些资源中

00:29:53.466 --> 00:29:55.976 A:middle
访问数据变得更简单

00:29:57.006 --> 00:29:58.676 A:middle
所以在 iOS 系统中

00:29:58.676 --> 00:29:59.696 A:middle
我们通过 StorageModeShared 创建所有的

