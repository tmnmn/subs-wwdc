WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.956 --> 00:05:01.736 A:middle
所以为什么 Metal 不同于 OpenGL

00:05:02.196 --> 00:05:03.556 A:middle
你会更少地去进行

00:05:03.626 --> 00:05:06.036 A:middle
昂贵的操作

00:05:07.046 --> 00:05:08.236 A:middle
对象的设计是这样的

00:05:08.236 --> 00:05:09.916 A:middle
API 的状态可以被转换

00:05:09.916 --> 00:05:12.226 A:middle
并且在创建时被预包装进

00:05:12.226 --> 00:05:13.926 A:middle
GPU 命令

00:05:15.726 --> 00:05:17.406 A:middle
这样做会在真正渲染时

00:05:17.406 --> 00:05:19.266 A:middle
最大程度减少成本

00:05:20.576 --> 00:05:21.656 A:middle
拥有 Vertex 和片段着色器的

00:05:21.686 --> 00:05:23.286 A:middle
图形管道也

00:05:23.286 --> 00:05:24.756 A:middle
反映了当代 GPU

00:05:25.716 --> 00:05:27.396 A:middle
所以这会降低

00:05:27.516 --> 00:05:29.986 A:middle
将 API 设置转换到 GP 命令的成本

00:05:31.236 --> 00:05:32.926 A:middle
这并不表示

00:05:32.926 --> 00:05:34.296 A:middle
管道是截然不同的

00:05:34.296 --> 00:05:36.026 A:middle
或者说需要一个全新的方式去考虑

00:05:36.946 --> 00:05:38.256 A:middle
Metal 最大的区别是

00:05:38.256 --> 00:05:39.406 A:middle
将管道的各个阶段

00:05:39.436 --> 00:05:41.686 A:middle
分组成对象

00:05:41.686 --> 00:05:43.326 A:middle
是更高效的

00:05:43.326 --> 00:05:45.396 A:middle
并不是管道本身改变了

00:05:46.816 --> 00:05:49.366 A:middle
Metal 为了执行多线程

00:05:49.366 --> 00:05:50.616 A:middle
还有一个清晰的模型

00:05:51.496 --> 00:05:52.356 A:middle
有很多种不同的方法

00:05:52.356 --> 00:05:53.976 A:middle
让 App 在不同线程上

00:05:53.976 --> 00:05:55.796 A:middle
去驱动 GPU

00:05:56.286 --> 00:05:57.906 A:middle
但是对于每一个

00:05:57.996 --> 00:05:59.686 A:middle
都有明确但不受限的规则去实现它

