WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:59.846 --> 00:49:01.456 A:middle
我们会通过在编码对象上

00:49:01.456 --> 00:49:03.396 A:middle
调用 endEncoding 向 Metal 

00:49:03.396 --> 00:49:05.376 A:middle
指出这些

00:49:06.196 --> 00:49:07.916 A:middle
所以这就是一个简单的

00:49:07.916 --> 00:49:09.406 A:middle
Metal 渲染通行的例子

00:49:09.926 --> 00:49:12.926 A:middle
现在我们已经有了一个完整的渲染通行 

00:49:12.926 --> 00:49:14.696 A:middle
我们再来看看怎样去

00:49:14.696 --> 00:49:16.806 A:middle
让这些渲染表现出来

00:49:17.336 --> 00:49:21.526 A:middle
通过 OpenGl 你将你的渲染帧

00:49:21.526 --> 00:49:23.156 A:middle
展现到屏幕上

00:49:23.436 --> 00:49:25.336 A:middle
但是你并没有明确地管理

00:49:25.336 --> 00:49:27.996 A:middle
系统的渲染缓存

00:49:27.996 --> 00:49:29.006 A:middle
依旧被设定为 drawable

00:49:30.336 --> 00:49:32.126 A:middle
但是要是通过 Metal 将你的

00:49:32.126 --> 00:49:34.476 A:middle
内容显示在屏幕上

00:49:34.906 --> 00:49:36.186 A:middle
首先你需要确认包含特殊的纹理

00:49:36.186 --> 00:49:37.516 A:middle
这种特殊纹理在系统里

00:49:37.516 --> 00:49:39.116 A:middle
被称为 drawable

00:49:39.746 --> 00:49:41.676 A:middle
所以你可以使用 MetalKit 视图

00:49:41.816 --> 00:49:42.756 A:middle
MetalKit 视图提供了每一帧中的

00:49:42.756 --> 00:49:44.846 A:middle
drawable 纹理

00:49:45.426 --> 00:49:46.886 A:middle
然后一旦你获得这个 drawable

00:49:46.886 --> 00:49:49.276 A:middle
你就可以编码渲染通行

00:49:49.276 --> 00:49:51.226 A:middle
并且渲染到这些

00:49:51.226 --> 00:49:53.096 A:middle
drawable 就像你

00:49:53.096 --> 00:49:54.586 A:middle
渲染到任意其他一个纹理一样

00:49:55.126 --> 00:49:57.766 A:middle
然而并不像其他纹理一样

00:49:57.766 --> 00:49:59.976 A:middle
现在你可以将这个 drawable 展现出来

