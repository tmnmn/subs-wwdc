WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.986 --> 00:28:01.996 A:middle
你通过内容属性

00:28:02.036 --> 00:28:03.506 A:middle
去加载缓存器

00:28:03.506 --> 00:28:05.026 A:middle
这个属性是一个没有返回值的指针

00:28:05.026 --> 00:28:06.186 A:middle
指向返回缓存器的内存

00:28:07.276 --> 00:28:08.706 A:middle
对于 Metal 的核

00:28:08.706 --> 00:28:10.076 A:middle
这个数据是完全没有结构的

00:28:10.076 --> 00:28:11.896 A:middle
所以这就取决于你要怎么去定义

00:28:12.196 --> 00:28:14.066 A:middle
你 App 的布局和怎样

00:28:14.066 --> 00:28:14.296 A:middle
去分享你的代码

00:28:15.086 --> 00:28:16.746 A:middle
这里我们分配一个内容指针

00:28:16.826 --> 00:28:18.486 A:middle
指向一个使用了一些 SIMD 类型的结构

00:28:18.486 --> 00:28:20.546 A:middle
这个在之前

00:28:20.546 --> 00:28:21.236 A:middle
我已经提到过了

00:28:21.236 --> 00:28:23.796 A:middle
我们设置一系列结构体

00:28:23.796 --> 00:28:25.466 A:middle
这些结构体填充缓存区的数据

00:28:25.466 --> 00:28:26.936 A:middle
这是通过使用已经通过

00:28:26.936 --> 00:28:28.286 A:middle
结构体的定义 定义过的布局或 App

00:28:28.606 --> 00:28:29.816 A:middle
来实现的

00:28:31.306 --> 00:28:32.506 A:middle
就像之前提到的

00:28:32.506 --> 00:28:34.026 A:middle
你可以在你的 App

00:28:34.276 --> 00:28:35.406 A:middle
之间分享你的代码

00:28:35.406 --> 00:28:36.736 A:middle
这就确定了你的布局

00:28:36.736 --> 00:28:38.886 A:middle
在这两个部件之间可以匹配

00:28:39.466 --> 00:28:44.846 A:middle
一个很常见的错误是

00:28:44.886 --> 00:28:46.456 A:middle
缓存数据和它

00:28:46.456 --> 00:28:48.226 A:middle
如何在着色器中被翻译不匹配

00:28:48.356 --> 00:28:49.556 A:middle
这是因为一个关于

00:28:49.556 --> 00:28:51.196 A:middle
校准的假设

00:28:52.136 --> 00:28:53.476 A:middle
举个例子

00:28:53.476 --> 00:28:54.496 A:middle
你可能会假设着色器的语言是

00:28:54.826 --> 00:28:57.256 A:middle
flout3 的类型

00:28:57.296 --> 00:28:57.576 A:middle
它只消耗 12 个字节的内存

00:28:58.266 --> 00:29:00.506 A:middle
三个 4 字节的部件就是

