WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.856 --> 00:12:02.226 A:middle
但是这些对象包含的数据

00:12:02.226 --> 00:12:03.976 A:middle
是可以被改变的

00:12:04.626 --> 00:12:07.296 A:middle
Metal 可以为这些对象

00:12:07.446 --> 00:12:09.596 A:middle
创建新的编码器 当它被创建的时候

00:12:10.396 --> 00:12:12.146 A:middle
OpenGL 的可变模型

00:12:12.176 --> 00:12:13.766 A:middle
完全可能让

00:12:13.766 --> 00:12:15.186 A:middle
你的 App 在触碰到一小块状态的时候

00:12:15.186 --> 00:12:18.176 A:middle
这个对象会重新

00:12:18.176 --> 00:12:19.206 A:middle
开始编译

00:12:19.946 --> 00:12:21.256 A:middle
即便你的 App 没有

00:12:21.256 --> 00:12:23.846 A:middle
改变对象的状态

00:12:23.846 --> 00:12:25.176 A:middle
OpenGL 也会需要检查标记的层次结构

00:12:25.226 --> 00:12:27.326 A:middle
这样做是为了在绘图之前确认无误

00:12:28.186 --> 00:12:30.596 A:middle
所以通过这个不可改变的模型

00:12:30.596 --> 00:12:32.176 A:middle
Metal 永远不需要检查

00:12:32.176 --> 00:12:34.106 A:middle
对象状态的改变

00:12:34.106 --> 00:12:36.016 A:middle
这就使绘图调用快很多

00:12:37.556 --> 00:12:39.166 A:middle
另外 对象能在跨线程中

00:12:39.256 --> 00:12:41.106 A:middle
更高效的被利用

00:12:41.516 --> 00:12:42.756 A:middle
Metal 永远不用锁定一个对象

00:12:42.756 --> 00:12:43.746 A:middle
只是因为避免它

00:12:43.746 --> 00:12:44.996 A:middle
在转换到其他线程的时候

00:12:45.146 --> 00:12:45.956 A:middle
陷入无效状态

00:12:51.306 --> 00:12:52.826 A:middle
那么我们再来谈谈移植

00:12:52.826 --> 00:12:57.256 A:middle
这是一个典型的阶段

00:12:57.256 --> 00:12:59.286 A:middle
这些是一些经典的

00:12:59.286 --> 00:13:00.226 A:middle
渲染 App 的阶段

