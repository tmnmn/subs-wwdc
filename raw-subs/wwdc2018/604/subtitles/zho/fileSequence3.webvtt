WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.856 --> 00:03:02.326 A:middle
OpenGL 管道你曾是

00:03:02.326 --> 00:03:03.826 A:middle
完全固定的功能

00:03:03.826 --> 00:03:07.526 A:middle
虽然现在 OpenGL 提供可编程的管道

00:03:07.526 --> 00:03:12.826 A:middle
但是它并不完全匹配当代 GPU

00:03:13.036 --> 00:03:15.356 A:middle
另外 异步处理不再是

00:03:15.356 --> 00:03:16.726 A:middle
API 的核心特性

00:03:17.476 --> 00:03:18.436 A:middle
还有很多其他功能

00:03:18.436 --> 00:03:19.576 A:middle
暗示 GPU 会与

00:03:19.576 --> 00:03:20.656 A:middle
你的 App 同时工作

00:03:20.656 --> 00:03:22.586 A:middle
但大多数都是隐式的

00:03:23.046 --> 00:03:27.766 A:middle
25 年前 只有最贵的工作站

00:03:27.766 --> 00:03:29.186 A:middle
和服务器是多核的

00:03:29.676 --> 00:03:30.956 A:middle
所以 设计一个高效的

00:03:30.956 --> 00:03:33.216 A:middle
多线模型 不是最优选择

00:03:33.216 --> 00:03:37.516 A:middle
所以在 2014 年的时候很明显

00:03:37.516 --> 00:03:39.116 A:middle
设计新的 GPU

00:03:39.116 --> 00:03:40.836 A:middle
App 接口是必要的

00:03:41.696 --> 00:03:42.856 A:middle
很明显我们需要

00:03:42.856 --> 00:03:45.406 A:middle
一个可以高效利用 GPU 能力的接口

00:03:46.576 --> 00:03:48.076 A:middle
要做到这一点

00:03:48.076 --> 00:03:49.826 A:middle
App 需要 CPU 让道

00:03:49.826 --> 00:03:51.946 A:middle
才能让 GPU 可以做他的事情

00:03:52.146 --> 00:03:53.836 A:middle
但是当 App 需要 CPU 做渲染时

00:03:53.836 --> 00:03:54.976 A:middle
它又可以

00:03:54.976 --> 00:03:56.466 A:middle
调用所有的 CPU

00:03:56.906 --> 00:03:58.176 A:middle
包括它的多核

00:03:59.626 --> 00:04:01.146 A:middle
如果接口需要预测

