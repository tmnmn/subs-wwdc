WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.616 --> 00:35:00.196 A:middle
管理 GPU 执行的异步性

00:35:00.876 --> 00:35:03.156 A:middle
所以这包括了

00:35:03.206 --> 00:35:04.826 A:middle
和 GPU 命令一起获取

00:35:04.826 --> 00:35:06.736 A:middle
和提交命令缓存到 GPU

00:35:06.736 --> 00:35:10.046 A:middle
同时以这样的方式 更新你的资源

00:35:10.046 --> 00:35:12.206 A:middle
使得你的 GPU

00:35:12.206 --> 00:35:13.926 A:middle
可以异步地从它里边读取信息

00:35:14.566 --> 00:35:16.086 A:middle
这些资源是你之前 就已经写好在你的

00:35:16.176 --> 00:35:16.726 A:middle
渲染循环里的

00:35:17.266 --> 00:35:19.526 A:middle
然后通过创建渲染命令编码器

00:35:19.526 --> 00:35:21.326 A:middle
来编码渲染通行证

00:35:21.936 --> 00:35:24.636 A:middle
最后将你的帧

00:35:24.636 --> 00:35:25.776 A:middle
展现出来

00:35:25.776 --> 00:35:29.196 A:middle
所以我们先来说一说

00:35:29.196 --> 00:35:30.356 A:middle
命令缓存对象

00:35:32.396 --> 00:35:34.066 A:middle
与 OpenGL 最大的不同点之一就是

00:35:34.066 --> 00:35:36.536 A:middle
Metal 通过命令缓存

00:35:36.606 --> 00:35:38.196 A:middle
提供了准确的控制

00:35:38.196 --> 00:35:40.366 A:middle
这表示着创建这些命令缓存

00:35:40.366 --> 00:35:42.396 A:middle
完全是取决于你

00:35:42.396 --> 00:35:44.106 A:middle
同时你也能决定什么时候

00:35:44.106 --> 00:35:46.486 A:middle
去将这些执行提交给 GPU

00:35:47.306 --> 00:35:49.496 A:middle
一种直接的实现方法就是

00:35:49.496 --> 00:35:51.056 A:middle
创建一个命令缓存

00:35:51.056 --> 00:35:53.236 A:middle
它可以渲染你的整个帧

00:35:53.946 --> 00:35:55.796 A:middle
然后一旦你的 App 准备好了

00:35:55.796 --> 00:35:57.916 A:middle
并且可以跑了并且如果

00:35:57.916 --> 00:35:59.816 A:middle
你在 GPU 上看到一些空余时间

00:35:59.816 --> 00:36:01.976 A:middle
这样的话你就可以去考虑

