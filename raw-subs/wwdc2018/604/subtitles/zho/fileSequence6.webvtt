WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:01.036 --> 00:06:02.546 A:middle
此外最常用的对象

00:06:02.546 --> 00:06:05.936 A:middle
像纹理 缓冲和着色器 可以安全

00:06:05.936 --> 00:06:07.726 A:middle
并有效地在不同线程中使用

00:06:08.526 --> 00:06:10.156 A:middle
Metal 并不需要去实现

00:06:10.326 --> 00:06:11.776 A:middle
昂贵的内部日志操作

00:06:11.776 --> 00:06:13.306 A:middle
去防止这些

00:06:13.306 --> 00:06:14.546 A:middle
对象进入

00:06:14.546 --> 00:06:15.456 A:middle
无效状态

00:06:17.516 --> 00:06:21.036 A:middle
最后 它的执行模式反映了软件与 GPU 之间

00:06:21.076 --> 00:06:22.696 A:middle
真正发生的事

00:06:23.266 --> 00:06:24.926 A:middle
很多通过 OpenGL 展现

00:06:25.046 --> 00:06:26.406 A:middle
的隐性操作

00:06:26.406 --> 00:06:28.116 A:middle
通过 Metal 在 App 中

00:06:28.116 --> 00:06:29.886 A:middle
被明显地展示出来

00:06:30.636 --> 00:06:31.836 A:middle
这就让你可以对于什么时候

00:06:31.836 --> 00:06:33.666 A:middle
和怎样在 App 中使用 GPU

00:06:33.666 --> 00:06:35.966 A:middle
做出明智的决定

00:06:36.946 --> 00:06:37.966 A:middle
这还代表着

00:06:37.966 --> 00:06:39.036 A:middle
你的 App 和 GPU 之间将有

00:06:39.036 --> 00:06:40.586 A:middle
更少的软件

00:06:41.216 --> 00:06:43.286 A:middle
大多数的 Metal 调用直接

00:06:43.286 --> 00:06:45.096 A:middle
指向 GPU 驱动

00:06:45.096 --> 00:06:46.726 A:middle
这样驱动也需要做更少的处理

00:06:46.726 --> 00:06:49.526 A:middle
去将 API 调用转换为 GPU 命令

00:06:51.216 --> 00:06:52.216 A:middle
所以让我们来跟深入地看看

00:06:52.216 --> 00:06:52.636 A:middle
它是怎么工作的

00:06:53.256 --> 00:06:56.466 A:middle
所有的 GL 调用都在 OpenGL 中

00:06:56.466 --> 00:06:57.506 A:middle
展现出来

00:06:57.916 --> 00:06:59.846 A:middle
这个内容就包含了很多东西

00:06:59.846 --> 00:07:01.966 A:middle
它追踪 API 的状态

