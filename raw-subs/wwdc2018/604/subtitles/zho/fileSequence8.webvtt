WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.696 --> 00:08:00.886 A:middle
在一帧里创建两三个

00:08:01.026 --> 00:08:02.256 A:middle
但是 App 本身并不会直接写这些

00:08:02.256 --> 00:08:03.606 A:middle
命令到命令缓存里

00:08:03.606 --> 00:08:05.216 A:middle
它是创建了一个

00:08:05.216 --> 00:08:06.586 A:middle
Metal 命令编码器

00:08:07.886 --> 00:08:09.356 A:middle
这个命令编码器将

00:08:09.446 --> 00:08:11.686 A:middle
API 调用转换成 GPU 指令

00:08:11.906 --> 00:08:13.266 A:middle
并将它们写入命令缓存

00:08:14.336 --> 00:08:15.666 A:middle
在一系列命令

00:08:15.666 --> 00:08:17.426 A:middle
被编码以后 App 就会

00:08:17.426 --> 00:08:19.336 A:middle
结束编码 并且释放编码对象

00:08:20.536 --> 00:08:22.756 A:middle
事实上有不同的编码器

00:08:22.756 --> 00:08:24.146 A:middle
你的 App 可以从命令缓存中

00:08:24.146 --> 00:08:25.876 A:middle
创建新的编码器 去编码更多的指令

00:08:31.156 --> 00:08:32.616 A:middle
特别注意一点是

00:08:32.616 --> 00:08:34.346 A:middle
直到现在在这流程上

00:08:34.346 --> 00:08:36.186 A:middle
GPU 还什么都没做

00:08:37.106 --> 00:08:40.726 A:middle
Metal 创建了对象和编码命令

00:08:40.775 --> 00:08:41.145 A:middle
都是基于 CPU 的

00:08:41.876 --> 00:08:43.166 A:middle
只有在你的 App

00:08:43.216 --> 00:08:45.356 A:middle
完成编码命令和

00:08:45.356 --> 00:08:46.356 A:middle
提交命令缓存以后

00:08:47.446 --> 00:08:49.226 A:middle
GPU 才会开始工作并

00:08:49.226 --> 00:08:51.376 A:middle
执行那些命令

00:08:52.576 --> 00:08:54.566 A:middle
你也可以将这些命令编译成

00:08:54.566 --> 00:08:56.226 A:middle
多个并行的命令缓存

00:08:56.266 --> 00:08:57.816 A:middle
到分开的线程上

00:08:58.466 --> 00:09:02.056 A:middle
现在我已经谈到了

