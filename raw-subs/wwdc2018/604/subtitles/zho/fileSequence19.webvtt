WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.696 --> 00:19:01.546 A:middle
通过 SIMD 类型去实现

00:19:01.976 --> 00:19:02.746 A:middle
你将结构的定义

00:19:02.746 --> 00:19:05.106 A:middle
和头文件都包含在

00:19:05.106 --> 00:19:08.796 A:middle
你的 App 代码和 Metal 文件里

00:19:09.116 --> 00:19:10.756 A:middle
这样的话你着色器里用的

00:19:10.756 --> 00:19:12.566 A:middle
数据布局就能与你的代码

00:19:12.566 --> 00:19:14.036 A:middle
匹配上 因为它们

00:19:14.036 --> 00:19:15.286 A:middle
使用了相同的类型

00:19:16.686 --> 00:19:18.296 A:middle
这样布局不匹配的问题就会

00:19:18.296 --> 00:19:19.976 A:middle
出现的更少

00:19:24.046 --> 00:19:25.556 A:middle
Metal 实现高效的

00:19:25.556 --> 00:19:27.716 A:middle
一个关键因素是

00:19:27.716 --> 00:19:30.456 A:middle
更早地开始工作并且频率更低

00:19:31.376 --> 00:19:33.426 A:middle
所以你将需要在建立 App 的时候

00:19:33.426 --> 00:19:34.896 A:middle
用 Xcode 去编译

00:19:34.896 --> 00:19:35.856 A:middle
Metal 着色器

00:19:36.986 --> 00:19:38.206 A:middle
这运行了一个前端编译

00:19:38.206 --> 00:19:39.866 A:middle
来执行字符串解析

00:19:39.866 --> 00:19:41.826 A:middle
着色器分析和

00:19:41.826 --> 00:19:43.226 A:middle
一些基本的优化

00:19:43.986 --> 00:19:45.526 A:middle
它将你的代码转换成

00:19:45.526 --> 00:19:46.796 A:middle
一个二进制的中间表示

00:19:46.796 --> 00:19:49.456 A:middle
它在任何硬件上都能使用

00:19:50.456 --> 00:19:52.566 A:middle
实际的 GPU 机器代码

00:19:52.566 --> 00:19:54.156 A:middle
直到你的代码在用户系统上运行以前

00:19:54.156 --> 00:19:54.976 A:middle
都不会被构建的

00:19:55.516 --> 00:19:56.726 A:middle
但是这在你的代码运行的时候

00:19:56.726 --> 00:19:58.976 A:middle
移除了一半的编译时间

00:19:59.996 --> 00:20:02.886 A:middle
这个搭建的

