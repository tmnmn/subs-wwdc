WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:01.076 --> 00:52:03.046 A:middle
如果你的 App 是与 CPU 绑定的

00:52:03.046 --> 00:52:05.436 A:middle
那么使你的 CPU 编码多线程工作

00:52:05.436 --> 00:52:07.006 A:middle
会很有用

00:52:07.746 --> 00:52:09.636 A:middle
你可以在不同线程上

00:52:09.636 --> 00:52:11.316 A:middle
同时编码多个

00:52:11.316 --> 00:52:12.346 A:middle
命令缓存

00:52:12.926 --> 00:52:14.776 A:middle
你甚至可以将一个单独的命令缓存

00:52:14.776 --> 00:52:16.556 A:middle
拆分编码到

00:52:16.556 --> 00:52:18.346 A:middle
多个线程中

00:52:18.346 --> 00:52:18.976 A:middle
这是通过使用并行渲染命令编码器实现的

00:52:25.046 --> 00:52:26.926 A:middle
同样的通过计划处理

00:52:26.926 --> 00:52:30.186 A:middle
API 来做的 GPU 计算内置于 Metal 中

00:52:30.776 --> 00:52:33.536 A:middle
你可以用全新的方法去使用 GPU

00:52:34.046 --> 00:52:36.666 A:middle
不用 CPU 去开始的话

00:52:36.666 --> 00:52:38.976 A:middle
你可以利用计算管道来

00:52:38.976 --> 00:52:40.746 A:middle
生成图像的 GPU 数据

00:52:41.336 --> 00:52:43.616 A:middle
通过让 GPU 去生成它自己的数据

00:52:43.616 --> 00:52:45.346 A:middle
你不但可以

00:52:45.346 --> 00:52:47.846 A:middle
减少 CPU 的利用率和同步率

00:52:47.846 --> 00:52:49.776 A:middle
同时你还可以

00:52:49.776 --> 00:52:50.796 A:middle
自由地决定数据对于 GPU

00:52:50.796 --> 00:52:52.106 A:middle
所需的带宽

00:52:53.176 --> 00:52:54.946 A:middle
现在通过这个高带宽

00:52:55.246 --> 00:52:56.846 A:middle
计算处理器你可以

00:52:56.846 --> 00:52:58.456 A:middle
实现更多更复杂的

00:52:58.456 --> 00:52:58.966 A:middle
算法 就像这些

