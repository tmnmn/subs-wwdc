WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.016 --> 00:46:01.856 A:middle
颜色和深度附属品

00:46:02.066 --> 00:46:03.856 A:middle
如果它清晰地为两个

00:46:03.856 --> 00:46:05.906 A:middle
渲染目标指定了加载行为

00:46:05.906 --> 00:46:08.346 A:middle
GPU 就会首先

00:46:08.386 --> 00:46:09.836 A:middle
清除它们的内容

00:46:10.266 --> 00:46:13.246 A:middle
之后 GPU 会在这个编码器中

00:46:13.246 --> 00:46:14.556 A:middle
执行命令

00:46:14.556 --> 00:46:16.346 A:middle
来渲染这些渲染目标

00:46:16.886 --> 00:46:19.616 A:middle
现在你可以指定

00:46:19.616 --> 00:46:21.026 A:middle
在渲染通行的末尾

00:46:21.136 --> 00:46:22.176 A:middle
进行的存储行为

00:46:22.536 --> 00:46:24.486 A:middle
这里对于颜色缓存来说

00:46:24.486 --> 00:46:25.996 A:middle
介于存储行为被存储起来了

00:46:25.996 --> 00:46:28.656 A:middle
它会在渲染通行

00:46:28.686 --> 00:46:30.966 A:middle
的最后保留颜色缓存的内容

00:46:31.576 --> 00:46:33.006 A:middle
然后对于深度附件来说

00:46:33.006 --> 00:46:35.286 A:middle
因为我们说了存储行为是不关心的

00:46:35.286 --> 00:46:37.786 A:middle
所以它会放弃它的内容

00:46:39.006 --> 00:46:40.876 A:middle
所以这些纹理加载和存储

00:46:40.876 --> 00:46:42.806 A:middle
是非常昂贵的

00:46:42.806 --> 00:46:44.376 A:middle
消耗内存带宽的操作

00:46:44.946 --> 00:46:47.346 A:middle
所以慎重地选择并且不要关心

00:46:47.346 --> 00:46:48.416 A:middle
是不是可能

00:46:48.976 --> 00:46:52.246 A:middle
那么这就是你怎么设定你行为的过程

00:46:52.526 --> 00:46:54.876 A:middle
在这个例子里我们指定了清除为

00:46:54.876 --> 00:46:57.966 A:middle
加载行为并且设定了清除颜色

00:46:59.186 --> 00:47:01.236 A:middle
然后这里我们指定了存储行为为存储

