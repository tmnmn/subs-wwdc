WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.816 --> 00:33:01.546 A:middle
和有限的渲染目标集合

00:33:02.156 --> 00:33:03.766 A:middle
这就减少了你 App 

00:33:03.766 --> 00:33:05.486 A:middle
的状态组合

00:33:05.486 --> 00:33:07.706 A:middle
和需要的管道对象的数量

00:33:08.976 --> 00:33:10.786 A:middle
然而不是所有人都知道

00:33:10.846 --> 00:33:12.656 A:middle
他们的 App 会需要哪些管道

00:33:13.286 --> 00:33:14.666 A:middle
一般情况下移植

00:33:14.666 --> 00:33:16.306 A:middle
App 到 Metal 的第一步

00:33:16.306 --> 00:33:17.786 A:middle
是持有一个管道词典

00:33:17.786 --> 00:33:18.396 A:middle
这个词典是之前就已经建立好了的

00:33:19.326 --> 00:33:20.566 A:middle
介于你的 App 会遇到

00:33:20.566 --> 00:33:22.196 A:middle
新的状态组合

00:33:22.196 --> 00:33:23.836 A:middle
它可以将描述符看作是钥匙

00:33:23.836 --> 00:33:25.326 A:middle
去建立和存储管道

00:33:26.626 --> 00:33:28.206 A:middle
一定要记得我刚才说到的这个方法

00:33:28.206 --> 00:33:30.326 A:middle
是一种破解方法

00:33:30.326 --> 00:33:31.406 A:middle
同时你也会想要你的 App 避免

00:33:31.406 --> 00:33:31.856 A:middle
通过这种方法被传输

00:33:32.426 --> 00:33:33.856 A:middle
这是因为创建这些对象中的

00:33:33.856 --> 00:33:35.316 A:middle
任何一个都是很昂贵的

00:33:36.346 --> 00:33:37.196 A:middle
当你想要创建管道对象的时候

00:33:37.196 --> 00:33:39.336 A:middle
GPU 编译器会起到作用

00:33:39.336 --> 00:33:41.396 A:middle
并且翻译和优化

00:33:41.396 --> 00:33:42.786 A:middle
着色器的二进制中间

00:33:42.786 --> 00:33:44.636 A:middle
表示到机器代码

00:33:45.386 --> 00:33:46.356 A:middle
如果你的 App 在你的渲染器循环中

00:33:46.386 --> 00:33:47.986 A:middle
及时地创建了这些

00:33:47.986 --> 00:33:51.046 A:middle
你就很有可能会看到

00:33:51.356 --> 00:33:53.046 A:middle
短时间内

00:33:53.046 --> 00:33:55.786 A:middle
减少帧率

00:33:55.986 --> 00:33:57.366 A:middle
给纹理和缓存

00:33:57.366 --> 00:33:58.906 A:middle
分配内存也是很昂贵的操作

00:33:58.906 --> 00:34:00.526 A:middle
这甚至不是

