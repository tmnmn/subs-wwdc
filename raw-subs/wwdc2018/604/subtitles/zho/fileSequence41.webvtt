WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.956 --> 00:41:00.526 A:middle
三个缓存去更新

00:41:00.526 --> 00:41:02.126 A:middle
我们的动态数据

00:41:02.816 --> 00:41:04.756 A:middle
我们在第一帧里写进缓存

00:41:04.756 --> 00:41:06.846 A:middle
然后之后 GPU 会

00:41:06.846 --> 00:41:07.516 A:middle
从中读取

00:41:08.206 --> 00:41:10.166 A:middle
然后在第二帧里我们为了

00:41:10.166 --> 00:41:11.856 A:middle
避免竞争的情况我们写进

00:41:11.856 --> 00:41:12.666 A:middle
第二个缓存里

00:41:13.326 --> 00:41:15.246 A:middle
类似的我们在第三帧里

00:41:15.246 --> 00:41:18.146 A:middle
写第三个缓存

00:41:18.346 --> 00:41:20.176 A:middle
但是现在我们已经用完了所有

00:41:20.176 --> 00:41:22.406 A:middle
三个缓存并且用尽了我们的缓存池

00:41:23.526 --> 00:41:25.246 A:middle
我们需要等到 GPU 

00:41:25.246 --> 00:41:27.166 A:middle
完成第一帧这样我们才能

00:41:27.166 --> 00:41:28.616 A:middle
在第四帧重复使用

00:41:29.186 --> 00:41:33.736 A:middle
现在这个完成处理器就变得

00:41:33.736 --> 00:41:35.906 A:middle
得心应手了

00:41:35.906 --> 00:41:38.046 A:middle
它会让我们知道什么时候 GPU 完成了

00:41:38.096 --> 00:41:38.406 A:middle
这一帧的执行

00:41:39.096 --> 00:41:41.396 A:middle
所以当第一帧完成以后

00:41:41.396 --> 00:41:43.586 A:middle
我们可以在第四帧里重新使用它的缓存

00:41:44.396 --> 00:41:48.696 A:middle
以此类推 所以我们现在来看一个例子

00:41:49.226 --> 00:41:52.916 A:middle
对于你渲染循环外的

00:41:53.326 --> 00:41:55.316 A:middle
三个缓存实现

00:41:55.316 --> 00:41:56.996 A:middle
第一件事是我们会为三个缓存

00:41:57.086 --> 00:41:57.726 A:middle
创建一个 FIFO 队列

00:41:58.286 --> 00:42:01.006 A:middle
同时我们还需要一个

