WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:58.986 --> 00:51:00.946 A:middle
所以一旦 GPU 完成了

00:51:00.946 --> 00:51:02.586 A:middle
执行这一帧

00:51:02.586 --> 00:51:04.116 A:middle
你就可以在显示上看到这一帧

00:51:04.646 --> 00:51:07.606 A:middle
这样的话通过 Metal

00:51:07.606 --> 00:51:09.286 A:middle
将你的渲染展现出来

00:51:09.286 --> 00:51:10.596 A:middle
就变得相当的快了

00:51:11.156 --> 00:51:14.166 A:middle
但是我还有几个小建议与你们分享

00:51:15.366 --> 00:51:17.296 A:middle
将一个渲染器

00:51:17.966 --> 00:51:19.936 A:middle
传递到 Metal 是可行的

00:51:19.936 --> 00:51:21.436 A:middle
IOSurface 和 CVPixelBuffer

00:51:21.436 --> 00:51:25.696 A:middle
API 可以被用来创建纹理

00:51:25.726 --> 00:51:27.596 A:middle
这个纹理可以在

00:51:27.596 --> 00:51:29.266 A:middle
OpenGL 和 Metal 之间共享

00:51:30.376 --> 00:51:32.586 A:middle
这就允许你在 OpenGL 里面

00:51:32.586 --> 00:51:34.596 A:middle
渲染一个纹理

00:51:34.596 --> 00:51:36.746 A:middle
然后从 Metal 里读取

00:51:36.746 --> 00:51:36.926 A:middle
反之亦然

00:51:36.926 --> 00:51:39.876 A:middle
所以一些 App 可以

00:51:39.876 --> 00:51:41.616 A:middle
利用这一点去

00:51:41.616 --> 00:51:43.476 A:middle
逐步移植

00:51:43.756 --> 00:51:45.076 A:middle
特别是当存在搭建在 OpenGL 里的

00:51:45.076 --> 00:51:46.466 A:middle
插件结构的时候

00:51:47.206 --> 00:51:49.546 A:middle
所以这里有一个关联到这个会话的

00:51:49.686 --> 00:51:51.796 A:middle
示例代码准确地展现了

00:51:51.796 --> 00:51:52.846 A:middle
如何做到这一点

00:51:55.416 --> 00:51:56.796 A:middle
现在你已经有了一个 Metal App

00:51:56.796 --> 00:51:58.806 A:middle
你可以采用所有

00:51:58.806 --> 00:51:59.906 A:middle
新的 Metal 特性

