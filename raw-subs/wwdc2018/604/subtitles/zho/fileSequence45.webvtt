WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.956 --> 00:45:00.906 A:middle
来反映这一点

00:45:01.316 --> 00:45:03.636 A:middle
现在这个编码器给出的所有绘图请求

00:45:03.636 --> 00:45:05.596 A:middle
会渲染进

00:45:05.596 --> 00:45:06.936 A:middle
这些渲染目标里

00:45:08.566 --> 00:45:09.816 A:middle
当你想要向不同的渲染目标

00:45:09.816 --> 00:45:11.406 A:middle
绘图的时候

00:45:11.576 --> 00:45:13.246 A:middle
你可以结束这个渲染通行

00:45:13.246 --> 00:45:14.226 A:middle
然后开启一个新的

00:45:14.756 --> 00:45:18.936 A:middle
这就是我们创建

00:45:18.936 --> 00:45:20.286 A:middle
一个渲染通行描述符

00:45:20.286 --> 00:45:23.876 A:middle
并且绑定颜色和深度关系的地方

00:45:25.166 --> 00:45:27.036 A:middle
现在你可以使用那个描述符

00:45:27.086 --> 00:45:29.716 A:middle
并且创建一个渲染命令编码器

00:45:30.436 --> 00:45:33.116 A:middle
现在所有由这个编码器发出的图画

00:45:33.116 --> 00:45:34.966 A:middle
都会被渲染到这些目标

00:45:37.216 --> 00:45:39.426 A:middle
另外在 Metal 里

00:45:39.426 --> 00:45:41.856 A:middle
你也可以为这些附件提供

00:45:41.856 --> 00:45:43.546 A:middle
加载和存储行为

00:45:43.786 --> 00:45:46.126 A:middle
这是为了优化 GPU 的带宽用量

00:45:48.236 --> 00:45:50.076 A:middle
所以这些加载和存储的行为

00:45:50.076 --> 00:45:52.086 A:middle
允许你去控制

00:45:52.086 --> 00:45:53.796 A:middle
纹理内容会在渲染通行

00:45:53.956 --> 00:45:55.876 A:middle
之前和之后被怎样处理

00:45:56.266 --> 00:45:59.016 A:middle
现在我们有了为渲染通行产生的

00:45:59.016 --> 00:46:01.856 A:middle
颜色和深度附属品

