WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.996 --> 00:20:02.886 A:middle
这个搭建的

00:20:02.886 --> 00:20:05.286 A:middle
二进制中间表示

00:20:05.376 --> 00:20:07.926 A:middle
是通过 Metal 库文件实现的

00:20:08.576 --> 00:20:10.376 A:middle
Xcode 会将所有 Metal

00:20:10.376 --> 00:20:11.656 A:middle
着色器源文件编译进

00:20:11.776 --> 00:20:13.856 A:middle
一个默认的 Metal 库

00:20:13.856 --> 00:20:16.256 A:middle
为了运行时检索

00:20:16.256 --> 00:20:17.276 A:middle
将他放进你的 App 包中

00:20:17.936 --> 00:20:20.686 A:middle
除了有 Xcode 建立的着色器

00:20:20.686 --> 00:20:23.286 A:middle
你也可以在 App

00:20:23.286 --> 00:20:24.726 A:middle
运行过程中创建着色器

00:20:26.126 --> 00:20:27.436 A:middle
一些 OpenGL App 在运行过程中

00:20:27.436 --> 00:20:28.446 A:middle
创建着色器是通过

00:20:28.546 --> 00:20:30.096 A:middle
连接字符串或者运行

00:20:30.096 --> 00:20:31.616 A:middle
源代码生成器实现的

00:20:32.646 --> 00:20:33.846 A:middle
要在构建期间

00:20:33.846 --> 00:20:35.826 A:middle
获取所有着色器会非常有挑战性

00:20:36.846 --> 00:20:38.756 A:middle
但是为了特定的目的或者

00:20:38.856 --> 00:20:40.476 A:middle
如果构建时间编译

00:20:40.476 --> 00:20:41.486 A:middle
在你的 App 里并不可能实现

00:20:41.876 --> 00:20:43.486 A:middle
那么 Metal 是可以像 OpenGL 一样

00:20:43.486 --> 00:20:45.326 A:middle
在运行期间通过源文件

00:20:45.326 --> 00:20:45.836 A:middle
编译着色器的

00:20:46.386 --> 00:20:49.346 A:middle
然而 这样做

00:20:49.346 --> 00:20:50.896 A:middle
会有很多不好的地方

00:20:50.896 --> 00:20:52.416 A:middle
最明显的是你会放弃

00:20:52.416 --> 00:20:53.636 A:middle
节约性能

00:20:53.636 --> 00:20:54.986 A:middle
因为这在用户系统之外工作

00:20:56.216 --> 00:20:57.206 A:middle
你不会在构建期间

00:20:57.206 --> 00:20:58.546 A:middle
看见任何的着色器编译错误

00:20:58.546 --> 00:21:00.776 A:middle
所以你只能在你运行代码的时候才发现

