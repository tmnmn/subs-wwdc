WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.176 --> 00:43:01.186 A:middle
在我们提交这个命令缓存给 GPU 之前

00:43:01.186 --> 00:43:03.066 A:middle
我们会给这一帧添加

00:43:03.066 --> 00:43:05.156 A:middle
一个完成处理器

00:43:05.156 --> 00:43:06.556 A:middle
到命令缓存里

00:43:07.186 --> 00:43:10.066 A:middle
在添加完 完成处理器之后

00:43:10.066 --> 00:43:12.026 A:middle
我们会提交这个命令缓存给 GPU

00:43:12.926 --> 00:43:16.036 A:middle
现在一旦 GPU 完成了

00:43:16.036 --> 00:43:17.806 A:middle
执行这一帧

00:43:17.806 --> 00:43:19.846 A:middle
我们的完成处理器就会被调用

00:43:19.846 --> 00:43:22.006 A:middle
处理器之后就会在这一帧发出信号

00:43:23.766 --> 00:43:26.156 A:middle
这就允许 CPU 去重复使用它的缓存

00:43:26.186 --> 00:43:27.986 A:middle
给新的帧编码

00:43:28.786 --> 00:43:30.666 A:middle
所以这是一个简单的

00:43:30.666 --> 00:43:32.196 A:middle
三缓存实现

00:43:32.196 --> 00:43:33.846 A:middle
你可以用它来执行任何

00:43:33.846 --> 00:43:35.996 A:middle
动态数据的资源更新

00:43:36.476 --> 00:43:39.376 A:middle
现在我们有了命令缓存

00:43:39.376 --> 00:43:41.426 A:middle
同时我们还处理了

00:43:41.726 --> 00:43:44.246 A:middle
资源更新现在我们

00:43:44.246 --> 00:43:46.136 A:middle
来多说一点关于渲染通行编码器

00:43:46.626 --> 00:43:48.306 A:middle
它是你将会在你的绘图请求中

00:43:48.306 --> 00:43:49.796 A:middle
用到的编码

00:43:50.276 --> 00:43:52.496 A:middle
就像 Dan 之前提到的

00:43:52.496 --> 00:43:56.906 A:middle
命令编码器在命令缓存里

00:43:57.146 --> 00:43:59.046 A:middle
将 API 请求转换成

00:43:59.046 --> 00:43:59.926 A:middle
GPU 硬件命令

00:43:59.926 --> 00:44:02.936 A:middle
我将会谈到渲染命令编码器

