WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.816 --> 00:36:01.976 A:middle
这样的话你就可以去考虑

00:36:02.146 --> 00:36:03.396 A:middle
将你的帧分开到

00:36:03.396 --> 00:36:04.606 A:middle
多个命令缓存内

00:36:05.006 --> 00:36:08.086 A:middle
然后 GPU 就可以在

00:36:08.086 --> 00:36:09.796 A:middle
CPU 编译其他命令缓存的时候开始

00:36:10.086 --> 00:36:11.886 A:middle
执行一个命令缓存

00:36:13.346 --> 00:36:15.106 A:middle
或者将你的帧

00:36:15.106 --> 00:36:17.386 A:middle
分割编译进多个线程

00:36:17.386 --> 00:36:19.136 A:middle
这就需要你去

00:36:19.136 --> 00:36:20.436 A:middle
在每一帧里都创建一个命令缓存

00:36:20.436 --> 00:36:23.196 A:middle
但是一定要记住

00:36:23.196 --> 00:36:25.056 A:middle
每一个命令缓存都会需要

00:36:25.056 --> 00:36:27.056 A:middle
额外的 CPU 消耗

00:36:27.496 --> 00:36:30.066 A:middle
所以你最好尽可能的少用

00:36:32.216 --> 00:36:34.306 A:middle
Metal 也提供 API 来

00:36:34.356 --> 00:36:36.436 A:middle
注册一个完整的回调

00:36:37.136 --> 00:36:38.846 A:middle
它会在 GPU 完成执行

00:36:38.846 --> 00:36:41.386 A:middle
这些命令缓存的时候被涉及到

00:36:41.986 --> 00:36:43.686 A:middle
让我来给你们展现一下

00:36:43.686 --> 00:36:44.766 A:middle
这些 API

00:36:45.216 --> 00:36:48.316 A:middle
你将会在你的

00:36:48.316 --> 00:36:49.516 A:middle
App 初始化方法里

00:36:49.516 --> 00:36:50.856 A:middle
创建命令队列

00:36:51.356 --> 00:36:53.246 A:middle
现在 在渲染循环里你将会用到它

00:36:53.246 --> 00:36:55.676 A:middle
去获取命令缓存

00:36:55.676 --> 00:36:57.386 A:middle
这是通过调用它的命令缓存方法来实现的

00:36:57.946 --> 00:37:00.156 A:middle
现在你要把这些命令编译进

