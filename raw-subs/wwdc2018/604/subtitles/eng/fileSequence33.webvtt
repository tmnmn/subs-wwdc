WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.816 --> 00:33:01.546 A:middle
limited set of render targets.

00:33:02.156 --> 00:33:03.766 A:middle
This reduces the combinations of

00:33:03.766 --> 00:33:05.486 A:middle
state your app uses and the

00:33:05.486 --> 00:33:07.116 A:middle
number of pipeline objects

00:33:07.556 --> 00:33:07.706 A:middle
needed.

00:33:08.976 --> 00:33:10.786 A:middle
However, not everyone knows up

00:33:10.846 --> 00:33:12.286 A:middle
front which pipelines their app

00:33:12.286 --> 00:33:12.656 A:middle
will need.

00:33:13.286 --> 00:33:14.666 A:middle
A common first step in porting

00:33:14.666 --> 00:33:16.306 A:middle
an app to Metal is to keep a

00:33:16.306 --> 00:33:17.786 A:middle
dictionary of pipelines you've

00:33:17.786 --> 00:33:18.396 A:middle
already made.

00:33:19.326 --> 00:33:20.566 A:middle
As your app encounters new

00:33:20.566 --> 00:33:22.196 A:middle
combinations of state it can

00:33:22.196 --> 00:33:23.836 A:middle
build and store pipelines using

00:33:23.836 --> 00:33:25.326 A:middle
the descriptors as keys.

00:33:26.626 --> 00:33:28.206 A:middle
Keep in mind this solution I

00:33:28.206 --> 00:33:30.326 A:middle
mentioned is kind of a hack and

00:33:30.326 --> 00:33:31.406 A:middle
you want to avoid shipping your

00:33:31.406 --> 00:33:31.856 A:middle
app with it.

00:33:32.426 --> 00:33:33.856 A:middle
This is because creating any of

00:33:33.856 --> 00:33:35.316 A:middle
these objects is expensive.

00:33:36.346 --> 00:33:37.196 A:middle
When you create a pipeline

00:33:37.196 --> 00:33:39.336 A:middle
object the GPU compiler kicks in

00:33:39.336 --> 00:33:41.396 A:middle
and translates and optimizes the

00:33:41.396 --> 00:33:42.786 A:middle
shader's binary intermediate

00:33:42.786 --> 00:33:44.636 A:middle
representation to machine code.

00:33:45.386 --> 00:33:46.356 A:middle
If your app creates these

00:33:46.386 --> 00:33:47.986 A:middle
just-in-time during its render

00:33:47.986 --> 00:33:51.046 A:middle
loop you're likely to see stalls

00:33:51.356 --> 00:33:53.046 A:middle
and a reduced frame rate for a

00:33:53.046 --> 00:33:55.786 A:middle
short period of time.

00:33:55.986 --> 00:33:57.366 A:middle
Allocating memory for textures

00:33:57.366 --> 00:33:58.906 A:middle
and buffers is also an expensive

00:33:58.906 --> 00:34:00.526 A:middle
operation, that's not even

