WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.638 --> 00:19:00.541 align:start position:30% line:-2
ストラクチャに
使用することができます

00:19:01.742 --> 00:19:04.244 align:start position:29% line:-2
アプリケーションコードと
Metalファイルの

00:19:04.778 --> 00:19:08.749 align:start position:27% line:-2
両方にストラクチャの定義を
ヘッダー内に設定します

00:19:08.849 --> 00:19:11.852 align:start position:27% line:-2
同じタイプを使っているので
シェーダが使う―

00:19:11.985 --> 00:19:15.756 align:start position:34% line:-2
データレイアウトと
コードが合致します

00:19:16.490 --> 00:19:20.494 align:start position:23% line:-2
レイアウトの不一致によるバグが
ずっと少なくなります

00:19:23.730 --> 00:19:27.301 align:start position:29% line:-1
Metalが効果的なのは

00:19:27.401 --> 00:19:30.804 align:start position:30% line:-2
作業を速めに
少なく実行するからです

00:19:31.171 --> 00:19:34.341 align:start position:25% line:-2
Metalシェーダファイルの
コンパイルには

00:19:34.441 --> 00:19:36.243 align:start position:32% line:-1
Xcodeを使います

00:19:36.810 --> 00:19:38.912 align:start position:30% line:-2
これで前端コンパイルが
実行され

00:19:39.012 --> 00:19:43.684 align:start position:27% line:-2
構文解析 シェーダ解析や
基本的な最適化が行われます

00:19:43.784 --> 00:19:47.454 align:start position:27% line:-2
コードはバイナリ中間表示へ
変換され

00:19:47.554 --> 00:19:49.957 align:start position:30% line:-2
あらゆるハードウェアで
使用できます

00:19:50.224 --> 00:19:55.195 align:start position:20% line:-2
アプリケーションが動くまで
実際のGPUコードは作られませんが

00:19:55.295 --> 00:19:59.900 align:start position:27% line:-2
アプリケーションが動く際の
コンパイル時間が半減します

