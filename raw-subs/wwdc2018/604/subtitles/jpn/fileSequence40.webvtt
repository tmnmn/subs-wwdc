WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.767 --> 00:40:04.238 align:start position:27% line:-2
これは明らかに競合状態で
結果がどうなるか不明確です

00:40:05.172 --> 00:40:10.144 align:start position:23% line:-2
アプリケーションを
修整する方法がいくつかあります

00:40:11.511 --> 00:40:14.281 align:start position:32% line:-2
最も簡単な方法として
コマンドバッファの

00:40:14.381 --> 00:40:17.618 align:start position:9% line:-2
waitUntilCompletedメソッドを
各フレームの後にコールします

00:40:19.753 --> 00:40:23.490 align:start position:25% line:-2
しかし次のフレームのために
このバッファに上書きする前に

00:40:23.590 --> 00:40:28.395 align:start position:25% line:-2
GPUの読み込みが終わるまで
待たなければなりません

00:40:28.962 --> 00:40:34.468 align:start position:27% line:-2
このようにCPUとGPUの
使用効率が非常に悪く

00:40:34.568 --> 00:40:38.539 align:start position:34% line:-2
出荷コードでは
避けたいところです

00:40:38.772 --> 00:40:43.110 align:start position:21% line:-2
ただMetalアプリケーションを
起動しておくと非常に便利です

00:40:43.577 --> 00:40:50.050 align:start position:27% line:-2
このようなデータ競合を
検出することもできるのです

00:40:51.885 --> 00:40:57.191 align:start position:23% line:-2
リソースアップデートの同期は
マルチバッファで効率化できます

00:40:57.357 --> 00:41:02.429 align:start position:29% line:-2
動的データアップデートを
３つのバッファで行います

