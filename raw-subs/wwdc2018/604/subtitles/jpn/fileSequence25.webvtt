WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.733 --> 00:25:04.071 align:start position:27% line:-1
CPUが干渉しない最適化が

00:25:04.171 --> 00:25:06.607 align:start position:38% line:-1
可能になります

00:25:06.707 --> 00:25:11.445 align:start position:25% line:-2
このタイプのテクスチャは
GPUだけが内容を満たせます

00:25:12.412 --> 00:25:17.785 align:start position:25% line:-2
ブリットエンコーダで
CPUから書き込みもできます

00:25:17.885 --> 00:25:21.388 align:start position:25% line:-2
共有ストレージを使った
中間リソースからコピーします

00:25:22.256 --> 00:25:24.291 align:start position:27% line:-1
専用ビデオメモリがある場合

00:25:24.391 --> 00:25:28.862 align:start position:23% line:-2
ストレージ設定でリソースは
ビデオメモリに割り当てられます

00:25:30.397 --> 00:25:35.068 align:start position:14% line:-2
macOSでは３つ目のストレージ
managed storageが使えます

00:25:35.502 --> 00:25:39.473 align:start position:30% line:-2
GPU CPU双方から
データアクセスできます

00:25:39.573 --> 00:25:41.608 align:start position:30% line:-1
専用ビデオメモリの場合

00:25:41.708 --> 00:25:47.047 align:start position:20% line:-2
Metalはミラードメモリを作成し
アクセスを効率化します

00:25:47.714 --> 00:25:51.818 align:start position:29% line:-2
GPU CPUのデータが
確実にシンクロするように

00:25:51.919 --> 00:25:54.521 align:start position:32% line:-2
コールははっきりして
いなければなりません

00:25:57.758 --> 00:26:00.828 align:start position:30% line:-1
テクスチャ作成の例です

