WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.707 --> 00:39:03.544 align:start position:38% line:-2
最適同期戦略を
採用できます

00:39:04.077 --> 00:39:06.847 align:start position:38% line:-2
多くの場合
一番いい方法は

00:39:06.947 --> 00:39:11.752 align:start position:18% line:-2
CPUとGPUが同時に同じバッファに
アクセスしないよう―

00:39:11.852 --> 00:39:15.522 align:start position:23% line:-2
共有リソースにマルチバッファを
活用することです

00:39:17.624 --> 00:39:21.628 align:start position:16% line:-2
ここではOpenGLアプリケーションを
Metalに移植したところで

00:39:21.729 --> 00:39:28.202 align:start position:23% line:-2
これら動的データアップデートに
シングルバッファを用いています

00:39:28.535 --> 00:39:32.372 align:start position:21% line:-2
まだ同期メソッドを
アプリケーションに適用しておらず

00:39:32.472 --> 00:39:35.342 align:start position:29% line:-1
次のようなことが起きます

00:39:36.677 --> 00:39:41.381 align:start position:21% line:-2
アプリケーションは最初の
フレームのコマンドを生成しながら

00:39:41.481 --> 00:39:44.318 align:start position:29% line:-2
バッファに書き込み
これをGPUに送信します

00:39:45.152 --> 00:39:50.190 align:start position:23% line:-2
GPUはこのコマンドバッファを
読んで処理を進めます

00:39:51.959 --> 00:39:55.429 align:start position:30% line:-2
次のフレームのために
バッファを更新する一方

00:39:55.529 --> 00:39:58.732 align:start position:25% line:-2
GPUは まだそのバッファを
読んでいる状態です

00:39:59.767 --> 00:40:04.238 align:start position:27% line:-2
これは明らかに競合状態で
結果がどうなるか不明確です

