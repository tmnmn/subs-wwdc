WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.613 --> 00:48:01.348 align:start position:34% line:-1
最後にドローします

00:48:02.316 --> 00:48:05.853 align:start position:30% line:-2
こちらのMetal版は
より明示的であるため

00:48:05.953 --> 00:48:10.124 align:start position:25% line:-2
コード列が増えますが
OpenGLとよく似ています

00:48:10.724 --> 00:48:13.994 align:start position:27% line:-2
まずレンダターゲットを含む
パスディスクリプターで

00:48:14.094 --> 00:48:16.663 align:start position:27% line:-2
レンダコマンドエンコーダを
作成します

00:48:17.531 --> 00:48:21.001 align:start position:27% line:-2
シェーダを含むパイプライン
オブジェクトを設定します

00:48:22.002 --> 00:48:26.406 align:start position:23% line:-2
次は頂点シェーダにアクセスする
バッファの設定ですが

00:48:26.507 --> 00:48:29.476 align:start position:34% line:-2
ドローに使う頂点が
入っています

00:48:30.277 --> 00:48:33.213 align:start position:21% line:-2
Metalは頂点かユニフォームか
中身でバッファを区別しません

00:48:33.313 --> 00:48:37.484 align:start position:21% line:-2
Metalは頂点かユニフォームか
中身でバッファを区別しません

00:48:37.618 --> 00:48:41.789 align:start position:25% line:-2
なのでユニフォームバッファの
設定に同じAPIを使います

00:48:42.356 --> 00:48:45.759 align:start position:25% line:-2
最初のコールで頂点シェーダが
バッファアクセスをして

00:48:45.859 --> 00:48:49.096 align:start position:27% line:-2
次はフラグメントシェーダが
アクセスします

00:48:50.230 --> 00:48:54.268 align:start position:23% line:-2
さらにサンプルするフラグメント
シェーダのテクスチャを決めます

00:48:55.569 --> 00:48:56.937 align:start position:34% line:-1
そしてドローします

00:48:58.105 --> 00:49:01.542 align:start position:14% line:-2
最後にendEncodingをエンコーダ
オブジェクトにコールして

