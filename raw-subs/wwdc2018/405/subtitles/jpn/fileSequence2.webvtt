WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:56.383 --> 00:02:01.088 align:start position:29% line:-2
他にもiOSやSwift
Ｃ言語に対応

00:02:01.655 --> 00:02:05.292 align:start position:23% line:-2
更にInstrumentsでも
使えます

00:02:05.392 --> 00:02:08.428 align:start position:29% line:-2
つまりsignpostの
データを取り込んで

00:02:08.829 --> 00:02:12.399 align:start position:34% line:-2
プログラムの動きを
確認できるのです

00:02:13.367 --> 00:02:15.836 align:start position:29% line:-1
まずは歴史をお話しします

00:02:16.470 --> 00:02:19.273 align:start position:32% line:-2
OSLogは２年前に
登場しました

00:02:19.606 --> 00:02:22.843 align:start position:32% line:-1
最新のロギング機能で

00:02:22.943 --> 00:02:26.280 align:start position:32% line:-2
システムから
デバッグ情報を得ます

00:02:26.613 --> 00:02:31.885 align:start position:29% line:-2
効率性とプライバシーを
考慮して作られたものです

00:02:32.653 --> 00:02:35.055 align:start position:25% line:-1
これがOSLogのコードです

00:02:35.222 --> 00:02:39.426 align:start position:25% line:-2
“Hello world”を
表示させてみます

00:02:40.294 --> 00:02:43.564 align:start position:32% line:-2
パフォーマンスの
ユースケースのために

00:02:43.664 --> 00:02:47.034 align:start position:29% line:-2
signpostは
OSLogのAPIを拡張

00:02:47.134 --> 00:02:49.102 align:start position:36% line:-2
パフォーマンスに
関する情報が

00:02:49.303 --> 00:02:51.738 align:start position:34% line:-2
デベロッパツールに
統合されます

00:02:51.972 --> 00:02:57.344 align:start position:18% line:-2
そこでコードを加え
Instrumentsを実行させます

00:02:58.412 --> 00:03:02.316 align:start position:20% line:-2
プログラムの動きと
signpostのアクティビティが

