WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.346 --> 00:06:00.806 A:middle
通过调用的 os_signpost 函数

00:06:00.806 --> 00:06:02.756 A:middle
注释或标记过的

00:06:02.966 --> 00:06:04.606 A:middle
开始点和结束点

00:06:05.026 --> 00:06:07.416 A:middle
所以在我们的时间线上

00:06:07.416 --> 00:06:08.086 A:middle
看起来就像这样

00:06:08.086 --> 00:06:09.676 A:middle
在每段工作的开始

00:06:09.676 --> 00:06:11.696 A:middle
我们放了一个

00:06:11.696 --> 00:06:12.246 A:middle
os_signpost

00:06:12.366 --> 00:06:13.336 A:middle
在每段工作的结束

00:06:13.336 --> 00:06:14.776 A:middle
我们放了一个 os_signpost

00:06:15.086 --> 00:06:16.646 A:middle
因为这些字符串常量

00:06:16.646 --> 00:06:17.756 A:middle
在开始和结束的调用点上

00:06:17.756 --> 00:06:19.286 A:middle
按顺序排好了

00:06:19.286 --> 00:06:20.856 A:middle
我们可以将它俩匹配

00:06:20.856 --> 00:06:23.266 A:middle
但是如果我们想要

00:06:23.266 --> 00:06:25.346 A:middle
测量整段操作

00:06:25.346 --> 00:06:26.836 A:middle
完成全部刷新

00:06:26.836 --> 00:06:27.866 A:middle
所花的时间呢

00:06:28.526 --> 00:06:31.236 A:middle
在我们代码里

00:06:31.236 --> 00:06:32.966 A:middle
我们只需添加另一对 os_signpost

00:06:32.966 --> 00:06:34.646 A:middle
begin 和 end 调用

00:06:34.836 --> 00:06:35.346 A:middle
非常简单

00:06:35.836 --> 00:06:37.196 A:middle
这次我赋予了一个

00:06:37.306 --> 00:06:38.446 A:middle
不同的字符串常量

00:06:38.556 --> 00:06:39.756 A:middle
所以就有一个不一样的 signpost 名称

00:06:39.836 --> 00:06:41.616 A:middle
这次用了 “Refresh Panel”

00:06:41.616 --> 00:06:43.206 A:middle
来表示这是一个独立的间隔时间

00:06:43.206 --> 00:06:45.166 A:middle
和循环里的间隔时间相独立

00:06:47.236 --> 00:06:50.536 A:middle
在我们的时间线上

00:06:50.536 --> 00:06:51.846 A:middle
我们标记了另外两个

00:06:51.846 --> 00:06:52.656 A:middle
signposts

00:06:54.166 --> 00:06:55.606 A:middle
而匹配的字符串常量

00:06:55.606 --> 00:06:57.296 A:middle
“Refresh Panel”

00:06:57.296 --> 00:06:58.426 A:middle
让系统知道

00:06:58.426 --> 00:07:01.326 A:middle
这两点是相关联的

