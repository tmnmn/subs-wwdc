WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.106 --> 00:16:00.596 A:middle
有条件地发生

00:16:01.076 --> 00:16:02.866 A:middle
所以我要么将它分配给

00:16:02.976 --> 00:16:04.546 A:middle
普通的 os_log 构造函数

00:16:05.066 --> 00:16:05.906 A:middle
或者把它分配给

00:16:05.906 --> 00:16:07.196 A:middle
禁用的日志句柄

00:16:07.776 --> 00:16:11.126 A:middle
如果我们采取第一种方法

00:16:11.126 --> 00:16:12.776 A:middle
所有的 os_signpost 调用都会

00:16:12.776 --> 00:16:14.546 A:middle
按照我刚刚说的一样进行

00:16:14.546 --> 00:16:15.996 A:middle
但如果我们采取第二种方法

00:16:15.996 --> 00:16:17.256 A:middle
这些 os_signpost 调用都会变成

00:16:17.256 --> 00:16:18.026 A:middle
接近于空操作

00:16:18.876 --> 00:16:21.696 A:middle
我刚刚说过

00:16:21.696 --> 00:16:22.886 A:middle
我没有必要调用任何我的

00:16:22.886 --> 00:16:24.196 A:middle
调用 我没有必要改变

00:16:24.196 --> 00:16:25.126 A:middle
我的任何调用

00:16:25.126 --> 00:16:26.756 A:middle
我只需要改变初始化

00:16:27.566 --> 00:16:29.346 A:middle
我让初始化条件

00:16:29.346 --> 00:16:31.446 A:middle
依赖于环境变量

00:16:31.696 --> 00:16:32.716 A:middle
你可以在

00:16:32.716 --> 00:16:34.046 A:middle
对程序进行调试时

00:16:34.046 --> 00:16:35.136 A:middle
在 Xcode scheme 中

00:16:35.136 --> 00:16:37.236 A:middle
对此进行设置

00:16:37.836 --> 00:16:39.126 A:middle
我刚才说你没有必要

00:16:39.126 --> 00:16:40.346 A:middle
在调用处内进行改变

00:16:40.346 --> 00:16:41.326 A:middle
但是你可能有一些

00:16:41.326 --> 00:16:44.506 A:middle
用于特定 instrumentation 的功能

00:16:44.586 --> 00:16:46.346 A:middle
也就是说虽然代价高昂

00:16:46.346 --> 00:16:47.586 A:middle
但可能只有在调试时

00:16:47.586 --> 00:16:48.086 A:middle
才使用它

00:16:48.926 --> 00:16:50.976 A:middle
这种情况下你可以检查一个

00:16:50.976 --> 00:16:52.486 A:middle
特定的日志句柄

00:16:52.486 --> 00:16:53.736 A:middle
看看在启用 signpost

00:16:54.076 --> 00:16:55.536 A:middle
属性中是否启用了 signpost

00:16:56.036 --> 00:16:57.256 A:middle
启用了 signpost 的属性

00:16:57.256 --> 00:16:58.656 A:middle
可以用来控制

00:16:58.656 --> 00:17:00.526 A:middle
额外的操作

