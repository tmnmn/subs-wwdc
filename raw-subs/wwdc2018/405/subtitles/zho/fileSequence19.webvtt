WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.916 --> 00:19:01.476 A:middle
你会注意到最开始

00:19:01.566 --> 00:19:03.216 A:middle
是白色的背景然后

00:19:03.216 --> 00:19:04.896 A:middle
图片随后出现 填充了背景

00:19:04.896 --> 00:19:06.486 A:middle
对于这类 App

00:19:06.486 --> 00:19:08.536 A:middle
这是非常常见的现象

00:19:08.536 --> 00:19:09.526 A:middle
有时它植入了

00:19:09.526 --> 00:19:12.466 A:middle
future 或者 promise

00:19:12.466 --> 00:19:13.796 A:middle
但是这个现象 虽然它对

00:19:13.896 --> 00:19:15.746 A:middle
性能很有帮助

00:19:15.746 --> 00:19:17.496 A:middle
它也很难被配置

00:19:17.556 --> 00:19:19.896 A:middle
原因在于有很多异步的

00:19:19.896 --> 00:19:21.486 A:middle
活动在同时进行

00:19:21.876 --> 00:19:23.796 A:middle
当用户滑动时

00:19:23.796 --> 00:19:25.996 A:middle
有一些下载在同时进行

00:19:25.996 --> 00:19:27.316 A:middle
如果用户像这样

00:19:27.316 --> 00:19:29.226 A:middle
飞快地滑动时那么

00:19:29.226 --> 00:19:31.646 A:middle
在图像单元重新被使用

00:19:31.776 --> 00:19:33.536 A:middle
之前下载可能还没有完成

00:19:34.066 --> 00:19:35.826 A:middle
那么我们就得取消下载

00:19:36.076 --> 00:19:37.986 A:middle
如果我们取消失败了

00:19:37.986 --> 00:19:40.236 A:middle
那么一些下载就会

00:19:40.236 --> 00:19:41.326 A:middle
并行运行但是我们

00:19:41.326 --> 00:19:42.276 A:middle
并不想这样

00:19:42.936 --> 00:19:44.196 A:middle
让我们看看如何

00:19:44.196 --> 00:19:46.416 A:middle
使用 signposts 来分析

00:19:46.416 --> 00:19:47.866 A:middle
我们的 Trailblazer 的 App

00:19:48.546 --> 00:19:51.326 A:middle
在路线单元中

00:19:51.326 --> 00:19:53.026 A:middle
有一个方式叫做

00:19:53.206 --> 00:19:54.956 A:middle
startImageDownload

00:19:55.286 --> 00:19:56.486 A:middle
当我们需要下载新图像时

00:19:56.486 --> 00:19:58.736 A:middle
它就会被调用

00:19:58.996 --> 00:20:00.726 A:middle
它传递了需要被下载的

