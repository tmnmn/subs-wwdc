WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.416 --> 00:14:00.776 A:middle
触发事件比如

00:14:00.776 --> 00:14:02.336 A:middle
一次用户界面交互

00:14:02.336 --> 00:14:04.196 A:middle
比如有人刚滑动屏幕

00:14:04.196 --> 00:14:05.276 A:middle
来更新界面

00:14:05.816 --> 00:14:07.206 A:middle
虽然如果你真的在

00:14:07.206 --> 00:14:08.306 A:middle
研究一个性能问题

00:14:08.336 --> 00:14:09.846 A:middle
他们可能滑动了很多次

00:14:09.846 --> 00:14:12.436 A:middle
所以这可能是你看到的

00:14:14.786 --> 00:14:17.136 A:middle
如果你启用了 signpost

00:14:17.636 --> 00:14:18.686 A:middle
默认情况下它们是开启的

00:14:19.396 --> 00:14:20.366 A:middle
但是我想讲讲

00:14:20.486 --> 00:14:22.216 A:middle
有条件地开启和关闭它们

00:14:23.986 --> 00:14:25.546 A:middle
首先我想强调

00:14:25.546 --> 00:14:26.766 A:middle
我们把 signpost 设计得

00:14:26.906 --> 00:14:27.536 A:middle
轻便小巧

00:14:28.066 --> 00:14:29.986 A:middle
这意味着我们做了很多

00:14:29.986 --> 00:14:32.146 A:middle
来优化它们的启动时间

00:14:32.666 --> 00:14:33.376 A:middle
我们通过优化了编译器

00:14:33.376 --> 00:14:34.796 A:middle
使得任务能

00:14:34.796 --> 00:14:36.546 A:middle
提前进行而非

00:14:36.606 --> 00:14:37.436 A:middle
在运行时

00:14:37.926 --> 00:14:39.416 A:middle
我们还推迟了很多事情

00:14:39.416 --> 00:14:40.796 A:middle
使它们可以在 Instruments

00:14:40.796 --> 00:14:41.656 A:middle
后台运行

00:14:41.946 --> 00:14:43.406 A:middle
这意味着当

00:14:43.406 --> 00:14:44.376 A:middle
在发送 signposts 时

00:14:44.376 --> 00:14:46.416 A:middle
它们只会占用非常少的系统资源

00:14:46.876 --> 00:14:47.896 A:middle
我们这么做是因为我们想

00:14:47.896 --> 00:14:49.456 A:middle
最小化它给你的代码运行

00:14:49.456 --> 00:14:50.436 A:middle
带来的影响

00:14:50.916 --> 00:14:52.096 A:middle
我们这么做还因为

00:14:52.096 --> 00:14:53.236 A:middle
我们想确保即使

00:14:53.236 --> 00:14:55.076 A:middle
你的时间跨度非常小

00:14:55.076 --> 00:14:56.946 A:middle
你也能发送很多

00:14:56.946 --> 00:14:57.866 A:middle
signpost 来得到一些

00:14:57.866 --> 00:14:58.976 A:middle
精确的测量结果

