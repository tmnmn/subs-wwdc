WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:57.885 --> 00:12:00.521 align:middle line:-2
（文本长度——文本长度变化
扩展和增长——自动布局）

00:12:00.587 --> 00:12:03.757 align:middle line:-2
如果你的标签和控件
要么在我前面提到的

00:12:03.824 --> 00:12:06.393 align:middle line:-2
这些高级组件的
Stack Views中

00:12:06.460 --> 00:12:10.497 align:middle line:-2
要么使用自动布局本身进行定位
那么这项工作基本上已经为你完成了

00:12:10.564 --> 00:12:12.566 align:middle line:-1
你已经允许你的标签生长了

00:12:12.833 --> 00:12:16.103 align:middle line:-2
你的控件可以接收
需要接收的内容

00:12:16.670 --> 00:12:19.206 align:middle line:-2
随后的工作就是
优先考虑如何让它们

00:12:19.540 --> 00:12:22.075 align:middle line:-1
相互之间彼此成长的问题

00:12:24.311 --> 00:12:25.312 align:middle line:-1
（测试）

00:12:25.379 --> 00:12:27.948 align:middle line:-2
所以说这真是太伟大了
假设你已经完成了所有这些

00:12:28.015 --> 00:12:30.284 align:middle line:-2
那么确切地说
你如何确保你的app

00:12:30.350 --> 00:12:32.219 align:middle line:-1
在自适应布局方面

00:12:32.286 --> 00:12:36.490 align:middle line:-2
正在检查所有正确的盒子呢？
并对所有这些东西做出响应呢？

00:12:36.990 --> 00:12:38.225 align:middle line:-1
好消息是Xcode

00:12:38.292 --> 00:12:40.460 align:middle line:-1
提供了许多特性供你测试使用

00:12:40.827 --> 00:12:43.630 align:middle line:-2
不仅如此
它还可以让你尽早进行测试

00:12:43.697 --> 00:12:46.333 align:middle line:-1
并在app开发的早期

00:12:46.400 --> 00:12:47.801 align:middle line:-1
快速发现这些问题

00:12:48.602 --> 00:12:50.237 align:middle line:-1
伪语言就是一个例子

00:12:50.370 --> 00:12:51.638 align:middle line:-1
伪语言非常了不起

00:12:52.306 --> 00:12:54.942 align:middle line:-2
尤其是当你还没有为你的app
添加语言支持时

00:12:55.008 --> 00:12:56.977 align:middle line:-1
所以你可以在Xcode中

00:12:57.277 --> 00:13:00.581 align:middle line:-1
使用伪语言运行你的app

