WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.214 --> 00:03:03.951 align:middle line:-2
这些测试以app中的
离散子系统或类集群为目标

00:03:04.918 --> 00:03:06.787 align:middle line:-1
检查它们是否一起正常工作

00:03:07.087 --> 00:03:09.089 align:middle line:-1
每个测试只需几秒钟即可运行

00:03:11.792 --> 00:03:15.095 align:middle line:-1
这个套件是一些端到端的系统测试

00:03:15.562 --> 00:03:17.898 align:middle line:-1
最常见的形式是UI测试

00:03:18.432 --> 00:03:20.734 align:middle line:-1
它非常类似于终端用户

00:03:20.801 --> 00:03:23.203 align:middle line:-1
在他们的设备上的操作方式

00:03:24.538 --> 00:03:26.807 align:middle line:-2
检查所有的部分
是否正确地连接在一起

00:03:27.107 --> 00:03:31.678 align:middle line:-2
以及检查与底层操作系统
和外部资源进行良好的交互

00:03:33.680 --> 00:03:35.782 align:middle line:-1
遵循该模型的测试套件

00:03:36.116 --> 00:03:39.520 align:middle line:-1
可以全面描述app代码的基本功能

00:03:43.790 --> 00:03:45.826 align:middle line:-1
为了测试这个app中的网络堆栈

00:03:46.193 --> 00:03:48.362 align:middle line:-2
我们真的很想
把这个金字塔模型放在心上

00:03:48.929 --> 00:03:51.565 align:middle line:-1
将它作为如何构建测试套件的指南

00:03:53.333 --> 00:03:55.202 align:middle line:-1
在这里我们看到了

00:03:55.269 --> 00:03:57.504 align:middle line:-1
在app中发出网络请求并将数据

00:03:57.804 --> 00:03:59.573 align:middle line:-1
输入UI所涉及的高级数据流

