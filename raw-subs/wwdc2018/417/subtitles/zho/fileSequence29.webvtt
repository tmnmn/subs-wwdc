WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.873 --> 00:29:03.443 align:middle line:-2
因为你的测试是异步的
或者使用了计时器

00:29:04.378 --> 00:29:05.812 align:middle line:-1
延迟操作是很棘手的

00:29:05.879 --> 00:29:07.948 align:middle line:-2
我们希望确保
在我们的测试中包含它们

00:29:08.182 --> 00:29:11.118 align:middle line:-2
但是如果我们不小心的话
它们也会使事情变慢很多

00:29:11.818 --> 00:29:13.220 align:middle line:-1
因此我想谈谈一些

00:29:13.287 --> 00:29:15.722 align:middle line:-2
我们可以避免
在我们的测试中人为延迟的方法

00:29:15.789 --> 00:29:17.357 align:middle line:-1
因为它们永远都是不必要的

00:29:19.059 --> 00:29:20.194 align:middle line:-1
下面是一个例子

00:29:20.594 --> 00:29:22.930 align:middle line:-2
在Brian和我正在构建的
兴趣点app上

00:29:23.297 --> 00:29:25.432 align:middle line:-1
在主UI上 我们在底部有一个条带

00:29:25.499 --> 00:29:27.134 align:middle line:-1
它显示了特色的地方

00:29:27.534 --> 00:29:29.903 align:middle line:-1
它基本上是绕着附近的顶部旋转

00:29:30.237 --> 00:29:32.873 align:middle line:-1
每隔十秒钟就会显示一个新的位置

00:29:33.507 --> 00:29:36.343 align:middle line:-1
现在有几种方法可以实现这个功能

00:29:36.410 --> 00:29:38.812 align:middle line:-2
但是这里我使用的是
foundation中的timer API

00:29:40.948 --> 00:29:43.317 align:middle line:-2
让我们看一下我可能
为这个类编写的单元测试

00:29:44.051 --> 00:29:46.119 align:middle line:-2
它创建一个
FeaturedPlaceManager

00:29:46.520 --> 00:29:50.858 align:middle line:-2
并在调用scheduleNextPlace方法之前
存储它的当前位置

00:29:51.491 --> 00:29:54.127 align:middle line:-1
然后运行循环11秒

00:29:54.361 --> 00:29:56.496 align:middle line:-1
我加了一秒钟作为宽限期

00:29:57.397 --> 00:30:00.234 align:middle line:-2
最后它检查当前位置
在最后发生了变化

