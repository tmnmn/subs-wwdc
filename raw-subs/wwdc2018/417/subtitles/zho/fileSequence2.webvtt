WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.319 --> 00:02:01.421 align:middle line:-1
以便从远程网络服务器加载数据

00:02:02.856 --> 00:02:04.491 align:middle line:-1
这里我们发现一些

00:02:04.558 --> 00:02:06.460 align:middle line:-1
网络代码编写测试时有用的东西

00:02:08.794 --> 00:02:11.565 align:middle line:-1
首先快速回顾一下去年的情况

00:02:12.332 --> 00:02:16.637 align:middle line:-2
在2017年WWDC
“可测试性工程”演讲中

00:02:17.070 --> 00:02:18.939 align:middle line:-1
我们讨论了金字塔模型

00:02:19.306 --> 00:02:21.508 align:middle line:-1
它是如何构造测试套件

00:02:21.909 --> 00:02:26.480 align:middle line:-2
平衡彻底性
可理解性和执行速度的指南

00:02:28.615 --> 00:02:31.818 align:middle line:-1
总之 理想的测试套件往往是

00:02:31.885 --> 00:02:34.488 align:middle line:-1
由大量集中的单元测试组成

00:02:34.555 --> 00:02:38.025 align:middle line:-2
能够在你的app中
执行单独的分类和方法

00:02:39.693 --> 00:02:42.262 align:middle line:-1
它们的特点是阅读简单

00:02:42.963 --> 00:02:46.099 align:middle line:-2
在检测到问题时
能产生明确的失败消息

00:02:47.000 --> 00:02:48.569 align:middle line:-1
并且运行速度非常快

00:02:48.802 --> 00:02:51.939 align:middle line:-1
通常是每分钟数百或数千次测试

00:02:54.741 --> 00:02:59.379 align:middle line:-2
这些测试由较小数量的
中型集成测试作为补充

