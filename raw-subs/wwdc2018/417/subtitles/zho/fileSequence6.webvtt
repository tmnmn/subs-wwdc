WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:56.223 --> 00:06:00.160 align:middle line:-2
并将它们转换为一些输出值
而不产生任何副作用

00:06:03.330 --> 00:06:05.232 align:middle line:-1
这使得我们很容易

00:06:05.599 --> 00:06:07.901 align:middle line:-1
为代码编写一个集中的单元测试

00:06:09.503 --> 00:06:11.371 align:middle line:-2
在这里我们测试
makeRequest方法

00:06:12.039 --> 00:06:14.208 align:middle line:-1
只要做一个样本并放置位置

00:06:14.274 --> 00:06:15.742 align:middle line:-1
将其传递到这个方法中

00:06:16.210 --> 00:06:18.846 align:middle line:-1
并对其返回值做出一些认定

00:06:22.082 --> 00:06:26.253 align:middle line:-2
类似地 我们可以通过传入
一些模拟JSON

00:06:26.386 --> 00:06:28.522 align:middle line:-2
并对解析的结果进行断言
来测试响应解析

00:06:31.491 --> 00:06:34.027 align:middle line:-1
关于这个测试的另一点需要注意的是

00:06:34.428 --> 00:06:36.864 align:middle line:-1
我正在使用XCTest支持

00:06:36.930 --> 00:06:38.999 align:middle line:-1
来用于标记为抛出的测试方法

00:06:39.399 --> 00:06:42.169 align:middle line:-1
这允许我在测试代码中使用try

00:06:42.336 --> 00:06:44.705 align:middle line:-2
而不需在测试代码周围使用
明确的do-catch块围绕它

00:06:49.042 --> 00:06:52.112 align:middle line:-2
现在让我们看看
与URL会话交互的代码

00:06:54.581 --> 00:06:56.884 align:middle line:-1
这里我们再次将其拉出视图控制器

00:06:57.985 --> 00:07:00.220 align:middle line:-1
并使用与我们刚才看到的

