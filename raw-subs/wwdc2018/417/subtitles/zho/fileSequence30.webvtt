WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:57.397 --> 00:30:00.234 align:middle line:-2
最后它检查当前位置
在最后发生了变化

00:30:01.001 --> 00:30:04.137 align:middle line:-2
现在这不是很好
它需要很长时间才能运行

00:30:04.972 --> 00:30:08.208 align:middle line:-2
为了缓解这一问题
我们可以在代码中公开一个属性

00:30:08.275 --> 00:30:12.246 align:middle line:-2
以允许我们将超时定制为更短的时间
比如一秒

00:30:12.946 --> 00:30:16.216 align:middle line:-1
这就是代码改变的样子

00:30:20.754 --> 00:30:24.691 align:middle line:-2
现在使用这种方法
我们可以将测试延迟减少到1秒

00:30:25.359 --> 00:30:27.794 align:middle line:-1
这个方法比以前的好

00:30:27.861 --> 00:30:31.932 align:middle line:-2
我们的测试肯定会运行得更快
但仍然不理想

00:30:32.366 --> 00:30:35.002 align:middle line:-1
我们的代码还有延迟只是时间更短

00:30:35.669 --> 00:30:39.506 align:middle line:-2
真正的问题是
我们正在测试的代码仍然依赖于时间

00:30:39.773 --> 00:30:43.110 align:middle line:-2
这意味着
当我们使预期的延迟越来越短

00:30:43.177 --> 00:30:45.212 align:middle line:-1
我们的测试可能变得不那么可靠

00:30:45.345 --> 00:30:48.582 align:middle line:-2
因为它们将更依赖于CPU
来预测事情的进度

00:30:48.715 --> 00:30:51.919 align:middle line:-2
这并不总是正确的
尤其是对于异步代码

00:30:52.786 --> 00:30:54.755 align:middle line:-1
那么让我们来看看一个更好的方法

00:30:56.557 --> 00:30:59.793 align:middle line:-1
我建议首先确定延迟机制

