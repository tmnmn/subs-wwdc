WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.826 --> 00:11:01.862 align:middle line:-2
然后我们可以调用
loadAPIRequest

00:11:03.030 --> 00:11:04.898 align:middle line:-1
等待调用完成块

00:11:06.166 --> 00:11:08.368 align:middle line:-1
并对解析响应作出断言

00:11:11.038 --> 00:11:14.575 align:middle line:-2
在这一层上的几个测试可以给
我们很大的信心

00:11:14.641 --> 00:11:16.410 align:middle line:-2
使我们相信我们的代码
能够很好地协同工作

00:11:16.476 --> 00:11:19.179 align:middle line:-1
而且我们正在与系统进行适当的集成

00:11:19.780 --> 00:11:23.083 align:middle line:-2
例如如果我忘记在我的数据任务中
调用简历的话

00:11:23.150 --> 00:11:25.953 align:middle line:-1
那么我们刚才看到的测试就会失败

00:11:26.553 --> 00:11:28.655 align:middle line:-1
我相信我不是唯一犯过这个错误的人

00:11:33.360 --> 00:11:35.529 align:middle line:-1
最后包含一些系统级的

00:11:35.596 --> 00:11:38.699 align:middle line:-1
端到端测试也是非常有价值的

00:11:39.766 --> 00:11:42.769 align:middle line:-2
实际上测试
UI测试是一个很好的工具

00:11:44.471 --> 00:11:46.173 align:middle line:-1
要了解更多关于UI测试的信息

00:11:46.240 --> 00:11:50.711 align:middle line:-2
请参考2015年WWDC的
“Xcode中的UI测试”演讲

00:11:53.981 --> 00:11:56.917 align:middle line:-2
现在当你开始编写真正的
端到端测试时

00:11:56.984 --> 00:11:59.620 align:middle line:-2
你遇到的一个重大挑战是
当发生问题时

