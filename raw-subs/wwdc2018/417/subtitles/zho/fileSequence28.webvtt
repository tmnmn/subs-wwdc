WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.077 --> 00:28:00.747 align:middle line:-2
但是我们用模拟协议类型
代替了真正的类型

00:28:02.015 --> 00:28:05.719 align:middle line:-2
然后在我们最初的模拟协议中
我们重新命名了委托属性

00:28:05.953 --> 00:28:08.488 align:middle line:-1
并在扩展中实现了该重命名属性

00:28:09.857 --> 00:28:12.960 align:middle line:-2
因此虽然这种方法
可能需要更多的代码

00:28:13.026 --> 00:28:15.062 align:middle line:-1
而不是子类之类的替代方法

00:28:15.596 --> 00:28:17.731 align:middle line:-1
,它会更可靠 更不可能打破

00:28:17.798 --> 00:28:19.600 align:middle line:-1
我扩大我的代码

00:28:20.200 --> 00:28:22.069 align:middle line:-2
因为这样编译器将强制执行
我为代码调用的任何新方法

00:28:22.135 --> 00:28:27.207 align:middle line:-1
必须包括在这些新协议中

00:28:31.778 --> 00:28:35.716 align:middle line:-1
最后我想谈谈测试执行速度

00:28:38.118 --> 00:28:40.120 align:middle line:-1
当你的测试需要很长时间运行时

00:28:40.387 --> 00:28:42.422 align:middle line:-1
你就不太可能在开发期间运行它们

00:28:42.689 --> 00:28:45.292 align:middle line:-2
或者你可能会尝试跳过
运行时间最长的测试

00:28:46.159 --> 00:28:48.595 align:middle line:-2
我们的测试套件
会帮助我们及早发现问题

00:28:48.662 --> 00:28:50.497 align:middle line:-1
而修复回归是最容易的

00:28:50.731 --> 00:28:53.767 align:middle line:-2
因此我们希望确保我们的测试
总是尽可能快地运行

00:28:54.935 --> 00:28:56.770 align:middle line:-1
现在你可能在过去遇到过一些

00:28:56.837 --> 00:28:59.806 align:middle line:-1
需要在测试中人工等待或休眠的情况

00:28:59.873 --> 00:29:03.443 align:middle line:-2
因为你的测试是异步的
或者使用了计时器

