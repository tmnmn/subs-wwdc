WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:57.638 --> 00:34:00.741 align:middle line:-1
而根本不需要模拟延迟操作

00:34:01.975 --> 00:34:03.510 align:middle line:-1
例如 在我们的app中

00:34:03.677 --> 00:34:07.347 align:middle line:-2
被延迟的动作
正在更改到下一个功能位置

00:34:07.781 --> 00:34:12.886 align:middle line:-2
我可能只需要一两次测试
就可以证明计时器延迟正常工作

00:34:13.219 --> 00:34:14.388 align:middle line:-1
对于其余的类

00:34:14.454 --> 00:34:17.056 align:middle line:-2
我可以直接调用
ShowNextPlace方法

00:34:17.123 --> 00:34:19.560 align:middle line:-1
根本不需要模拟一个计时器调度程序

00:34:22.563 --> 00:34:24.864 align:middle line:-1
在我们讨论测试执行速度这一主题时

00:34:24.931 --> 00:34:26.632 align:middle line:-1
我们还有一些其他的技巧要分享

00:34:27.701 --> 00:34:31.271 align:middle line:-2
我们已经看到的一个领域是
NSPredicateExpections的使用

00:34:31.839 --> 00:34:34.341 align:middle line:-1
我们指出的是这些类

00:34:34.408 --> 00:34:36.143 align:middle line:-1
几乎不像其他预期类那样具有性能

00:34:36.342 --> 00:34:39.880 align:middle line:-2
因为它们依赖于轮询机制
而不是更直接的回调机制

00:34:40.547 --> 00:34:42.449 align:middle line:-1
它们主要用于UI测试

00:34:42.516 --> 00:34:46.053 align:middle line:-1
其中评估的条件发生在另一个进程中

00:34:46.386 --> 00:34:49.556 align:middle line:-2
因此在单元测试中
我们建议使用更直接的机制

00:34:49.623 --> 00:34:55.495 align:middle line:-2
例如常规的XCTestExec
NSNotification或KVOExec

00:34:58.031 --> 00:34:59.600 align:middle line:-1
另一个测试速度提示是

00:34:59.666 --> 00:35:02.469 align:middle line:-1
确保你的app尽快启动

