WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.567 --> 00:05:03.303 align:middle line:-2
现在非常值得注意的是
我能够

00:05:03.370 --> 00:05:05.305 align:middle line:-2
利用Swift
和Foundation的强大功能

00:05:05.739 --> 00:05:08.075 align:middle line:-2
能够在大约15行代码中
完成所有这一切

00:05:09.443 --> 00:05:11.778 align:middle line:-1
但是通过一个方法来做所有这些

00:05:12.179 --> 00:05:13.947 align:middle line:-1
那么我就损害了代码的可维护性

00:05:14.014 --> 00:05:16.383 align:middle line:-1
特别是代码的可测试性

00:05:20.921 --> 00:05:23.257 align:middle line:-1
来看看我们的测试金字塔的基础

00:05:23.457 --> 00:05:26.860 align:middle line:-1
我们真正想要做的是为每个流的

00:05:26.927 --> 00:05:28.662 align:middle line:-1
每个部分编写焦点单元测试

00:05:30.864 --> 00:05:34.935 align:middle line:-2
让我们首先考虑请求准备
和响应解析步骤

00:05:38.772 --> 00:05:41.141 align:middle line:-1
为了使这段代码更具可测试性

00:05:41.842 --> 00:05:44.111 align:middle line:-2
我们首先从视图控制器中取出它
并在这个专用的

00:05:45.546 --> 00:05:49.316 align:middle line:-2
PointsOfInterestRequest
类型上创建了两个方法

00:05:50.584 --> 00:05:53.287 align:middle line:-1
这给出了两个很好的解耦方法

00:05:53.353 --> 00:05:55.822 align:middle line:-1
每个都取一些值作为输入

00:05:56.223 --> 00:06:00.160 align:middle line:-2
并将它们转换为一些输出值
而不产生任何副作用

