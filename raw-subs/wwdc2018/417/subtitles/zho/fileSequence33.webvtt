WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.811 --> 00:33:02.683 align:middle line:-2
首先我创建一个MockTimerScheduler
并配置它的handleAddTimer块

00:33:03.450 --> 00:33:04.785 align:middle line:-1
这个块接收计时器

00:33:04.852 --> 00:33:08.589 align:middle line:-2
一旦它被添加到调度程序中
它将记录计时器的延迟

00:33:08.789 --> 00:33:13.627 align:middle line:-2
然后通过触发计时器来绕过延迟
来调用块

00:33:14.995 --> 00:33:18.832 align:middle line:-2
然后我们创建一个FeaturedPlaceManager
并为它提供MockTimerScheduler

00:33:19.933 --> 00:33:22.936 align:middle line:-2
最后 我们调用scheduleNextPlace
开始测试

00:33:23.837 --> 00:33:26.540 align:middle line:-1
好啊 我们的测试不再有任何延迟

00:33:27.040 --> 00:33:29.810 align:middle line:-1
它们执行得非常快而且不依赖于时间

00:33:29.877 --> 00:33:31.345 align:middle line:-1
所以它会更可靠

00:33:32.179 --> 00:33:36.016 align:middle line:-2
作为奖励
我现在可以使用底部的这个断言

00:33:36.083 --> 00:33:37.751 align:middle line:-1
来验证计时器延迟的数量

00:33:38.051 --> 00:33:40.587 align:middle line:-1
这不是我在之前的测试中所能做

00:33:42.890 --> 00:33:47.194 align:middle line:-2
所以就像我说的
我们代码的延迟已经完全消除了

00:33:48.028 --> 00:33:51.331 align:middle line:-2
我们认为这是测试涉及
延迟操作代码的一种很好的方法

00:33:51.765 --> 00:33:54.735 align:middle line:-1
但是对于测试中最快的总体执行速度

00:33:54.935 --> 00:33:57.571 align:middle line:-1
最好是直接构建大部分测试

00:33:57.638 --> 00:34:00.741 align:middle line:-1
而根本不需要模拟延迟操作

