WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.127 --> 00:31:01.962 align:middle line:-1
在我的示例中它是一个定时器

00:31:02.029 --> 00:31:05.832 align:middle line:-2
但你也可以使用DispatchQueue
的asyncAfter API

00:31:06.867 --> 00:31:09.136 align:middle line:-1
我们想要模拟这个机制

00:31:09.203 --> 00:31:12.806 align:middle line:-2
以便我们能够
立即调用延迟的操作并绕过延迟

00:31:16.043 --> 00:31:17.544 align:middle line:-1
这里是我们的原始代码

00:31:17.845 --> 00:31:21.481 align:middle line:-2
让我们从这个scheduledTimer方法的
实际功能开始

00:31:22.516 --> 00:31:25.786 align:middle line:-2
ScheduledTimer
方法实际上为我们做了两件事

00:31:26.253 --> 00:31:30.224 align:middle line:-2
它创建一个计时器 然后将
该计时器添加到当前运行循环中

00:31:31.158 --> 00:31:34.394 align:middle line:-2
现在这个API
可以非常方便地创建计时器

00:31:34.628 --> 00:31:36.530 align:middle line:-1
但是如果我将这两个步骤分开

00:31:36.597 --> 00:31:38.699 align:middle line:-1
它将帮助我们使代码更可测试

00:31:40.601 --> 00:31:44.137 align:middle line:-1
在这里 我将前面的代码从使用

00:31:44.238 --> 00:31:48.442 align:middle line:-2
scheduledTimer转换为先创建计时器
后将其添加到当前的runLoop秒中

00:31:48.509 --> 00:31:50.210 align:middle line:-1
我已经将其存储在一个新属性中

00:31:51.545 --> 00:31:54.014 align:middle line:-1
现在这段代码相当于我们以前的代码

00:31:54.214 --> 00:31:56.183 align:middle line:-1
但是一旦我们将这两个步骤分开

00:31:56.650 --> 00:31:59.520 align:middle line:-1
我们就可以看到runLoop

00:31:59.586 --> 00:32:00.854 align:middle line:-1
只是这个类与之交互的另一个外部类

