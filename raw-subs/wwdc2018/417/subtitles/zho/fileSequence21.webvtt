WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.894 --> 00:21:03.197 align:middle line:-1
请注意我们在这里调用

00:21:03.263 --> 00:21:05.032 align:middle line:-2
CLLocationManager
上的请求位置方法

00:21:05.899 --> 00:21:09.069 align:middle line:-2
当我们调用它时
它将尝试获取当前位置

00:21:09.303 --> 00:21:11.738 align:middle line:-1
并最终调用类上的委托方法

00:21:12.172 --> 00:21:13.841 align:middle line:-1
那么 让我们来看看委托方法

00:21:15.309 --> 00:21:19.680 align:middle line:-2
我们使用一个扩展来遵循这里的
CLLocationManagerDelegate协议

00:21:19.813 --> 00:21:21.682 align:middle line:-1
我们并且调用一个存储完成块

00:21:22.449 --> 00:21:25.285 align:middle line:-2
好的
让我们为这个类写一个单元测试

00:21:26.753 --> 00:21:29.289 align:middle line:-2
这里是我尝试编写的一个
如果我们阅读它

00:21:29.489 --> 00:21:33.093 align:middle line:-2
我们可以看到它首先创建一个
CurrentLocationProvider

00:21:33.594 --> 00:21:37.197 align:middle line:-2
然后检查所需的精度
以及委托是否设置好

00:21:37.497 --> 00:21:38.532 align:middle line:-1
到现在为止还好

00:21:39.166 --> 00:21:40.734 align:middle line:-1
但事情就变得棘手了

00:21:41.301 --> 00:21:43.871 align:middle line:-2
我们想测试
checkCurrentLocation方法

00:21:44.137 --> 00:21:47.674 align:middle line:-2
因为这是我们的主要逻辑所在
但是我们有一个问题

00:21:48.175 --> 00:21:51.745 align:middle line:-1
我们无法知道何时调用请求位置方法

00:21:52.012 --> 00:21:55.983 align:middle line:-2
因为这是CLLocationManager上的
一个方法而非代码的一部分

00:21:57.551 --> 00:22:00.053 align:middle line:-2
我们在这个测试中
可能会遇到的另一个问题是

