WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.044 --> 00:28:00.814 align:start position:23% line:-2
本物の型はモックプロトコル型と
置き換えました

00:28:01.982 --> 00:28:05.819 align:start position:27% line:-2
元のモックプロトコルで
デリゲートプロパティを改名

00:28:05.919 --> 00:28:08.722 align:start position:21% line:-2
そのプロパティを
extensionで実装しました

00:28:09.790 --> 00:28:15.329 align:start position:27% line:-2
サブクラス化などと比べると
多くのコードが必要ですが

00:28:15.562 --> 00:28:19.900 align:start position:25% line:-2
信頼性は高く
コードが破たんしにくいのです

00:28:20.100 --> 00:28:24.972 align:start position:27% line:-2
なぜなら
呼び出したメソッドはすべて

00:28:25.072 --> 00:28:27.407 align:start position:36% line:-2
新プロトコルに
含まれるからです

00:28:31.879 --> 00:28:35.983 align:start position:29% line:-2
最後にテスト速度について
お話しします

00:28:38.018 --> 00:28:42.589 align:start position:30% line:-2
テストに時間がかかれば
開発中の実行を避け

00:28:42.689 --> 00:28:45.559 align:start position:34% line:-2
長いテストを
飛ばすかもしれない

00:28:46.160 --> 00:28:50.631 align:start position:29% line:-2
我々のテストスイートでは
素早く簡単にできます

00:28:50.731 --> 00:28:54.101 align:start position:36% line:-2
そのテスト速度を
維持したいのです

00:28:54.902 --> 00:28:59.773 align:start position:27% line:-2
テストで わざと待機や
スリープ状態にした経験は？

00:28:59.873 --> 00:29:03.777 align:start position:30% line:-2
原因はコードの非同期や
タイマーの使用でしょう

