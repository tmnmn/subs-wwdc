WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.120 --> 00:12:02.422 align:start position:30% line:-1
不合格となった場合に―

00:12:02.523 --> 00:12:06.660 align:start position:30% line:-2
どこから原因を探るかと
いうことです

00:12:07.961 --> 00:12:11.131 align:start position:29% line:-2
我々は
この問題への対策として―

00:12:11.231 --> 00:12:14.168 align:start position:27% line:-2
モックサーバの
ローカルインスタンスを設定

00:12:14.268 --> 00:12:19.173 align:start position:25% line:-2
UIテストを中断し モックに
リクエストさせました

00:12:19.640 --> 00:12:22.242 align:start position:29% line:-1
データをコントロールでき

00:12:22.342 --> 00:12:25.779 align:start position:32% line:-2
UIテストの信頼性が
高まりました

00:12:28.582 --> 00:12:32.085 align:start position:30% line:-2
この点でモックサーバは
役に立ちますが―

00:12:32.186 --> 00:12:36.290 align:start position:23% line:-2
本物のサーバに
リクエストするテストも有益です

00:12:38.959 --> 00:12:43.330 align:start position:23% line:-2
そこでユニットテストバンドルで
テストをします

00:12:43.430 --> 00:12:46.633 align:start position:30% line:-2
アプリケーションに対し
直接 呼び出すテストで

00:12:46.900 --> 00:12:50.170 align:start position:30% line:-2
本物のサーバに直接
リクエストさせるのです

00:12:51.004 --> 00:12:53.607 align:start position:29% line:-2
するとアプリケーションと
同じように―

00:12:53.707 --> 00:12:57.044 align:start position:30% line:-2
サーバもリクエストを
受け取るか確認できます

00:12:57.477 --> 00:13:01.715 align:start position:29% line:-2
また同時にUIを
テストする際の問題もなく

