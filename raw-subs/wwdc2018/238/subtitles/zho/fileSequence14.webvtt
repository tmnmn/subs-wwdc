WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.396 --> 00:14:01.696 A:middle
而匹配的方式

00:14:01.826 --> 00:14:03.766 A:middle
则是利用状态属性的

00:14:03.766 --> 00:14:04.526 A:middle
查询指令

00:14:07.266 --> 00:14:09.186 A:middle
如果数据状态匹配

00:14:09.186 --> 00:14:10.876 A:middle
那么特定元素的

00:14:10.876 --> 00:14:12.696 A:middle
子元素便成为

00:14:12.696 --> 00:14:14.346 A:middle
应用于规则姊妹元素的

00:14:14.346 --> 00:14:16.146 A:middle
一系列操作

00:14:16.556 --> 00:14:18.606 A:middle
这里 我们希望

00:14:18.606 --> 00:14:19.996 A:middle
占位符能够被

00:14:19.996 --> 00:14:21.846 A:middle
叠层元素及其子元素取代

00:14:25.956 --> 00:14:27.666 A:middle
TVMLKit 分析元素的	

00:14:27.666 --> 00:14:29.106 A:middle
标签属性 从而

00:14:29.106 --> 00:14:30.936 A:middle
匹配被取代的元素

00:14:31.676 --> 00:14:33.456 A:middle
实际取代过程中

00:14:33.676 --> 00:14:35.356 A:middle
首先会匹配标签

00:14:35.776 --> 00:14:37.256 A:middle
之后会比较元素的名称

00:14:38.146 --> 00:14:40.726 A:middle
如果元素名不同 它便会将元素

00:14:40.726 --> 00:14:42.786 A:middle
完全取代 这里

00:14:43.086 --> 00:14:44.776 A:middle
占位符变成了叠层

00:14:45.736 --> 00:14:47.236 A:middle
但如果元素名

00:14:47.236 --> 00:14:49.046 A:middle
匹配 新内容

00:14:49.386 --> 00:14:51.476 A:middle
就会添加到已有内容之后

00:14:53.426 --> 00:14:55.586 A:middle
现在 我们就有了一个简单的

00:14:55.586 --> 00:14:56.986 A:middle
规则模板 可以根据

00:14:56.986 --> 00:14:58.806 A:middle
提供的数据状态 生成

00:14:58.806 --> 00:15:00.416 A:middle
两种不同的输出

