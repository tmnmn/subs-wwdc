WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:56.023 --> 00:21:00.928 align:middle line:-1
构成启动内部过程的五个高级组件

00:21:02.763 --> 00:21:03.931 align:middle line:-1
从第一个开始

00:21:04.665 --> 00:21:05.799 align:middle line:-1
即进程分叉

00:21:07.000 --> 00:21:09.403 align:middle line:-2
Peter 在启动阶段
我们能做些什么呢？

00:21:10.103 --> 00:21:13.674 align:middle line:-1
至于进程分叉 它真的很复杂

00:21:13.740 --> 00:21:16.910 align:middle line:-2
你需要阅读
分叉和执行的帮助页面

00:21:16.977 --> 00:21:19.780 align:middle line:-1
并熟悉POSIX基础知识

00:21:20.080 --> 00:21:21.215 align:middle line:-1
不 我只是在开玩笑

00:21:21.481 --> 00:21:24.384 align:middle line:-1
iOS将为你处理进程分叉

00:21:25.652 --> 00:21:28.488 align:middle line:-2
我们为你处理了第一步
现在来看看第二步

00:21:31.358 --> 00:21:32.492 align:middle line:-1
动态链接

00:21:34.428 --> 00:21:38.832 align:middle line:-2
在此阶段 我们分配内存以开始
执行你的app

00:21:39.833 --> 00:21:41.969 align:middle line:-1
我们链接库和框架

00:21:42.636 --> 00:21:45.606 align:middle line:-2
我们初始化Swift、Objective-C
和Foundation

00:21:46.473 --> 00:21:48.809 align:middle line:-1
我们也进行静态对象初始化

00:21:50.177 --> 00:21:51.278 align:middle line:-1
通常我们会看到

00:21:51.345 --> 00:21:55.883 align:middle line:-2
它可能占app典型启动时间的
40%到50%

00:21:57.251 --> 00:21:58.852 align:middle line:-1
要记住的一件重要的事情是

00:21:58.919 --> 00:22:01.321 align:middle line:-1
此时你的代码还没有开始运行

