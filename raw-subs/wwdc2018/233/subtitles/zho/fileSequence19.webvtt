WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.337 --> 00:19:00.374 align:middle line:-1
注意每当此变量发生变化时

00:19:00.440 --> 00:19:04.478 align:middle line:-2
我们都使用Swift的属性观察器
触发setNeedsLayout

00:19:06.280 --> 00:19:10.117 align:middle line:-2
接下来 在我们的
PanGestureRecognizer的回调函数中

00:19:10.584 --> 00:19:12.619 align:middle line:-1
我们将从手势中获取

00:19:12.686 --> 00:19:14.254 align:middle line:-1
当前的变化和视图

00:19:14.755 --> 00:19:18.091 align:middle line:-1
并将此手势与我们的一张卡相关联

00:19:18.892 --> 00:19:23.931 align:middle line:-2
然后我们在该字典中
增加此卡的偏移量

00:19:25.499 --> 00:19:29.903 align:middle line:-2
最后 在layoutSubviews中
我们将根据卡片在此字典中的偏移量

00:19:29.970 --> 00:19:34.908 align:middle line:-1
更新它们的视图的位置

00:19:36.210 --> 00:19:41.381 align:middle line:-2
再次注意 我们并没有做
任何特别的事情

00:19:41.448 --> 00:19:43.417 align:middle line:-1
除了传统的布局驱动UI事务

00:19:44.151 --> 00:19:47.988 align:middle line:-2
我们只是使用了这个状态
它碰巧是由手势驱动的

00:19:48.055 --> 00:19:50.457 align:middle line:-1
并且在layoutSubviews中响应它

00:19:51.592 --> 00:19:55.195 align:middle line:-2
事实上 如果你在整个app中
遵循此模式

00:19:55.262 --> 00:19:57.664 align:middle line:-1
你会发现它让很多这类交互

00:19:57.731 --> 00:19:59.333 align:middle line:-1
变得更容易使用

