WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.378 --> 00:28:01.715 align:middle line:-1
我们会在函数返回之前有一些代码

00:28:02.015 --> 00:28:04.117 align:middle line:-1
来检查金丝雀是否有效

00:28:06.186 --> 00:28:09.623 align:middle line:-2
所以如我们继续用strcpy来写
我们首先要覆盖金丝雀

00:28:11.491 --> 00:28:14.962 align:middle line:-1
然后在返回之前先检查金丝雀

00:28:15.696 --> 00:28:16.964 align:middle line:-1
然后就会终止

00:28:17.664 --> 00:28:21.235 align:middle line:-2
因此我们将一个潜在的
可利用的安全漏洞

00:28:21.401 --> 00:28:24.771 align:middle line:-2
转化为可靠的崩溃
这对攻击者是不利的

00:28:26.573 --> 00:28:28.642 align:middle line:-1
这就是所谓的堆栈保护器

00:28:31.545 --> 00:28:32.746 align:middle line:-1
（堆栈保护器）

00:28:32.813 --> 00:28:35.983 align:middle line:-1
它检测到某些类型的堆栈缓冲区溢出

00:28:36.049 --> 00:28:37.651 align:middle line:-1
就是我们刚才看到的攻击

00:28:38.418 --> 00:28:41.388 align:middle line:-2
在许多版本的Xcode中
它已经默认启用了

00:28:44.391 --> 00:28:47.261 align:middle line:-1
下来我要讲一个更复杂的例子

00:28:47.327 --> 00:28:49.029 align:middle line:-1
我们引入了一个新的缓解措施

00:28:50.697 --> 00:28:54.201 align:middle line:-2
假设我取了我的函数
也是我的dlog函数

00:28:55.068 --> 00:28:58.005 align:middle line:-2
我改变了缓冲区
现在它是一个可变长度的数组

00:28:59.106 --> 00:29:01.508 align:middle line:-1
长度来自一个叫做len的参数

