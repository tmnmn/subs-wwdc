WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:55.876 --> 00:18:00.447 align:middle line:0
当你在某个异步进程上
等待使用信号量时

00:18:00.814 --> 00:18:02.482 align:middle line:0
你可能会等待一个优先级

00:18:02.549 --> 00:18:04.852 align:middle line:0
比你的队列低得多的队列

00:18:05.118 --> 00:18:06.687 align:middle line:0
这会导致优先级反转

00:18:06.920 --> 00:18:09.289 align:middle line:0
这会恶化性能并导致挂起

00:18:10.057 --> 00:18:13.794 align:middle line:-1
而且以这种方式使用信号量

00:18:13.994 --> 00:18:17.598 align:middle line:-2
也会产生无用的线程
从而进一步降低性能

00:18:18.966 --> 00:18:21.268 align:middle line:-1
为了帮助你解决这个问题

00:18:21.435 --> 00:18:24.471 align:middle line:-1
现在静态分析器对这种情况提出警告

00:18:26.807 --> 00:18:29.076 align:middle line:-1
帮助了解问题发生的地点

00:18:29.142 --> 00:18:31.478 align:middle line:-1
（伟大的中央调度性能反模式）

00:18:31.545 --> 00:18:33.514 align:middle line:-1
现在让我们看看如何解决这个问题

00:18:34.014 --> 00:18:38.385 align:middle line:-2
在最好的情况下
有一个可供使用的同步API

00:18:38.452 --> 00:18:39.720 align:middle line:-1
可以替代使用

00:18:40.187 --> 00:18:44.491 align:middle line:-2
因此对于SXPC连接
有了一个类似的API

00:18:44.558 --> 00:18:47.127 align:middle line:-1
即synchronousRemoteObjectProxy

00:18:47.661 --> 00:18:51.164 align:middle line:-2
当使用它时
它消除了对信号量的需求

00:18:51.398 --> 00:18:53.000 align:middle line:-1
运行速度要快得多

00:18:55.135 --> 00:18:59.273 align:middle line:-1
或者如果没有这样的同步API可用

00:18:59.740 --> 00:19:03.143 align:middle line:-2
你可以重构app
以使用安装的连续程序

