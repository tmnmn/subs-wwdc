WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.867 --> 00:30:04.438 align:middle line:-2
内存不是无限的
所以如果我们继续在这个堆栈中分配

00:30:04.505 --> 00:30:05.439 align:middle line:-1
最终我们会到达

00:30:05.506 --> 00:30:07.641 align:middle line:-1
另一个已经分配的内存区域

00:30:08.008 --> 00:30:09.343 align:middle line:-1
通常是堆

00:30:10.811 --> 00:30:13.413 align:middle line:-2
当我们这样做的时候
我们将会与堆发生冲突

00:30:13.714 --> 00:30:15.349 align:middle line:-2
与已使用的
任何东西发生冲突

00:30:15.415 --> 00:30:17.451 align:middle line:-2
这通常是像
malloc和new此类东西

00:30:20.587 --> 00:30:23.790 align:middle line:-2
如果我们试着看看
strcpy例子会发生什么

00:30:24.591 --> 00:30:27.794 align:middle line:-2
然后我们试着
把字节一个一个地写下来

00:30:30.097 --> 00:30:32.766 align:middle line:-1
我们做H-E-L等等

00:30:33.667 --> 00:30:35.502 align:middle line:-1
从CPU的角度来看

00:30:35.569 --> 00:30:37.704 align:middle line:-1
生成的代码和操作系统

00:30:37.771 --> 00:30:38.805 align:middle line:-1
这都没问题

00:30:39.006 --> 00:30:42.943 align:middle line:-2
因为我们只是在写一个已经可用的
和已经被分配的页面

00:30:44.811 --> 00:30:47.681 align:middle line:-2
但实际上并非如此
因为这是堆的一部分

00:30:47.748 --> 00:30:50.784 align:middle line:-1
这不是本地堆栈分配数组的一部分

00:30:51.552 --> 00:30:53.353 align:middle line:-2
所以当我们写东西的时候
我们实际上是在覆盖

00:30:53.420 --> 00:30:56.256 align:middle line:-1
一些完全不相关的信息

00:30:56.323 --> 00:30:59.693 align:middle line:-2
比如我不知道一个布尔值
用来检查我们是否应该检查密码

