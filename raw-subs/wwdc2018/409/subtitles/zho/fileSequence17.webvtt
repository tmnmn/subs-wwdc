WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.186 --> 00:17:01.822 align:middle line:-1
但有时开发人员出于某种原因

00:17:01.889 --> 00:17:04.491 align:middle line:-1
希望以同步的方式使用它们

00:17:05.559 --> 00:17:06.693 align:middle line:-1
可能是因为他们的代码

00:17:06.760 --> 00:17:08.896 align:middle line:-1
已经在后台队列上运行了

00:17:09.496 --> 00:17:11.832 align:middle line:-1
或者是因为函数在必需的值可用之前

00:17:11.898 --> 00:17:13.934 align:middle line:-1
根本无法继续运行

00:17:14.734 --> 00:17:16.336 align:middle line:-1
而那里诱人的解决方案是

00:17:16.403 --> 00:17:19.473 align:middle line:-1
使用信号量来确保同步

00:17:20.273 --> 00:17:22.776 align:middle line:-1
这就是这个例子中的情况

00:17:23.042 --> 00:17:27.314 align:middle line:-2
所以这里有一个SXPC对象
self.connection

00:17:27.814 --> 00:17:31.685 align:middle line:-2
我们使用它的属性
remoteObjectProxy

00:17:31.885 --> 00:17:34.922 align:middle line:-1
从另一个进程异步地

00:17:35.088 --> 00:17:36.590 align:middle line:-1
获取递归任务的名称

00:17:37.558 --> 00:17:42.629 align:middle line:-2
然后我们等待一个信号量
它是回调内部的一个信号

00:17:43.297 --> 00:17:46.700 align:middle line:-1
这有助于确保在函数返回任务名时

00:17:47.434 --> 00:17:49.002 align:middle line:-1
任务名是可用的

00:17:49.770 --> 00:17:53.674 align:middle line:0
因此这种方法是可行的
但它具有一定的性能含义

00:17:54.408 --> 00:17:55.809 align:middle line:0
因此这里的主要问题是

00:17:55.876 --> 00:18:00.447 align:middle line:0
当你在某个异步进程上
等待使用信号量时

