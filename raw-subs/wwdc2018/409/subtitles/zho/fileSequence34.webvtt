WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.840 --> 00:34:03.343 align:middle line:-2
所以在X86-64上我们只有16
现在我们有32

00:34:03.710 --> 00:34:05.412 align:middle line:-1
所以是大量的数据需要处理

00:34:07.247 --> 00:34:09.783 align:middle line:-1
即使由于某种原因自动向量器

00:34:09.850 --> 00:34:13.253 align:middle line:-1
无法使用这些向量

00:34:13.620 --> 00:34:16.290 align:middle line:-1
那么我们仍然有更多的技能寄存器

00:34:16.356 --> 00:34:18.692 align:middle line:-2
甚至对于那些只会浮动或加倍的代码
也是如此

00:34:20.127 --> 00:34:22.329 align:middle line:-1
在AVX-512中有很多性能优势

00:34:24.197 --> 00:34:26.900 align:middle line:-1
以让我们看看我们如何

00:34:27.000 --> 00:34:29.536 align:middle line:-2
利用我的计算
量大、昂贵的函数来开发它

00:34:31.772 --> 00:34:35.509 align:middle line:-2
所以我要做的第一件事就是
保留现有的功能

00:34:36.076 --> 00:34:39.880 align:middle line:-2
因为这将是我在所有Mac上
运行的可以依靠的东西

00:34:41.681 --> 00:34:43.684 align:middle line:-1
接下来我可以尝试专门化我的函数

00:34:44.217 --> 00:34:46.786 align:middle line:-1
一种方法是使用目标属性

00:34:49.188 --> 00:34:51.692 align:middle line:-2
这告诉编译器
可以假设

00:34:51.757 --> 00:34:55.395 align:middle line:-2
这个函数有AVX-512
它只运行在iMac Pro上

00:34:57.364 --> 00:35:01.735 align:middle line:-2
因此如果你使用simd.h 例如
simd_float4 128位向量类型

