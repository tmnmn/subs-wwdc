WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:01.054 --> 00:27:02.589 align:middle line:-1
这是一个很大的安全问题

00:27:02.856 --> 00:27:07.427 align:middle line:-2
如果攻击者控制了
我正在复制的字符串 这并不难

00:27:07.961 --> 00:27:09.763 align:middle line:-1
那么它可以控制返回地址

00:27:10.197 --> 00:27:11.932 align:middle line:-1
如果它能控制返回地址

00:27:11.999 --> 00:27:14.368 align:middle line:-2
那么他们就基本上控制了
程序下一步做什么

00:27:14.434 --> 00:27:15.836 align:middle line:-1
所以这是很大的安全问题

00:27:18.772 --> 00:27:21.909 align:middle line:-1
因此如果你有一个测试捕捉到了这个

00:27:22.509 --> 00:27:24.278 align:middle line:-1
并且运行了地址消毒器

00:27:24.878 --> 00:27:27.881 align:middle line:-2
那么你将有一个简单的方法
来解决这个问题

00:27:28.415 --> 00:27:30.551 align:middle line:-1
实际上 我在这里应该做的是

00:27:30.784 --> 00:27:33.420 align:middle line:-1
strncpy 它知道大小

00:27:33.854 --> 00:27:36.957 align:middle line:-2
甚至更好 使用更高级别的API
NSString或STD字符串

00:27:39.026 --> 00:27:42.229 align:middle line:-2
但是有时候这些漏洞
仍然可以在发布版构建中存活下来

00:27:43.063 --> 00:27:47.835 align:middle line:-2
我们通过使用
所谓的堆栈保护器来避免它们

00:27:49.770 --> 00:27:51.972 align:middle line:-2
栈保护器改变了堆栈框架的布局
添加一个新的字段

00:27:52.039 --> 00:27:54.007 align:middle line:-1
金丝雀

00:27:55.642 --> 00:27:57.477 align:middle line:-1
这样当我们写的时候

00:27:58.378 --> 00:28:01.715 align:middle line:-1
我们会在函数返回之前有一些代码

