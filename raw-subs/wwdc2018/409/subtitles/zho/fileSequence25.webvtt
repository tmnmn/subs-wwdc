WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.033 --> 00:25:01.001 align:middle line:-1
要了解它是如何工作的

00:25:01.068 --> 00:25:02.936 align:middle line:-1
我们就需要了解栈是如何工作的

00:25:04.972 --> 00:25:08.709 align:middle line:-2
这里我有一个简单的C函数
叫做dlog

00:25:09.309 --> 00:25:13.080 align:middle line:-2
我用它来打印
我传入dlog错误的字符串

00:25:14.781 --> 00:25:17.284 align:middle line:-2
在这种情况下
用字符串hello来调用它

00:25:18.352 --> 00:25:19.319 align:middle line:-1
它的工作方式是

00:25:19.386 --> 00:25:23.957 align:middle line:-1
我们需分配一些内存来跟踪这个调用

00:25:26.126 --> 00:25:28.996 align:middle line:-1
我们把它分配到一个叫做栈的区域

00:25:29.730 --> 00:25:33.500 align:middle line:-1
栈向空指针或地址0方向向下延伸

00:25:35.903 --> 00:25:38.172 align:middle line:-2
因此当我们执行
dlog“hello”调用时

00:25:38.705 --> 00:25:40.741 align:middle line:-1
这会分配所谓的堆栈帧

00:25:41.441 --> 00:25:43.944 align:middle line:-1
堆栈帧包含类似返回地址的内容

00:25:44.211 --> 00:25:46.480 align:middle line:-2
这样我们就知道
如何返回main

00:25:47.714 --> 00:25:50.884 align:middle line:-2
但它也包含其他东西
如参数和局部变量

00:25:51.718 --> 00:25:55.088 align:middle line:-2
因此例如
如果我有一个日志文件路径局部变量

00:25:56.056 --> 00:25:57.658 align:middle line:-1
它就驻留在堆栈框架中

