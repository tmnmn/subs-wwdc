WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.459 --> 00:06:02.930 align:middle line:-2
隐藏所有这些复杂性
并合成那个保留和释放字段的代码

00:06:03.630 --> 00:06:05.666 align:middle line:-1
所以编译器实际上是你的朋友

00:06:05.999 --> 00:06:09.136 align:middle line:-1
它对栈上的变量

00:06:09.203 --> 00:06:10.904 align:middle line:-1
以及其他结构中的字段

00:06:11.772 --> 00:06:14.575 align:middle line:-1
以及Objective-C类中的

00:06:14.875 --> 00:06:18.245 align:middle line:-2
实例变量
都进行了正确的管理

00:06:19.680 --> 00:06:23.684 align:middle line:-1
但是有一个地方

00:06:23.750 --> 00:06:26.587 align:middle line:-2
我们需要做一些额外的工作
来支持使用

00:06:27.788 --> 00:06:29.489 align:middle line:-2
ARC对象指针字段的结构
这个地方就是堆

00:06:30.624 --> 00:06:31.992 align:middle line:-1
让我们回到我们的结构

00:06:32.125 --> 00:06:36.096 align:middle line:-2
我们假设
你希望在堆中分配一个菜单项数组

00:06:36.797 --> 00:06:41.835 align:middle line:-2
若这是Objective-C接口
我们就可以在此用NSArray

00:06:42.536 --> 00:06:45.205 align:middle line:-2
但它不是 所以让我们使用
malloc和free

00:06:46.173 --> 00:06:49.176 align:middle line:-1
现在这段代码实际上有两个问题

00:06:49.977 --> 00:06:54.815 align:middle line:-1
首先内存在分配时不是零初始化的

00:06:55.048 --> 00:06:58.185 align:middle line:-1
这意味着它们的指针是无效的

00:06:58.585 --> 00:07:01.822 align:middle line:-1
这将导致程序在运行时

