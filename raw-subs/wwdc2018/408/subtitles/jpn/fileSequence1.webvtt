WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:54.488 --> 00:01:00.093 align:start position:29% line:-2
場合によっては ビルドを
著しく高速化できます

00:01:01.261 --> 00:01:04.230 align:start position:32% line:-2
今日は
ビルド高速化について

00:01:04.565 --> 00:01:07.100 align:start position:32% line:-1
２つの視点で話します

00:01:08.836 --> 00:01:12.973 align:start position:32% line:-2
１つは全体的な
ビルド効率の向上です

00:01:13.540 --> 00:01:18.078 align:start position:29% line:-2
もう１つは リビルド時の
作業量の軽減

00:01:18.178 --> 00:01:20.247 align:start position:23% line:-2
特に インクリメンタルビルドの
話です

00:01:22.015 --> 00:01:24.885 align:start position:29% line:-1
これから私が説明するのは

00:01:24.985 --> 00:01:30.858 align:start position:16% line:-2
プロセスの並列化や
Run Scriptフェーズの扱いです

00:01:31.258 --> 00:01:36.697 align:start position:20% line:-2
Xcode 10のビルド時間測定の
新機能も紹介します

00:01:38.465 --> 00:01:43.070 align:start position:29% line:-2
また ジョーダンが
ソースレベルの話をします

00:01:43.604 --> 00:01:46.006 align:start position:20% line:-1
例えばSwiftでの依存関係の理解

00:01:46.507 --> 00:01:48.709 align:start position:36% line:-1
複雑な式の扱い方

00:01:49.343 --> 00:01:52.613 align:start position:25% line:-2
Objective-Cの
インターフェース制限などです

00:01:54.281 --> 00:01:56.416 align:start position:27% line:-1
まずは ビルドの並列化です

00:01:57.551 --> 00:02:00.754 align:start position:25% line:-1
Xcodeのプロジェクトでは

