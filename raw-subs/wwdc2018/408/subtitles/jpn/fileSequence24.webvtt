WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.506 --> 00:24:03.544 align:start position:30% line:-2
しかし この場合
最善の策とは言えません

00:24:03.744 --> 00:24:05.512 align:start position:39% line:-1
前に戻します

00:24:06.613 --> 00:24:10.951 align:start position:29% line:-2
先ほど クロージャの型を
判定できるように

00:24:11.051 --> 00:24:14.388 align:start position:30% line:-1
単式を書こうとしました

00:24:15.122 --> 00:24:18.192 align:start position:29% line:-1
しかし ここでは不要です

00:24:18.659 --> 00:24:22.696 align:start position:30% line:-2
reduceを
呼び出しているのだから

00:24:23.197 --> 00:24:26.400 align:start position:36% line:-2
オプショナル型の
整数の配列です

00:24:26.733 --> 00:24:30.470 align:start position:34% line:-2
結果の型は戻り値と
一致するはずです

00:24:31.071 --> 00:24:34.975 align:start position:30% line:-2
だから reduceの
コールバックは

00:24:35.075 --> 00:24:37.978 align:start position:30% line:-2
オプショナル型の整数の
演算です

00:24:38.345 --> 00:24:42.382 align:start position:29% line:-2
クロージャに単式を入れる
必要はないのです

00:24:42.583 --> 00:24:47.387 align:start position:30% line:-2
ステートメントを分けて
読みやすくできます

00:24:48.489 --> 00:24:51.658 align:start position:34% line:-2
私の以前のコードを
変換したものです

00:24:52.559 --> 00:24:56.063 align:start position:30% line:-2
しかし
もっと高速にもできます

00:24:56.430 --> 00:24:59.500 align:start position:29% line:-1
読みやすく 管理しやすく

00:24:59.600 --> 00:25:02.903 align:start position:36% line:-2
コンパイル時間を
短くもできます

