WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:45.586 --> 00:28:47.096 A:middle
如果我在 App 目标中
 
00:28:47.096 --> 00:28:50.636 A:middle
改变了一个文件 我们就已经知道
 
00:28:50.636 --> 00:28:52.286 A:middle
该文件需要被重新编译了
 
00:28:52.436 --> 00:28:53.606 A:middle
当然了 任何依赖于
 
00:28:53.606 --> 00:28:55.146 A:middle
这个文件的文件
 
00:28:55.146 --> 00:28:56.236 A:middle
都需要被重新编译
 
00:28:57.026 --> 00:28:58.316 A:middle
但是在 utilities 目标中的
 
00:28:58.316 --> 00:28:59.716 A:middle
任何文件
 
00:28:59.756 --> 00:29:01.376 A:middle
都不需要被重新编译
 
00:29:02.276 --> 00:29:03.326 A:middle
因为这是另一个分离的目标
 
00:29:03.326 --> 00:29:05.576 A:middle
它有明确的依赖性
 
00:29:05.676 --> 00:29:07.426 A:middle
在两个文件中
 
00:29:07.426 --> 00:29:09.406 A:middle
并没有不清晰的
 
00:29:09.406 --> 00:29:12.456 A:middle
可见关系
 
00:29:12.626 --> 00:29:15.286 A:middle
与此相似的是
 
00:29:15.286 --> 00:29:16.376 A:middle
如果我在框架目标中做一些改变
 
00:29:16.376 --> 00:29:17.896 A:middle
我将会需要
 
00:29:17.896 --> 00:29:20.246 A:middle
重新编译这个文件以及
 
00:29:20.246 --> 00:29:21.416 A:middle
在 utilities 框架中
 
00:29:21.416 --> 00:29:22.236 A:middle
所有依赖于此的其他文件
 
00:29:23.156 --> 00:29:25.776 A:middle
但是 这些依赖性更加保守
 
00:29:26.236 --> 00:29:28.296 A:middle
所以 Xcode 也会
 
00:29:28.296 --> 00:29:29.906 A:middle
重新编译在 Game 目标中的
 
00:29:29.906 --> 00:29:32.136 A:middle
一切 除非修改
 
00:29:32.136 --> 00:29:34.846 A:middle
被完全限制在函数体中
 
00:29:35.436 --> 00:29:38.996 A:middle
为了综合这些规则
 
00:29:38.996 --> 00:29:40.746 A:middle
编译器需要保守点
 
00:29:41.056 --> 00:29:42.506 A:middle
即使人们知道说
 
00:29:42.506 --> 00:29:43.656 A:middle
这个修改不会影响
 
00:29:43.656 --> 00:29:45.506 A:middle
其他文件 这不代表
 
00:29:45.506 --> 00:29:46.936 A:middle
编译器就可以知道
 
00:29:47.716 --> 00:29:49.486 A:middle
不过 编译器可以知道
 
00:29:49.486 --> 00:29:52.696 A:middle
该如何处理函数体的变化
 
00:29:52.936 --> 00:29:54.196 A:middle
它知道其不会影响
 
00:29:54.196 --> 00:29:55.576 A:middle
文件的界面
 
00:29:55.896 --> 00:29:57.776 A:middle
因此 也不会要求其他
 
00:29:57.776 --> 00:29:59.406 A:middle
文件被重新编译
 
00:30:02.406 --> 00:30:04.146 A:middle
这个通过文件的依赖性基础
 
00:30:04.146 --> 00:30:06.006 A:middle
在模块内发生
 
00:30:06.006 --> 00:30:08.386 A:middle
在这里 Swift 的声明
 
00:30:08.386 --> 00:30:10.026 A:middle
对彼此是隐式可见的
 
00:30:10.876 --> 00:30:11.666 A:middle
当你在通过你的
 
00:30:11.666 --> 00:30:13.756 A:middle
引入文件或者你的
 
00:30:13.756 --> 00:30:15.006 A:middle
头文件来处理
 
00:30:15.006 --> 00:30:16.736 A:middle
跨模块依赖性时 这些都是
 
00:30:16.736 --> 00:30:17.846 A:middle 
整个目标的依赖性
 
00:30:18.386 --> 00:30:21.836 A:middle
这些就是关于 Swift 依赖性
 
00:30:21.836 --> 00:30:25.546 A:middle
和 Swift 目标的好的信息
 
00:30:25.856 --> 00:30:27.336 A:middle
但我知道你们中很多人
 
00:30:27.546 --> 00:30:29.766 A:middle
都是混合 Objective-C 目标和 Swift 目标
 
00:30:29.976 --> 00:30:31.336 A:middle
所以最后一个部分将
 
00:30:31.336 --> 00:30:33.276 A:middle
集中在
 
00:30:33.276 --> 00:30:34.696 A:middle
混合源的 App 中如何减少
 
00:30:34.696 --> 00:30:37.756 A:middle
Swift 和 Objective-C 代码的接口
 
00:30:38.976 --> 00:30:40.506 A:middle
为了实现这一点 我们将
 
00:30:40.506 --> 00:30:42.966 A:middle
讨论一下混合源 App 的一些内容
 
00:30:44.096 --> 00:30:46.796 A:middle
这个图表将有些复杂 所以请耐心点
 
00:30:46.796 --> 00:30:48.356 A:middle
如果你在观看视频
 
00:30:48.406 --> 00:30:49.626 A:middle
你可能需要暂停并重新开始
 
00:30:50.386 --> 00:30:51.106 A:middle
放轻松
 
00:30:52.406 --> 00:30:54.306 A:middle
首先看到的是
 
00:30:54.676 --> 00:30:56.926 A:middle
描述你的 Objective-C 接口的头文件
 
00:30:57.646 --> 00:30:58.756 A:middle
这就是你 App 中用
 
00:30:58.796 --> 00:31:00.136 A:middle
Objective-C 写的部分
 
00:31:00.296 --> 00:31:01.896 A:middle
你可能想要把这部分给 Swift
 
00:31:02.376 --> 00:31:03.966 A:middle
或者你只是想对
 
00:31:03.966 --> 00:31:05.656 A:middle
你的 App 中的其他 Objective-C 
 
00:31:05.656 --> 00:31:07.046 A:middle
部分 声明头文件
 
00:31:08.246 --> 00:31:09.796 A:middle
我们还有桥接头文件
 
00:31:10.236 --> 00:31:11.696 A:middle
这就是收集
 
00:31:11.696 --> 00:31:13.416 A:middle
所有你想要展示给你的 App 的
 
00:31:13.416 --> 00:31:15.566 A:middle
Swift 部分的信息
 
00:31:15.566 --> 00:31:16.886 A:middle
的头文件
 
00:31:17.766 --> 00:31:19.656 A:middle
这是 Xcode 中
 
00:31:19.786 --> 00:31:21.616 A:middle
控制头文件使用的构建设置
 
00:31:21.836 --> 00:31:23.756 A:middle
一旦它设置完成
 
00:31:23.756 --> 00:31:25.846 A:middle
Swift 编译器就知道
 
00:31:25.846 --> 00:31:27.906 A:middle
该把这些 Objective-C 接口
 
00:31:27.906 --> 00:31:28.736 A:middle
给你的 Swift 代码
 
00:31:30.216 --> 00:31:32.196 A:middle
Swift 编译器会接着
 
00:31:32.196 --> 00:31:34.616 A:middle
产生一个生成的头文件
 
00:31:35.036 --> 00:31:36.796 A:middle
它会反向地做相同的事情
 
00:31:37.246 --> 00:31:39.026 A:middle
它描述了你的 Swift 代码中
 
00:31:39.026 --> 00:31:41.526 A:middle
哪些部分会被展示给
 
00:31:41.526 --> 00:31:42.496 A:middle
Objective-C

