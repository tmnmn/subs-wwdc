WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:13.296 --> 00:32:14.906 A:middle
你们的 Swift 应用文件
 
00:32:15.976 --> 00:32:17.556 A:middle
将信息送回
 
00:32:17.556 --> 00:32:19.076 A:middle
Objective-C 的
 
00:32:19.076 --> 00:32:20.176 A:middle
生成的头文件
 
00:32:20.686 --> 00:32:21.966 A:middle
最后 就是你的
 
00:32:21.966 --> 00:32:24.036 A:middle
Objective-C 应用文件
 
00:32:24.506 --> 00:32:28.536 A:middle
在像这样的图表中
 
00:32:28.536 --> 00:32:30.456 A:middle
所有这些箭头都代表
 
00:32:30.456 --> 00:32:31.396 A:middle
依赖性
 
00:32:31.476 --> 00:32:32.876 A:middle
不是目标层面的依赖性
 
00:32:32.876 --> 00:32:34.966 A:middle
而是目标内的
 
00:32:35.186 --> 00:32:37.516 A:middle
文件间的依赖性
 
00:32:38.336 --> 00:32:40.216 A:middle
所以 我们想要做的是
 
00:32:40.216 --> 00:32:41.556 A:middle
关注生成的头文件和
 
00:32:41.556 --> 00:32:43.046 A:middle
桥接头文件
 
00:32:43.046 --> 00:32:44.546 A:middle
因为如果我们可以
 
00:32:44.546 --> 00:32:46.916 A:middle
缩小这些头文件的内容
 
00:32:46.916 --> 00:32:48.326 A:middle
那我们就会知道事情变化的机会
 
00:32:48.326 --> 00:32:49.056 A:middle
其实更少
 
00:32:49.366 --> 00:32:51.596 A:middle
因此 需要重新构建的也更少
 
00:32:52.206 --> 00:32:54.116 A:middle
让我们来看一下
 
00:32:54.916 --> 00:32:56.486 A:middle
对于生成的头文件来说
 
00:32:56.486 --> 00:32:57.906 A:middle
你最有力的工具是
 
00:32:57.906 --> 00:32:58.866 A:middle
私有关键词
 
00:32:59.486 --> 00:33:01.086 A:middle
在这个例子中
 
00:33:01.086 --> 00:33:02.126 A:middle
我有一个在 Swift 定义的
 
00:33:02.126 --> 00:33:03.036 A:middle
视图控制器
 
00:33:03.316 --> 00:33:04.476 A:middle
它有一个 IBOutlet 属性
 
00:33:04.516 --> 00:33:06.636 A:middle
和一个 IBAction 方法
 
00:33:07.606 --> 00:33:09.526 A:middle
在默认情况下 这些会
 
00:33:09.526 --> 00:33:11.966 A:middle
展示在你生成的头文件中
 
00:33:12.426 --> 00:33:16.596 A:middle
因为它们是展示给 Objective-C 的方法和属性
 
00:33:17.226 --> 00:33:18.876 A:middle
它们并没有被声明成私有的
 
00:33:20.276 --> 00:33:22.216 A:middle
但大部分时间
 
00:33:22.216 --> 00:33:23.756 A:middle
你不需要将这些
 
00:33:23.756 --> 00:33:24.986 A:middle
展示给你项目中的任何其他文件
  
00:33:25.376 --> 00:33:26.276 A:middle
它们只是为了与
 
00:33:26.276 --> 00:33:27.206 A:middle
Interface Builder（接口构建器）交互的
 
00:33:28.286 --> 00:33:30.326 A:middle
所以 在这种情况下 我可以将其标为私有
 
00:33:30.366 --> 00:33:32.636 A:middle
并看着属性和方法
 
00:33:32.676 --> 00:33:35.396 A:middle
从生成的头文件中消失
 
00:33:37.216 --> 00:33:39.606 A:middle
另外一个例子就是
 
00:33:39.606 --> 00:33:41.746 A:middle
在为了用于 Objective-C 运行时间特征
 
00:33:41.746 --> 00:33:43.526 A:middle
如 #selector
 
00:33:43.526 --> 00:33:46.126 A:middle
而处理展示给 Objective-C 的方法时
 
00:33:46.786 --> 00:33:47.886 A:middle
在这个例子中
 
00:33:47.886 --> 00:33:49.476 A:middle
我使用基础的  Notification Center
 
00:33:49.476 --> 00:33:51.646 A:middle
API 在通知发送时
 
00:33:51.646 --> 00:33:54.326 A:middle
它使用 selector 作为回调
 
00:33:55.896 --> 00:33:58.026 A:middle
再一次 这里唯一的要求
 
00:33:58.086 --> 00:33:59.086 A:middle
就是将方法
 
00:33:59.086 --> 00:34:00.816 A:middle
展示给 Objective-C
 
00:34:00.916 --> 00:34:02.056 A:middle
在我的项目
 
00:34:02.056 --> 00:34:03.786 A:middle
其他文件中 不论是
 
00:34:03.786 --> 00:34:06.046 A:middle
Swift 还是 Objective-C 它其实不太被使用
 
00:34:06.486 --> 00:34:09.286 A:middle
所以我可以把它标记为私有
 
00:34:10.106 --> 00:34:11.776 A:middle
这再一次
 
00:34:11.776 --> 00:34:14.176 A:middle
缩小了我生成的头文件的大小
 
00:34:14.816 --> 00:34:17.256 A:middle
在这种情况中
 
00:34:17.256 --> 00:34:19.246 A:middle
往往还有其他选择
 
00:34:19.596 --> 00:34:20.586 A:middle
那就是将其转换为
 
00:34:20.586 --> 00:34:21.896 A:middle
基于分块的 API
 
00:34:22.776 --> 00:34:24.166 A:middle
在很多例子中
 
00:34:24.166 --> 00:34:25.866 A:middle
这甚至可以清理你的代码
 
00:34:25.866 --> 00:34:27.536 A:middle
因为你可从那些
 
00:34:27.666 --> 00:34:28.486 A:middle
注册事件通知
 
00:34:28.486 --> 00:34:30.016 A:middle
的函数
 
00:34:30.396 --> 00:34:31.516 A:middle
暗中地获取状态
 
00:34:31.516 --> 00:34:33.066 A:middle
而不用一直带着它
 
00:34:33.066 --> 00:34:33.456 A:middle
就像带着个环境目标
 
00:34:34.076 --> 00:34:37.286 A:middle
最后一个
 
00:34:37.286 --> 00:34:38.486 A:middle
减少你生成的头文件大小
 
00:34:38.486 --> 00:34:41.576 A:middle
的方法其实是非常古老的
 
00:34:41.816 --> 00:34:43.256 A:middle
你可以更新到 Swift 4
 
00:34:44.366 --> 00:34:45.646 A:middle
你应该已经听说了
 
00:34:45.646 --> 00:34:47.216 A:middle
今年你就需要这么做
 
00:34:47.596 --> 00:34:49.076 A:middle
Xcode 10 将会是
 
00:34:49.076 --> 00:34:51.796 A:middle
Swift 3 模式被支持的
 
00:34:51.796 --> 00:34:52.886 A:middle
最后一个版本了
 
00:34:53.976 --> 00:34:56.386 A:middle
所以 这会是你之后
 
00:34:56.386 --> 00:34:57.946 A:middle
需要做的事情
 
00:34:57.976 --> 00:34:59.166 A:middle
编辑 转换
 
00:34:59.316 --> 00:35:01.076 A:middle
至现行的 Swift 语法
 
00:35:02.496 --> 00:35:04.126 A:middle
然而 当你在更新的时候
 
00:35:04.396 --> 00:35:06.906 A:middle
你可能会选择
 
00:35:06.906 --> 00:35:09.936 A:middle
为一个特定的构建设置
 
00:35:09.936 --> 00:35:11.446 A:middle
保持 Swift 3 的
 
00:35:11.446 --> 00:35:12.576 A:middle
兼容性模式
 
00:35:12.696 --> 00:35:14.776 A:middle
这就是 Swift 3 @objc 
 
00:35:14.776 --> 00:35:15.406 A:middle
inference

