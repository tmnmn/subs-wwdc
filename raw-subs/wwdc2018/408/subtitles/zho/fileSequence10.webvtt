WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:03.836 --> 00:18:05.196 A:middle
你可以看到在我们刚刚操作的
 
00:18:05.196 --> 00:18:06.966 A:middle
最后一个构建中
 
00:18:06.966 --> 00:18:07.886 A:middle
我们有一个 shell 脚本
 
00:18:07.886 --> 00:18:08.816 A:middle
这只是众多脚本中的一个
 
00:18:08.816 --> 00:18:09.676 A:middle
它指明一个任务
 
00:18:10.276 --> 00:18:11.726 A:middle
花费 5 秒钟
 
00:18:12.496 --> 00:18:14.266 A:middle
如果你在你的
 
00:18:14.266 --> 00:18:15.476 A:middle
每一个增量构建中
 
00:18:15.476 --> 00:18:17.126 A:middle
都看到了它们
 
00:18:17.126 --> 00:18:18.506 A:middle
这是在你的运行脚本过程中
 
00:18:18.506 --> 00:18:20.556 A:middle
错误配置的指示
 
00:18:20.996 --> 00:18:21.836 A:middle
可能有一些事情是
 
00:18:21.836 --> 00:18:23.726 A:middle
你为了减少整体构建时间
 
00:18:23.726 --> 00:18:24.986 A:middle
而想要说明的
 
00:18:28.456 --> 00:18:29.906 A:middle
通过从命令行输入 Show Build Timing 
 
00:18:30.256 --> 00:18:34.796 A:middle
Summary（展示构建计时总结）标识 你也可以获取
 
00:18:35.096 --> 00:18:37.456 A:middle
构建计时总结
 
00:18:39.566 --> 00:18:40.976 A:middle
下面我想要让 

00:18:40.976 --> 00:18:42.186 A:middle
上台来给大家

00:18:42.186 --> 00:18:42.926 A:middle
讲一下大家自己的项目也可以
 
00:18:42.926 --> 00:18:45.186 A:middle
做的资源层面的提升
 
00:18:46.516 --> 00:18:51.966 A:middle
[ 掌声 ]

00:18:52.466 --> 00:18:53.176 A:middle
&gt;&gt; 谢谢 David

00:18:53.996 --> 00:18:54.456 A:middle
好的

00:18:54.456 --> 00:18:56.066 A:middle
只要一个小小的改变
 
00:18:56.066 --> 00:18:57.936 A:middle
你们会有
 
00:18:57.936 --> 00:18:59.906 A:middle
提升你们 Xcode 项目的
 
00:18:59.906 --> 00:19:00.886 A:middle
多种方法
 
00:19:01.266 --> 00:19:02.116 A:middle
在我们来到
 
00:19:02.116 --> 00:19:03.346 A:middle
资源级和文件级
 
00:19:03.346 --> 00:19:05.256 A:middle
主题时 我想要再说一个
 
00:19:05.256 --> 00:19:07.016 A:middle
Xcode 10 中的新性能
 
00:19:07.016 --> 00:19:10.656 A:middle
这是一个
 
00:19:10.656 --> 00:19:11.626 A:middle
你们当中有些人
 
00:19:11.626 --> 00:19:13.096 A:middle
在你们的项目有很多 Swift 文件时
 
00:19:13.346 --> 00:19:14.666 A:middle
为了让它们构建得更快而采用的
 
00:19:14.666 --> 00:19:15.976 A:middle
临时解决方法
 
00:19:17.696 --> 00:19:18.936 A:middle
你们已经听说了
 
00:19:19.636 --> 00:19:21.026 A:middle
这是用在调配置
 
00:19:21.026 --> 00:19:23.166 A:middle
中的 Whole Module（整体模块）设置
 
00:19:23.966 --> 00:19:25.266 A:middle
在之前版本的 Xcode 中
 
00:19:25.266 --> 00:19:27.236 A:middle
对于一些项目来说
 
00:19:27.236 --> 00:19:28.446 A:middle
开启整体模块编辑模式
 
00:19:28.446 --> 00:19:30.646 A:middle
即便是调试构建
 
00:19:30.706 --> 00:19:32.496 A:middle
也会比在默认增量模式
 
00:19:32.496 --> 00:19:36.336 A:middle
中的构建速度更快
 
00:19:37.326 --> 00:19:39.186 A:middle
这确实提升了构建速度
 
00:19:39.246 --> 00:19:40.846 A:middle
因为它可以分享
 
00:19:40.846 --> 00:19:42.656 A:middle
Swift 的编译器
 
00:19:42.656 --> 00:19:44.546 A:middle
可以用增量模式不可行的方法
 
00:19:44.916 --> 00:19:46.846 A:middle
在文件中分享工作
 
00:19:47.386 --> 00:19:48.576 A:middle
但这也意味着
 
00:19:48.576 --> 00:19:49.806 A:middle
你每次都要放弃
 
00:19:49.806 --> 00:19:51.286 A:middle
你的增量构建
 
00:19:51.286 --> 00:19:52.826 A:middle
并重建整个目标 Swift 
 
00:19:52.826 --> 00:19:54.446 A:middle
文件的价值
 
00:19:55.346 --> 00:19:57.266 A:middle
所以在 Xcode 10 中
 
00:19:57.266 --> 00:19:58.926 A:middle
我们提升了增量构建
 
00:19:58.926 --> 00:20:00.546 A:middle
让它们也能拥有那些通过文件
 
00:20:00.546 --> 00:20:01.416 A:middle
分享的工作
 
00:20:01.416 --> 00:20:02.986 A:middle
所以你应该不再需要
 
00:20:02.986 --> 00:20:04.646 A:middle
使用整体模块模式
 
00:20:04.646 --> 00:20:06.660 A:middle
来获得良好的构建时间
 
00:20:08.516 --> 00:20:11.376 A:middle
[ 掌声 ]

