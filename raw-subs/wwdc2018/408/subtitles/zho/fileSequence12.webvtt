WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.126 --> 00:21:59.696 A:middle
因为我们已经从系统框架中
 
00:21:59.696 --> 00:22:01.256 A:middle
拥有包含
 
00:22:01.256 --> 00:22:03.236 A:middle
简化函数和幂函数
 
00:22:03.236 --> 00:22:06.586 A:middle
的大型、复杂的表达式
 
00:22:06.586 --> 00:22:08.026 A:middle
你可能不会猜到
 
00:22:08.026 --> 00:22:09.566 A:middle
double 是这个性能中的
 
00:22:09.566 --> 00:22:10.296 A:middle
推论类型
  
00:22:11.066 --> 00:22:12.126 A:middle
通过在这里提供这个信息
 
00:22:12.126 --> 00:22:14.076 A:middle
编译器使用这个结构
 
00:22:14.076 --> 00:22:15.406 A:middle
在每个文件中
 
00:22:15.406 --> 00:22:17.796 A:middle
需要做的工作
 
00:22:17.826 --> 00:22:18.876 A:middle
都被你节省了
 
00:22:19.626 --> 00:22:21.636 A:middle
你还节省了
 
00:22:21.636 --> 00:22:23.046 A:middle
你的同事
 
00:22:23.336 --> 00:22:25.086 A:middle
为了弄清楚这个 big number 到底是什么  
 
00:22:25.086 --> 00:22:26.576 A:middle
而花费的时间
 
00:22:27.156 --> 00:22:30.166 A:middle
所以你通过用
 
00:22:30.166 --> 00:22:31.226 A:middle
这个额外信息来帮助您
 
00:22:31.226 --> 00:22:32.596 A:middle
优化构建时间
 
00:22:32.596 --> 00:22:34.786 A:middle
就是一个很好的
 
00:22:34.786 -->00:22:36.666 A:middle
软件工程实践的案例
 
00:22:37.806 --> 00:22:38.846 A:middle
我们看看涉及闭包的
 
00:22:38.846 --> 00:22:40.516 A:middle
其他例子
 
00:22:41.536 --> 00:22:43.286 A:middle
这次我将会试着宏定义一个
 
00:22:43.286 --> 00:22:44.936 A:middle
会返回所有
 
00:22:44.936 --> 00:22:48.186 A:middle
非可选参数值的和的函数
 
00:22:48.926 --> 00:22:50.156 A:middle
如果这三个参数是零
 
00:22:50.156 --> 00:22:51.826 A:middle
它就会返回零
 
00:22:53.136 --> 00:22:54.696 A:middle
我将会试着使用一个
 
00:22:54.696 --> 00:22:56.726 A:middle
Swift 的性能
 
00:22:56.726 --> 00:22:58.526 A:middle
如果你在主体内
 
00:22:58.526 --> 00:23:00.646 A:middle
有一个拥有单一表达式的闭包
 
00:23:00.646 --> 00:23:02.026 A:middle
那么编译器会
 
00:23:02.026 --> 00:23:03.986 A:middle
使用该表达式来决定
 
00:23:03.986 --> 00:23:04.976 A:middle
闭包的类型
 
00:23:05.786 --> 00:23:07.506 A:middle
有时候这真的很方便
 
00:23:08.086 --> 00:23:10.976 A:middle
其他时候它则会导致像这样的代码
 
00:23:12.506 --> 00:23:13.916 A:middle
这样非常丑
 
00:23:13.916 --> 00:23:14.846 A:middle
我不认为我会用这个
  
00:23:14.846 --> 00:23:16.046 A:middle
来回顾过去的代码
 
00:23:17.276 --> 00:23:18.796 A:middle
我们还有一些内嵌的工艺运算符
 
00:23:18.796 --> 00:23:20.876 A:middle
和一些针对 nil 的
 
00:23:20.876 --> 00:23:22.316 A:middle
明确的比较方法
 
00:23:22.406 --> 00:23:24.636 A:middle
还有一些相关的其他运算
 
00:23:24.636 --> 00:23:26.676 A:middle
我不认为它会运行的很好
 
00:23:27.316 --> 00:23:29.086 A:middle
并且还有另一个问题
 
00:23:29.626 --> 00:23:31.136 A:middle
因为这个表达式太大了
 
00:23:31.136 --> 00:23:32.976 A:middle
拥有着很多独立的块
 
00:23:32.976 --> 00:23:35.316 A:middle
Swift 编译器会报错说
 
00:23:35.316 --> 00:23:36.996 A:middle
它不能在一个合理数量的
 
00:23:36.996 --> 00:23:38.656 A:middle
时间内完成编译
 
00:23:38.656 --> 00:23:39.906 A:middle
这个构建时间
 
00:23:40.966 --> 00:23:42.186 A:middle
简直慢到头了
 
00:23:42.186 --> 00:23:44.646 A:middle
甚至连编译器都放弃了
 
00:23:45.776 --> 00:23:46.826 A:middle
这也真的让我对
 
00:23:46.826 --> 00:23:48.046 A:middle
这个代码加深了理解
 
00:23:48.876 --> 00:23:50.906 A:middle
我的首选是
 
00:23:50.906 --> 00:23:52.026 A:middle
如之前的例子一样做相同的事情
 
00:23:52.026 --> 00:23:54.806 A:middle
同时提供附加的类型
 
00:23:55.186 --> 00:23:56.586 A:middle
通过一个闭包 你可以在 In Key 词
 
00:23:56.586 --> 00:23:57.906 A:middle
之前就完成这些
 
00:23:59.156 --> 00:24:01.446 A:middle
不过这对于特定的问题来说
 
00:24:01.446 --> 00:24:02.706 A:middle
可能不是最好的
 
00:24:02.706 --> 00:24:03.256 A:middle
解决办法
 
00:24:03.536 --> 00:24:05.116 A:middle
所以让我们回到之前有的东西
 
00:24:06.686 --> 00:24:08.416 A:middle
回想起我之前说的
 
00:24:08.416 --> 00:24:09.646 A:middle
我想要试着在这里写一个
 
00:24:09.646 --> 00:24:11.596 A:middle
表达式这样它就可以用来
 
00:24:11.596 --> 00:24:13.996 A:middle
决定闭包的类型
 
00:24:15.176 --> 00:24:16.846 A:middle
但是在这种情况下 
 
00:24:16.846 --> 00:24:17.856 A:middle
这其实不太必要
 
00:24:18.716 --> 00:24:20.316 A:middle
我们已经从 Reduce 的调用中了解到
 
00:24:20.316 --> 00:24:22.916 A:middle
这个闭包是什么样的
 
00:24:23.266 --> 00:24:24.716 A:middle
Reduce 对一个整型可选择的
 
00:24:24.716 --> 00:24:26.156 A:middle
数组调用
 
00:24:26.766 --> 00:24:28.736 A:middle
这个结果类型需要
 
00:24:28.776 --> 00:24:30.126 A:middle
匹配这个函数的返回类型
 
00:24:31.076 --> 00:24:33.186 A:middle
我们已经知道 Reduce 的回调
 
00:24:33.486 --> 00:24:35.576 A:middle
只能对可选择
 
00:24:35.576 --> 00:24:37.746 A:middle
的整型参数操作
 
00:24:38.336 --> 00:24:40.136 A:middle
这意味着我们不需要
 
00:24:40.136 --> 00:24:42.046 A:middle
在闭包中放上一个表达式
 
00:24:42.436 --> 00:24:44.626 A:middle
我们可以把它分解成
 
00:24:44.626 --> 00:24:46.146 A:middle
各自的部分
 
00:24:46.146 --> 00:24:47.146 A:middle
成为更可读的指令
 
00:24:48.556 --> 00:24:49.966 A:middle
这里有一个我之前的
 
00:24:49.966 --> 00:24:51.306 A:middle
代码的直译
 
00:24:52.616 --> 00:24:53.936 A:middle
我现在还可以让它
 
00:24:54.326 --> 00:24:55.776 A:middle
更加的灵活
 
00:24:56.196 --> 00:24:57.806 A:middle
这就更具有可读性了
 
00:24:58.076 --> 00:24:59.346 A:middle
也可以更容易维护
 
00:24:59.686 --> 00:25:01.226 A:middle
它在一个快速的
 
00:25:01.296 --> 00:25:02.596 A:middle
合理的时间内编译
 
00:25:03.106 --> 00:25:06.336 A:middle
我要在这个环节展示的最后一个例子
 
00:25:06.336 --> 00:25:07.856 A:middle
并不像之前两个
 
00:25:07.856 --> 00:25:09.236 A:middle
一样 应用的
 
00:25:09.236 --> 00:25:10.786 A:middle
那么广泛
 
00:25:11.396 --> 00:25:13.256 A:middle
我要说说 Any Object 这个类型
 
00:25:14.766 --> 00:25:17.516 A:middle
Any Object 是一个描述
 
00:25:17.516 --> 00:25:20.646 A:middle
所有类别实例的便利的类型
 
00:25:20.736 --> 00:25:22.226 A:middle
不是一个结构体 或一个枚举
 
00:25:22.326 --> 00:25:23.416 A:middle
而是一个类
 
00:25:23.526 --> 00:25:24.666 A:middle
但是我们不知道是哪一个
 
00:25:25.726 --> 00:25:27.076 A:middle
不过它还有一个
 
00:25:27.076 --> 00:25:28.736 A:middle
从 Objective-C's ID 类型
 
00:25:28.736 --> 00:25:30.376 A:middle
传下来的附加的功能
 
00:25:31.206 --> 00:25:33.886 A:middle
这也是为什么 这个方法被称作语法
 
00:25:34.106 --> 00:25:36.066 A:middle
如果你试图调用一个方法
 
00:25:36.066 --> 00:25:38.096 A:middle
或在 Any Object 类型的数值上
 
00:25:38.156 --> 00:25:40.936 A:middle
读取其性质
 
00:25:40.936 --> 00:25:42.816 A:middle
Swift 会允许你这样做
 
00:25:42.816 --> 00:25:45.146 A:middle
前提是这个方法在你的
 
00:25:45.146 --> 00:25:47.106 A:middle
项目中是可见的
 
00:25:47.106 --> 00:25:48.416 A:middle
并被展示给了 Objective-C 运行时间
 
00:25:49.416 --> 00:25:51.576 A:middle
不过 这样是有代价的
 
00:25:52.346 --> 00:25:53.976 A:middle
因为编译器不知道
 
00:25:53.976 --> 00:25:55.306 A:middle
你要调用哪个方法
 
00:25:55.306 --> 00:25:57.616 A:middle
它需要检索
 
00:25:57.616 --> 00:25:59.516 A:middle
你整个项目所有可能的应用
 
00:25:59.756 --> 00:26:00.986 A:middle
和你所有引入的框架
 
00:26:00.986 --> 00:26:03.516 A:middle
因为编译器会认为
 
00:26:03.516 --> 00:26:04.576 A:middle
任何一个都有可能
 
00:26:04.576 --> 00:26:05.746 A:middle
是你要调用的那个
 
00:26:06.756 --> 00:26:08.316 A:middle
必须这样做的原因是
 
00:26:08.316 --> 00:26:09.706 A:middle
如果它们中没一个匹配
 
00:26:09.706 --> 00:26:10.776 A:middle
它就需要报错
 
00:26:12.586 --> 00:26:14.966 A:middle
所以与此相反 我们可以
 
00:26:14.966 --> 00:26:16.706 A:middle
更好更多更全面的
 
00:26:16.706 --> 00:26:19.106 A:middle
描述我们的意图
 
00:26:19.626 --> 00:26:21.096 A:middle
我们可以宏定义一个协议
 
00:26:21.866 --> 00:26:22.696 A:middle
它可以在相同的文件
 
00:26:22.696 --> 00:26:24.876 A:middle
或不同的文件中完成
 
00:26:25.426 --> 00:26:27.236 A:middle
重要的是一旦我们
 
00:26:27.236 --> 00:26:28.616 A:middle
将委托的性质
 
00:26:28.616 --> 00:26:30.546 A:middle
改成去使用我们协议
 
00:26:30.626 --> 00:26:32.756 A:middle
而不是 Any Object
 
00:26:32.756 --> 00:26:34.806 A:middle
那编译器就知道
 
00:26:34.806 --> 00:26:35.826 A:middle
在调用的是哪个方法
 
00:26:37.186 --> 00:26:38.276 A:middle
现在你有机会
 
00:26:38.276 --> 00:26:39.546 A:middle
检查所有实施类型
 
00:26:39.546 --> 00:26:41.846 A:middle
是否在正确
 
00:26:42.026 --> 00:26:43.866 A:middle
实施方法

