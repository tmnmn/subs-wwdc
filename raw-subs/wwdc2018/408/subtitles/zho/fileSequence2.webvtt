WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:28.926 --> 00:02:29.806 A:middle
一会我们会用一点时间
 
00:02:29.806 --> 00:02:32.696 A:middle
深入地了解这些
 
00:02:33.426 --> 00:02:34.546 A:middle
现在 我想用
 
00:02:34.546 --> 00:02:35.956 A:middle
一个样本项目来
 
00:02:35.956 --> 00:02:36.996 A:middle
开始我们的讨论
 
00:02:37.686 --> 00:02:38.656 A:middle
我们将看到
 
00:02:38.656 --> 00:02:40.686 A:middle
这个项目的依赖性图表
 
00:02:41.706 --> 00:02:43.736 A:middle
现在 一个依赖性图表
 
00:02:43.796 --> 00:02:46.006 A:middle
只是一个包含所有目标的名单
 
00:02:46.146 --> 00:02:47.206 A:middle
在这个例子中
 
00:02:47.206 --> 00:02:48.896 A:middle
我们将要构建五个目标
 
00:02:50.226 --> 00:02:51.336 A:middle
在这些目标中间
 
00:02:51.336 --> 00:02:53.466 A:middle
有依赖性信息
 
00:02:54.376 --> 00:02:55.966 A:middle
基于这两个信息
 
00:02:55.966 --> 00:02:58.696 A:middle
Xcode 可以得到我们的
 
00:02:58.696 --> 00:02:59.226 A:middle
构建次序
 
00:02:59.226 --> 00:03:01.696 A:middle
现在 让我们看看
 
00:03:01.696 --> 00:03:02.966 A:middle
它在时间表中是
 
00:03:02.966 --> 00:03:03.246 A:middle
什么样的
 
00:03:03.306 --> 00:03:08.086 A:middle
正如我们所见 
 
00:03:08.086 --> 00:03:09.486 A:middle
每个目标都按顺序构建得
 
00:03:09.486 --> 00:03:10.876 A:middle
很有秩序
 
00:03:11.396 --> 00:03:12.796 A:middle
它们都需要等到之前的
 
00:03:12.796 --> 00:03:14.386 A:middle
目标完成构建
 
00:03:14.786 --> 00:03:16.366 A:middle
就其本身而言 构建
 
00:03:16.366 --> 00:03:17.946 A:middle
时间线并没有什么错
 
00:03:18.356 --> 00:03:20.436 A:middle
但是这代表了对潜在的
 
00:03:20.436 --> 00:03:22.026 A:middle
硬件资源应用的浪费
 
00:03:22.376 --> 00:03:23.146 A:middle
尤其是在你有一个
 
00:03:23.146 --> 00:03:24.326 A:middle
如 iMac Pro 的
 
00:03:24.326 --> 00:03:25.846 A:middle
多核或微核机器
 
00:03:26.726 --> 00:03:28.356 A:middle
这对于作为开发者的你来说
 
00:03:28.356 --> 00:03:29.616 A:middle
就是一种时间的浪费
 
00:03:30.346 --> 00:03:32.416 A:middle
因此我们要采用
 
00:03:32.416 --> 00:03:34.466 A:middle
另一种方法
 
00:03:37.476 --> 00:03:37.576 A:middle
看起来大概是这样
 
00:03:37.786 --> 00:03:38.846 A:middle
现在 有几件事
 
00:03:38.846 --> 00:03:39.876 A:middle
或者很少的几件事
 
00:03:39.876 --> 00:03:40.456 A:middle
我想要提醒大家
 
00:03:40.926 --> 00:03:42.726 A:middle
首先 我们在构建项目中
 
00:03:42.726 --> 00:03:43.936 A:middle
所做的工作量
 
00:03:43.936 --> 00:03:45.286 A:middle
其实并没有变化
 
00:03:46.696 --> 00:03:49.456 A:middle
但是用来构建的时间 的确减少了
 
00:03:50.126 --> 00:03:51.396 A:middle
在这种情况下
 
00:03:51.396 --> 00:03:53.486 A:middle
时间其实大幅度减少了
 
00:03:53.946 --> 00:03:56.196 A:middle
我们可以通过
 
00:03:56.196 --> 00:03:59.466 A:middle
更好地利用可用的硬件
 
00:03:59.466 --> 00:04:02.736 A:middle
来减少构建的时间
 
00:04:02.946 --> 00:04:04.736 A:middle
如果并行
 
00:04:04.736 --> 00:04:07.366 A:middle
或者说并行是这么好的一件事
 
00:04:07.366 --> 00:04:09.036 A:middle
为什么我们不创建一个
 
00:04:09.036 --> 00:04:10.326 A:middle
和这个很像的构建图表
 
00:04:10.536 --> 00:04:11.796 A:middle
我们只需要在我们的构建时间表中
 
00:04:11.796 --> 00:04:13.016 A:middle
从头开始构建
 
00:04:14.156 --> 00:04:16.276 A:middle
在最好的情况下
 
00:04:16.276 --> 00:04:17.516 A:middle
你们将遇到确定性的
 
00:04:17.856 --> 00:04:18.876 A:middle
构建错误
 
00:04:19.096 --> 00:04:20.596 A:middle
这是因为依赖信息
 
00:04:20.596 --> 00:04:22.076 A:middle
其实是你们
 
00:04:22.076 --> 00:04:24.136 A:middle
项目配置的重要部分
 
00:04:24.796 --> 00:04:25.916 A:middle
当它像这样被设置时
 
00:04:26.636 --> 00:04:28.306 A:middle
你们将试着在你们构建
 
00:04:28.306 --> 00:04:29.956 A:middle
依赖性之前
 
00:04:29.956 --> 00:04:31.196 A:middle
去构建你们的游戏目标
 
00:04:31.456 --> 00:04:32.816 A:middle
这并不是一个好的状态
 
00:04:34.176 --> 00:04:35.216 A:middle
所以我们如何做到这样
 
00:04:35.876 --> 00:04:37.906 A:middle
我们如何从漫长的
 
00:04:37.906 --> 00:04:39.896 A:middle
系列化的构建时间线
 
00:04:39.896 --> 00:04:43.486 A:middle
转换成并行的构建时间
 
00:04:44.356 --> 00:04:45.586 A:middle
首先 你需要确保
 
00:04:45.586 --> 00:04:48.206 A:middle
Xcode 被设置并配置成
 
00:04:48.206 --> 00:04:49.446 A:middle
允许我们的目标
 
00:04:49.446 --> 00:04:51.076 A:middle
被平行构建
 
00:04:51.126 --> 00:04:52.516 A:middle
我们通过 Scheme Editor (方案编辑器）
 
00:04:52.516 --> 00:04:53.056 A:middle
完成这个指令
 
00:04:53.796 --> 00:04:54.876 A:middle
你可以打开 Scheme Chooser（方案选择器）
 
00:04:54.876 --> 00:04:56.226 A:middle
选择 Edit Scheme (编辑方案）
 
00:04:57.176 --> 00:04:58.366 A:middle
然后来到 Scheme Editor
 
00:04:58.836 --> 00:05:00.696 A:middle
明确来说 你需要
 
00:05:00.696 --> 00:05:01.826 A:middle
看一下 Build Action (构建行为）
 
00:05:02.936 --> 00:05:05.046 A:middle
在这里是 Build Options (构建选项）
 
00:05:05.366 --> 00:05:06.866 A:middle
这里有两个已经列出来的
 
00:05:07.196 --> 00:05:08.866 A:middle
第一个是 Parallelize Build (并行构建选项）
 
00:05:08.986 --> 00:05:10.916 A:middle
第二个是 Find Implicit Dependencies
 
00:05:10.916 --> 00:05:11.656 A:middle
（寻找隐含依赖性）
 
00:05:12.426 --> 00:05:14.146 A:middle
你可能想检查 Parallelize Build

