WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:11.526 --> 00:07:13.776 A:middle
我想再介绍一下
 
00:07:13.776 --> 00:07:15.276 A:middle
我们项目其余的依赖性
 
00:07:16.576 --> 00:07:17.916 A:middle
我们的 Shaders 目标
 
00:07:17.916 --> 00:07:19.196 A:middle
对于我们的实用性目标
 
00:07:19.196 --> 00:07:19.506 A:middle
有一个依赖性
 
00:07:20.886 --> 00:07:22.196 A:middle
我们的实用性 目标
 
00:07:22.196 --> 00:07:23.806 A:middle
在我们的物理目标上
 
00:07:23.806 --> 00:07:24.106 A:middle
有一个依赖性

00:07:25.146 --> 00:07:27.206 A:middle
最后 我们的测试（Tests)
 
00:07:27.206 --> 00:07:30.516 A:middle
对我们的 Shaders 和实用性目标
 
00:07:30.516 --> 00:07:31.676 A:middle
有一个依赖性
 
00:07:32.616 --> 00:07:33.206 A:middle
现在我们对我们项目的
 
00:07:33.206 --> 00:07:34.296 A:middle
配置有了
 
00:07:34.296 --> 00:07:35.806 A:middle
一定的了解
 
00:07:35.806 --> 00:07:37.266 A:middle
我们来看看
 
00:07:37.266 --> 00:07:38.996 A:middle
将这个序列化的构建过程
 
00:07:38.996 --> 00:07:41.106 A:middle
变成并行的
 
00:07:41.446 --> 00:07:43.556 A:middle
必要步骤

00:07:44.136 --> 00:07:45.286 A:middle
首先我们要看一看
 
00:07:45.286 --> 00:07:46.746 A:middle
我们的测试依赖性
 
00:07:48.876 --> 00:07:50.566 A:middle
现在 我将依赖性
 
00:07:50.566 --> 00:07:51.556 A:middle
分成了三种
 
00:07:51.556 --> 00:07:52.366 A:middle
不同类型
 
00:07:52.366 --> 00:07:53.896 A:middle
我想要谈论的依赖性
 
00:07:54.466 --> 00:07:55.866 A:middle
第一个依赖性
 
00:07:55.866 --> 00:07:57.366 A:middle
我称之为 “什么都做的”
 
00:07:57.366 --> 00:07:58.646 A:middle
依赖性
 
00:07:59.316 --> 00:08:00.566 A:middle
有一点很清楚的就是
 
00:08:00.566 --> 00:08:01.946 A:middle
这个测试
 
00:08:02.036 --> 00:08:03.686 A:middle
测试了很多成分
 
00:08:04.056 --> 00:08:05.096 A:middle
它测试了 Game
 
00:08:05.516 --> 00:08:06.596 A:middle
还测试了 Shaders
 
00:08:07.236 --> 00:08:08.606 A:middle
同时还测试了 Utilities
 
00:08:10.056 --> 00:08:11.866 A:middle
在这个例子中
 
00:08:11.866 --> 00:08:13.426 A:middle
最好将我们的测试分解
 
00:08:13.426 --> 00:08:14.366 A:middle
这样它就能测试
 
00:08:14.366 --> 00:08:15.356 A:middle
每个单独的成分
 
00:08:15.356 --> 00:08:17.586 A:middle
我们来试试这样操作会怎样
 
00:08:17.586 --> 00:08:18.686 A:middle
我们将介绍
 
00:08:18.686 --> 00:08:21.766 A:middle
构建过程中的并行性
 
00:08:23.306 --> 00:08:25.246 A:middle
我们在三个依赖性中都被构建了的
 
00:08:25.246 --> 00:08:26.676 A:middle
测试目标
 
00:08:26.736 --> 00:08:27.926 A:middle
现在可以只构建
 
00:08:27.926 --> 00:08:29.466 A:middle
在 Game 测试中寻找的部分
 
00:08:30.436 --> 00:08:31.896 A:middle
我们的 Shaders 测试和
 
00:08:31.896 --> 00:08:33.816 A:middle
Utilities 测试可以被移去
 
00:08:33.816 --> 00:08:34.996 A:middle
与我们其他的目标
 
00:08:34.996 --> 00:08:35.776 A:middle
并行构建
 
00:08:36.066 --> 00:08:37.236 A:middle
当它们各自的成分 
 
00:08:37.236 --> 00:08:38.396 A:middle
Shaders 和 Utilities
 
00:08:38.396 --> 00:08:40.456 A:middle
完成时即可进行构建
 
00:08:42.286 --> 00:08:44.626 A:middle
下一个我想要看的
 
00:08:44.626 --> 00:08:46.696 A:middle
依赖性类型就是
 
00:08:46.696 --> 00:08:48.526 A:middle
我称之为“爱管闲事的邻居”的
 
00:08:48.526 --> 00:08:49.126 A:middle
依赖性
 
00:08:49.706 --> 00:08:51.596 A:middle
这是需要存在的一种
 
00:08:51.596 --> 00:08:53.426 A:middle
依赖性
 
00:08:53.586 --> 00:08:54.806 A:middle
这个要考虑另一个目标
 
00:08:55.136 --> 00:08:57.226 A:middle
但是它只需要那个目标的一点
 
00:08:57.946 --> 00:08:59.276 A:middle
不过它将获得
 
00:08:59.276 --> 00:09:00.426 A:middle
在那个目标中的一切
 
00:09:01.226 --> 00:09:02.386 A:middle
如果我们看一下我们的游戏
 
00:09:02.806 --> 00:09:04.506 A:middle
它对 Physics Shaders 和 Utilities
 
00:09:04.676 --> 00:09:05.696 A:middle
有一个依赖性
 
00:09:06.046 --> 00:09:06.906 A:middle
这其实没问题
 
00:09:08.196 --> 00:09:09.936 A:middle
值得怀疑的是
 
00:09:09.936 --> 00:09:11.306 A:middle
在 Shaders 目标和 Utilities 目标
 
00:09:11.306 --> 00:09:13.026 A:middle
之间的依赖性
 
00:09:13.786 --> 00:09:15.436 A:middle
现在 我们的 Shaders目标
 
00:09:15.436 --> 00:09:16.936 A:middle
产生了一个元函数库
 
00:09:16.936 --> 00:09:18.556 A:middle
它本质上来说是一群
 
00:09:18.556 --> 00:09:19.596 A:middle
将在我们的显示卡上 
 
00:09:19.596 --> 00:09:20.256 A:middle
运行的 GPU 代码 
 
00:09:21.376 --> 00:09:23.286 A:middle
我们的 Utilities 目标
 
00:09:23.286 --> 00:09:24.696 A:middle
生成的则是一个正常的框架
 
00:09:24.696 --> 00:09:25.666 A:middle
也就是 CPU 代码
 
00:09:25.936 --> 00:09:26.906 A:middle
所以已经有一些
  
00:09:26.906 --> 00:09:28.946 A:middle
疑似依赖性了
 
00:09:29.506 --> 00:09:30.926 A:middle
当我们深入挖掘时
 
00:09:30.926 --> 00:09:32.796 A:middle
我们会发现 Utilities 目标
 
00:09:32.796 --> 00:09:34.466 A:middle
实际上有一个会生成
 
00:09:34.466 --> 00:09:36.316 A:middle
被两个目标使用的信息
 
00:09:36.316 --> 00:09:37.566 A:middle
的构建过程
 
00:09:37.826 --> 00:09:38.726 A:middle
这样很好
 
00:09:39.276 --> 00:09:40.466 A:middle
只不过 Shaders
 
00:09:40.466 --> 00:09:42.016 A:middle
不再需要从 Utilities 目标中
 
00:09:42.016 --> 00:09:42.796 A:middle
获得任何其他事物
 
00:09:43.306 --> 00:09:47.356 A:middle
所以最好将其转入其目标
 
00:09:48.226 --> 00:09:49.666 A:middle
我们会看到
 
00:09:49.666 --> 00:09:50.866 A:middle
这个小小的增量改变
 
00:09:50.866 --> 00:09:52.196 A:middle
其实对我们整个的
 
00:09:52.196 --> 00:09:53.666 A:middle
构建时间线有着
 
00:09:53.666 --> 00:09:54.746 A:middle
巨大的影响
 
00:09:56.826 --> 00:09:58.446 A:middle
所以刚刚移入的
 
00:09:58.446 --> 00:09:59.896 A:middle
新的绿色框是我们新的代码目标
 
00:10:00.186 --> 00:10:01.476 A:middle
现在我们可以缩小我们的实用性目标
 
00:10:01.476 --> 00:10:03.426 A:middle
因为我们将其
 
00:10:03.426 --> 00:10:05.346 A:middle
移入到 Code Gen (自动生产安全程式码)
 
00:10:06.076 --> 00:10:07.426 A:middle
因为 Code Gen 没有其他
 
00:10:07.426 --> 00:10:09.336 A:middle
依赖性 它可以移动到
 
00:10:09.336 --> 00:10:11.176 A:middle
我们构建过程的前端
 
00:10:11.506 --> 00:10:13.056 A:middle
它还可以与我们的 Physics 目标
 
00:10:13.346 --> 00:10:14.516 A:middle
也就是底端的红框
 
00:10:14.516 --> 00:10:15.686 A:middle
一起并行构建
 
00:10:17.146 --> 00:10:18.756 A:middle
最后 因为 Shaders 不再
 
00:10:18.756 --> 00:10:20.436 A:middle
依赖于 Utilities
 
00:10:20.436 --> 00:10:21.616 A:middle
它不需要等待
 
00:10:21.616 --> 00:10:25.396 A:middle
Utilities 和 Physics 目标的构建
 
00:10:25.686 --> 00:10:26.896 A:middle
与此相反 一旦 Code Gen 目标
 
00:10:26.896 --> 00:10:30.566 A:middle
完成后它就能被构建
 
00:10:30.766 --> 00:10:31.986 A:middle
最后我想要和大家介绍的
 
00:10:31.986 --> 00:10:33.476 A:middle
依赖性我称之为
 
00:10:33.476 --> 00:10:35.336 A:middle
“被遗忘的”

