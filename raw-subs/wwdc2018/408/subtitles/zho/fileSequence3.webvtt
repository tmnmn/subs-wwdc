WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:14.706 --> 00:05:16.176 A:middle
这会允许 Xcode 通过
 
00:05:16.176 --> 00:05:17.656 A:middle
你的目标来使用
 
00:05:17.656 --> 00:05:19.296 A:middle
依赖性信息
 
00:05:19.296 --> 00:05:20.846 A:middle
这样就可以让其尝试着并行
 
00:05:20.846 --> 00:05:21.376 A:middle
构建你的目标
 
00:05:21.956 --> 00:05:24.646 A:middle
让我们来看看
 
00:05:24.936 --> 00:05:25.996 A:middle
如何在 Xcode 内
 
00:05:25.996 --> 00:05:27.116 A:middle
配置你的依赖性
 
00:05:28.286 --> 00:05:29.406 A:middle
这是通过 Build Phase Editor (构建阶段
 
00:05:29.406 --> 00:05:30.036 A:middle
编辑器）实现的
 
00:05:30.586 --> 00:05:31.496 A:middle
你可以通过你的 Project Navigator
 
00:05:31.496 --> 00:05:33.616 A:middle
 (项目导航器） 选择你的项目
 
00:05:33.616 --> 00:05:35.566 A:middle
然后来到 Build 
 
00:05:35.566 --> 00:05:36.116 A:middle
Phase Editor
 
00:05:36.636 --> 00:05:37.806 A:middle
在这个例子中我们
 
00:05:37.806 --> 00:05:39.556 A:middle
来看下 Game Target (游戏目标）或者 Game
 
00:05:39.556 --> 00:05:39.916 A:middle
Project (游戏项目）
 
00:05:40.326 --> 00:05:43.816 A:middle
接下来点击 Build Phases (构建阶段）
 
00:05:44.916 --> 00:05:46.036 A:middle
我们来看一下

00:05:46.036 --> 00:05:46.626 A:middle
Game Target

00:05:46.866 --> 00:05:47.946 A:middle
这是针对我们的 Game Target 的
 
00:05:47.946 --> 00:05:48.806 A:middle
Build Phase Editor 
 
00:05:48.886 --> 00:05:50.156 A:middle
我们将看看它的依赖性
 
00:05:50.156 --> 00:05:51.536 A:middle
是如何配置的
 
00:05:52.056 --> 00:05:52.826 A:middle
首先我希望 你们能注意一下 
 
00:05:52.826 --> 00:05:54.916 A:middle
Link Binary with Libraries phase
 
00:05:55.186 --> 00:05:57.166 A:middle
（带函数库阶段的连接二进制）
 
00:05:57.836 --> 00:05:59.446 A:middle
现在是你定义
 
00:05:59.446 --> 00:06:00.746 A:middle
所有你想要连接到你目标的
 
00:06:00.746 --> 00:06:03.566 A:middle
项目的构建过程阶段
 
00:06:04.676 --> 00:06:06.046 A:middle
这种情况下我有两个项目
 
00:06:06.046 --> 00:06:08.346 A:middle
分别是物理和实用性
 
00:06:08.716 --> 00:06:11.526 A:middle
现在这些是在我们的项目中
 
00:06:11.526 --> 00:06:12.856 A:middle
和我们的工作环境中的目标
 
00:06:13.086 --> 00:06:14.696 A:middle
Xcode 可以在这些目标中
 
00:06:14.696 --> 00:06:16.716 A:middle
创建一个隐含的依赖性
 
00:06:17.766 --> 00:06:19.356 A:middle
如果你在使用如
 
00:06:19.356 --> 00:06:22.156 A:middle
自动连接或
 
00:06:22.216 --> 00:06:23.756 A:middle
其他的 LD 构建标志构建设置
 
00:06:23.786 --> 00:06:25.416 A:middle
这些都不会
 
00:06:25.416 --> 00:06:27.846 A:middle
暗中地在你这里生效
 
00:06:28.166 --> 00:06:29.236 A:middle
你要么在这个构建中
 
00:06:29.236 --> 00:06:30.636 A:middle
或者在目标依赖性构建过程中
 
00:06:30.686 --> 00:06:34.996 A:middle
生成一个明确的依赖性
 
00:06:35.396 --> 00:06:37.806 A:middle
我们可以看到在这里
 
00:06:37.806 --> 00:06:38.686 A:middle
还有一个名为 Shaders (渲染）的
 
00:06:38.686 --> 00:06:39.206 A:middle
另一个项目
 
00:06:39.616 --> 00:06:42.106 A:middle
Shaders 并不在连接时候
 
00:06:42.106 --> 00:06:43.926 A:middle
使用 而是在
 
00:06:43.926 --> 00:06:45.776 A:middle
我们现有的目标中
 
00:06:45.776 --> 00:06:47.456 A:middle
被另一个构建过程使用
 
00:06:48.096 --> 00:06:49.316 A:middle
很重要的一件事就是
 
00:06:49.316 --> 00:06:50.926 A:middle
我们让 Xcode 知道
 
00:06:50.926 --> 00:06:52.256 A:middle
这是一个依赖性而且我们需要
 
00:06:52.256 --> 00:06:54.506 A:middle
等 Shaders 完成编辑
 
00:06:54.566 --> 00:06:57.886 A:middle
同时 在我们构建现有的目标前
 
00:06:57.886 --> 00:06:58.876 A:middle
就进行构建
 
00:06:59.406 --> 00:07:02.336 A:middle
现在 这个目标实际上
 
00:07:02.336 --> 00:07:03.256 A:middle
存在于不同的项目
 
00:07:03.846 --> 00:07:05.626 A:middle
如果你想要
 
00:07:05.626 --> 00:07:06.826 A:middle
对该项目做个参考
 
00:07:06.826 --> 00:07:08.376 A:middle
你可以拖拽如
 
00:07:08.376 --> 00:07:10.266 A:middle
你目前正在处理的项目的孩子一样
 
00:07:10.266 --> 00:07:11.526 A:middle
拖拽该项目

