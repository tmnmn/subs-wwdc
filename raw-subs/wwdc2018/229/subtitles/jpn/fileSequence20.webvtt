WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.931 --> 00:20:01.068 align:start position:21% line:-2
“Gummy Bears”を含む
配列に行き

00:20:01.468 --> 00:20:03.470 align:start position:32% line:-1
最初の要素を選びます

00:20:03.570 --> 00:20:06.073 align:start position:25% line:-1
クロージャを参照しなくてよく

00:20:06.173 --> 00:20:09.643 align:start position:32% line:-2
遅延ではなく
先行の配列となります

00:20:11.845 --> 00:20:13.313 align:start position:34% line:-1
では遅延の利点は？

00:20:14.081 --> 00:20:18.485 align:start position:25% line:-2
マップやフィルタの
オーバーヘッドを避けられます

00:20:18.585 --> 00:20:22.656 align:start position:29% line:-2
コレクションの計算の
一部が欲しい時に便利です

00:20:23.257 --> 00:20:27.060 align:start position:36% line:-2
クロージャに
影響がある場合は

00:20:27.161 --> 00:20:29.296 align:start position:32% line:-1
使うのは避けましょう

00:20:29.797 --> 00:20:31.732 align:start position:29% line:-1
APIの範囲をまたぐ時は

00:20:31.832 --> 00:20:35.903 align:start position:30% line:-2
標準的なコレクションに
落とし込みましょう

00:20:36.103 --> 00:20:38.405 align:start position:25% line:-1
lazyは実装の詳細なのです

00:20:39.973 --> 00:20:43.877 align:start position:29% line:-2
可変コレクションで
様々なことが可能でしたが

00:20:44.945 --> 00:20:47.948 align:start position:25% line:-2
Swiftは
コレクションも可変的にします

00:20:49.049 --> 00:20:52.152 align:start position:29% line:-2
さらに２種類の
コレクションを紹介します

00:20:53.120 --> 00:20:55.289 align:start position:30% line:-1
まずは可変コレクション

00:20:55.956 --> 00:21:00.260 align:start position:29% line:-2
セッターを加えると
長さを変えず 一定時間で

