WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.134 --> 00:15:04.104 align:start position:30% line:-1
遅延コピーと似ています

00:15:04.204 --> 00:15:07.741 align:start position:32% line:-2
コピーのタイミングを
指定できるのです

00:15:08.242 --> 00:15:14.414 align:start position:27% line:-2
このように遅延であることが
別のところで役立ちます

00:15:15.482 --> 00:15:17.818 align:start position:29% line:-1
例えば関数の呼び出しです

00:15:18.719 --> 00:15:21.622 align:start position:25% line:-1
Swiftでは先行となります

00:15:21.989 --> 00:15:26.393 align:start position:30% line:-2
出入力があると
すぐに処理されるのです

00:15:27.227 --> 00:15:30.531 align:start position:20% line:-2
この例では
１から4000のレンジから始めます

00:15:30.631 --> 00:15:33.734 align:start position:25% line:-1
非常に簡潔な数字の表示方法で

00:15:33.834 --> 00:15:37.004 align:start position:25% line:-1
最初と最後を指定するだけです

00:15:37.237 --> 00:15:39.640 align:start position:34% line:-2
各要素に２を掛けて
マッピングすると

00:15:39.740 --> 00:15:42.609 align:start position:21% line:-1
4000の要素に割り当てられます

00:15:42.709 --> 00:15:45.913 align:start position:25% line:-1
各要素がマッピングされました

00:15:46.346 --> 00:15:48.415 align:start position:27% line:-1
４つの要素にフィルタします

00:15:48.782 --> 00:15:52.753 align:start position:25% line:-2
4004が
割り当てられたことになります

00:15:53.187 --> 00:15:55.255 align:start position:23% line:-1
4004の要素分の容量ですが―

00:15:56.123 --> 00:15:58.025 align:start position:30% line:-1
必要なのは４つだけです

