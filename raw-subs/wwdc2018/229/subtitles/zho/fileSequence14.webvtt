WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.773 --> 00:14:00.774 align:middle line:-1
生成切片

00:14:01.008 --> 00:14:03.977 align:middle line:-2
然后尝试释放这8个数字的
原始存储空间

00:14:04.178 --> 00:14:06.346 align:middle line:-1
我将该数组设为一个空数组

00:14:07.514 --> 00:14:10.050 align:middle line:-1
第一件趣事的线索是

00:14:10.117 --> 00:14:12.786 align:middle line:-1
发生在我们访问切片的第一个元素时

00:14:13.520 --> 00:14:14.788 align:middle line:-1
我们竟然能够得到1

00:14:14.855 --> 00:14:19.126 align:middle line:-2
尽管我们已经释放了
原始数组的存储空间

00:14:19.526 --> 00:14:22.229 align:middle line:-2
要么它有一个副本
要么发生了一些不可思议的事情

00:14:23.330 --> 00:14:26.533 align:middle line:0
如果我们想要消除那个缓冲区

00:14:27.100 --> 00:14:30.003 align:middle line:0
这里发生的神奇的事
是我们还能访问那个缓冲区

00:14:30.103 --> 00:14:31.471 align:middle line:0
所以如果我们想清除它

00:14:31.538 --> 00:14:32.773 align:middle line:0
我们可以做的是

00:14:33.073 --> 00:14:35.042 align:middle line:0
从切片创建一个
数组的真实副本

00:14:35.809 --> 00:14:38.445 align:middle line:0
然后如果我们将该切片
设置为一个空数组

00:14:39.079 --> 00:14:40.480 align:middle line:0
那个副本仍然有效

00:14:41.415 --> 00:14:43.050 align:middle line:-1
让我们看看发生了什么

00:14:43.250 --> 00:14:44.384 align:middle line:-1
我们从一个数组开始

00:14:45.018 --> 00:14:47.387 align:middle line:-2
然后我们根据该数组的前半部分
构造了一个切片

00:14:47.454 --> 00:14:49.756 align:middle line:-1
（复制切片）

00:14:49.823 --> 00:14:51.758 align:middle line:-1
然后我们创建了它的一个副本

00:14:52.426 --> 00:14:54.928 align:middle line:-2
将数组设置为空
并将该切片也设置为空

00:14:54.995 --> 00:14:59.032 align:middle line:-2
只有在我们这样做后
底层存储才会真正消失

