WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:57.998 --> 00:30:01.068 align:middle line:-2
只存在一个数组
我们只是把熊猫放到数组中

00:30:01.134 --> 00:30:03.303 align:middle line:-1
（值和引用集合）

00:30:03.537 --> 00:30:05.038 align:middle line:-2
在Swift中
使用foundation集合时

00:30:05.105 --> 00:30:08.675 align:middle line:-1
你需要记住的第二件事

00:30:09.476 --> 00:30:12.446 align:middle line:-2
是Swift中的所有
Objective-C API

00:30:12.513 --> 00:30:14.581 align:middle line:-1
都以Swift原生值类型出现

00:30:15.048 --> 00:30:17.951 align:middle line:-2
这实际上非常棒
因为它允许每种语言的代码

00:30:18.018 --> 00:30:20.554 align:middle line:-1
自然而然使用它们各自最擅长的类型

00:30:20.988 --> 00:30:22.022 align:middle line:-1
但是这如何实现呢？

00:30:22.155 --> 00:30:24.024 align:middle line:-1
这两种语言对这些集合

00:30:24.091 --> 00:30:25.192 align:middle line:-1
有完全不同的实现

00:30:25.259 --> 00:30:26.360 align:middle line:-2
（SWIFT中的
OBJECTIVE-C API）

00:30:26.426 --> 00:30:29.062 align:middle line:-1
这能起作用的原因就是所谓的桥接

00:30:29.496 --> 00:30:33.033 align:middle line:-2
桥接是我们如何在两种不同的
运行时表示之间进行转换

00:30:33.100 --> 00:30:36.203 align:middle line:-2
这是必要的 因为Swift
和Objective-C

00:30:36.270 --> 00:30:38.739 align:middle line:-2
我相信你已经注意到
是非常不同的语言

00:30:38.906 --> 00:30:41.208 align:middle line:-2
它们具有完全不同的
编译和运行时特性

00:30:41.275 --> 00:30:42.309 align:middle line:-1
（桥接）

00:30:42.376 --> 00:30:46.213 align:middle line:-2
尽管我们已经优化了桥接速度
但这并不是免费的

00:30:46.480 --> 00:30:49.516 align:middle line:-1
在两种语言之间桥接时总会产生开销

00:30:50.884 --> 00:30:52.252 align:middle line:-1
当我们桥接时会发生什么？

00:30:52.920 --> 00:30:54.555 align:middle line:-1
当我们在语言之间桥接时

00:30:54.621 --> 00:30:57.357 align:middle line:-2
我们必须先建立新的存储空间
对等的存储空间

00:30:57.424 --> 00:30:59.059 align:middle line:-1
如果你用一种语言占用N个单位

00:30:59.126 --> 00:31:00.827 align:middle line:-1
在另一种语言中这也将占用N个

