WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.319 --> 00:17:00.320 align:middle line:0
第一个元素

00:17:00.687 --> 00:17:02.723 align:middle line:0
但LazyFilterCollection
并不知道

00:17:02.956 --> 00:17:04.724 align:middle line:0
然而它包装了可能知道它的东西

00:17:05.025 --> 00:17:06.492 align:middle line:0
因此它将询问
MapCollection

00:17:06.627 --> 00:17:09.663 align:middle line:0
而MapCollection
也不知道它的第一个元素

00:17:10.163 --> 00:17:11.632 align:middle line:0
但它包装了一个可能知道的集合

00:17:11.832 --> 00:17:13.934 align:middle line:0
的确 Range知道
它的第一个元素

00:17:14.935 --> 00:17:17.171 align:middle line:0
Range的第一个元素是值1

00:17:17.538 --> 00:17:19.473 align:middle line:0
它被返回到
LazyMapCollection

00:17:19.705 --> 00:17:23.109 align:middle line:0
现在LazyMapCollection
可以实际执行它的闭包

00:17:23.877 --> 00:17:25.012 align:middle line:0
计算出值为2

00:17:25.444 --> 00:17:27.214 align:middle line:0
该值被返回到
LazyFilterCollection

00:17:27.281 --> 00:17:28.782 align:middle line:0
并作为候选的第一个元素

00:17:29.283 --> 00:17:32.319 align:middle line:0
在这种情况下 我们很幸运
因为2恰好比10小

00:17:32.419 --> 00:17:35.656 align:middle line:0
所以LazyFilterCollection
在第一次尝试中就找到了它的第一个元素

00:17:36.256 --> 00:17:37.891 align:middle line:0
并将其返回给调用者

00:17:38.992 --> 00:17:40.961 align:middle line:-1
这是很不同的计算方式

00:17:41.328 --> 00:17:45.499 align:middle line:-2
我提到懒惰的目的是
只根据需要进行计算

00:17:46.033 --> 00:17:49.036 align:middle line:-1
但它避免的另一件事是创建中间存储

00:17:49.203 --> 00:17:50.737 align:middle line:-1
所以我想向你展示一个例子

00:17:52.339 --> 00:17:54.842 align:middle line:-2
假设我们有一个
包含不同类型的熊的数组

00:17:55.242 --> 00:17:58.879 align:middle line:-2
然而我想指出的是
其中一些熊是多余的

00:17:59.379 --> 00:18:00.914 align:middle line:-1
我们已经知道他们是熊

