WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.899 --> 00:25:00.534 align:middle line:-1
并且由于这是一个并发调度队列

00:25:00.601 --> 00:25:03.637 align:middle line:-1
想象代码同时运行是很有帮助的

00:25:03.904 --> 00:25:06.240 align:middle line:-2
我将它们放在同一行上
以代表并发执行的情况

00:25:07.007 --> 00:25:08.108 align:middle line:-1
稍后在app中

00:25:08.175 --> 00:25:10.043 align:middle line:-1
让我们检查一下那些睡觉的熊

00:25:11.245 --> 00:25:14.548 align:middle line:0
有时我们会看到Grandpa
和Cub在快乐地打盹

00:25:15.048 --> 00:25:18.752 align:middle line:0
其他时候 Cub会先睡觉
然后才是Grandpa

00:25:19.419 --> 00:25:22.389 align:middle line:0
有时 非常神秘
只有Grandpa在睡觉

00:25:23.790 --> 00:25:25.425 align:middle line:0
其他时候
则是只有Cub在睡觉

00:25:26.560 --> 00:25:28.962 align:middle line:0
有时候 我们的程序崩溃了

00:25:29.029 --> 00:25:30.497 align:middle line:0
并且没有熊能够睡觉

00:25:32.132 --> 00:25:33.166 align:middle line:-1
所有这些可能性

00:25:33.233 --> 00:25:35.068 align:middle line:-1
表明存在可能的竞争条件

00:25:35.135 --> 00:25:36.770 align:middle line:-1
其实考虑到这个例子中的线程

00:25:36.837 --> 00:25:40.140 align:middle line:-1
这的确有可能发生

00:25:41.074 --> 00:25:42.176 align:middle line:-1
我们可以使用Xcode中的

00:25:42.242 --> 00:25:45.179 align:middle line:-2
ThreadSanitizer
或TSan来证明这一点

00:25:45.646 --> 00:25:46.647 align:middle line:-1
假设我们这样做的话

00:25:47.214 --> 00:25:49.216 align:middle line:-1
我们将得到这样的输出

00:25:49.783 --> 00:25:51.585 align:middle line:-1
TSan的确发现了竞争

00:25:51.652 --> 00:25:54.121 align:middle line:-2
它告诉我们当前存在
Swift访问竞争

00:25:54.655 --> 00:25:56.590 align:middle line:-1
它会告诉我们涉及哪些线程

00:25:57.491 --> 00:25:58.625 align:middle line:-1
并在最后给个总结

00:25:58.692 --> 00:26:01.695 align:middle line:-2
告诉我们应该从哪一行代码开始
寻找我们的问题

