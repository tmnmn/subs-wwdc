WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.946 --> 00:13:00.147 align:middle line:-1
而Substring也是为了

00:13:00.214 --> 00:13:02.616 align:middle line:-1
处理最常见的字符串行为而定制的

00:13:03.350 --> 00:13:04.785 align:middle line:-1
一些类型 如Set

00:13:05.953 --> 00:13:07.855 align:middle line:-1
将使用标准库中定义的

00:13:07.921 --> 00:13:09.189 align:middle line:-1
广义切片类型

00:13:09.289 --> 00:13:10.390 align:middle line:-1
因为Set是无序的

00:13:10.457 --> 00:13:11.758 align:middle line:-1
它们能做的事情并不多

00:13:11.825 --> 00:13:14.161 align:middle line:-2
它们基本上只需要维护
一个起始和一个结束索引

00:13:14.228 --> 00:13:16.230 align:middle line:-1
以及一个指向原始集合的指针

00:13:16.864 --> 00:13:19.800 align:middle line:-2
另一方面 Data和Range是
它们自己的切片类型

00:13:20.300 --> 00:13:22.469 align:middle line:-1
所以这里有很多选项

00:13:22.970 --> 00:13:25.172 align:middle line:-1
在继续之前我还想谈一件

00:13:25.239 --> 00:13:26.240 align:middle line:-1
关于切片的事情

00:13:27.708 --> 00:13:29.743 align:middle line:-1
假设我们有一个非常大的集合

00:13:29.810 --> 00:13:32.079 align:middle line:-1
比如有上亿个元素

00:13:33.180 --> 00:13:35.816 align:middle line:-2
然后我们为该集合的一部分
创建几个小切片

00:13:36.650 --> 00:13:38.418 align:middle line:-1
重要的是要记住切片

00:13:38.485 --> 00:13:41.455 align:middle line:-1
使整个原始集合保持活跃状态

00:13:41.688 --> 00:13:43.423 align:middle line:-1
只要切片还存在

00:13:43.524 --> 00:13:45.092 align:middle line:-1
而这可能导致令人惊讶的问题

00:13:45.158 --> 00:13:46.527 align:middle line:-1
我们看看这在代码中是什么样的

00:13:48.095 --> 00:13:49.963 align:middle line:-1
假设我在数组上有一个扩展

00:13:50.030 --> 00:13:51.465 align:middle line:-1
允许我返回其前半部分

00:13:51.532 --> 00:13:55.269 align:middle line:-2
我在这里使用dropLast函数
来做到这一点

00:13:55.836 --> 00:13:57.504 align:middle line:-1
我们有一个包含8个数字的数组

00:13:57.571 --> 00:13:58.739 align:middle line:-1
我们调用扩展

00:13:59.773 --> 00:14:00.774 align:middle line:-1
生成切片

