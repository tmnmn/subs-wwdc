WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:01.268 --> 00:35:03.237 align:middle line:-1
现在我们知道了这些细节

00:35:03.470 --> 00:35:06.306 align:middle line:-1
我们可以做得更好一些

00:35:06.373 --> 00:35:07.474 align:middle line:-1
我们只需桥接一次

00:35:08.709 --> 00:35:10.010 align:middle line:-1
让我们重新测量代码

00:35:10.944 --> 00:35:13.614 align:middle line:-1
并看到我们的确已将性能提高了一半

00:35:13.680 --> 00:35:15.949 align:middle line:-1
但今年我们可以做得更好一点

00:35:16.650 --> 00:35:18.986 align:middle line:-1
哦 现在我们在这里不再进行桥接

00:35:19.486 --> 00:35:21.421 align:middle line:-1
但今年我们可以做得更好一点

00:35:21.722 --> 00:35:23.991 align:middle line:-2
今年当我们获取
text.string属性时

00:35:24.057 --> 00:35:25.659 align:middle line:-2
如果我们使用as语法
转换为NSString

00:35:25.726 --> 00:35:29.263 align:middle line:-2
当我们得到变量时
实际上不会发生任何桥接

00:35:30.564 --> 00:35:34.868 align:middle line:-2
并且通过这样做
该字符串现是一个NSString

00:35:35.035 --> 00:35:36.336 align:middle line:-2
当我们调用
range(of)属性时

00:35:36.403 --> 00:35:39.873 align:middle line:-2
我们实际上
会自动获得NSRange

00:35:39.940 --> 00:35:41.642 align:middle line:-1
我们不需要在Swift原生类型

00:35:41.708 --> 00:35:45.379 align:middle line:-2
和NSRange之间
做任何范围转换

00:35:45.612 --> 00:35:46.613 align:middle line:-1
这非常棒

00:35:46.680 --> 00:35:49.082 align:middle line:-1
我们来看看这段代码的效率

00:35:49.149 --> 00:35:50.150 align:middle line:-1
这看起来很不错

00:35:50.217 --> 00:35:52.686 align:middle line:-1
这比我们刚才耗费的

00:35:52.753 --> 00:35:54.354 align:middle line:-1
几乎800毫秒的时间要快得多

00:35:55.489 --> 00:35:57.658 align:middle line:-2
然而我想指出的是
这里仍然发生了桥接

00:35:57.724 --> 00:35:59.026 align:middle line:-1
这是很小的桥

00:35:59.660 --> 00:36:00.827 align:middle line:-1
但我们仍进行了桥接

