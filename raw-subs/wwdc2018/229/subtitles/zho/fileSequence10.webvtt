WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:57.431 --> 00:10:00.901 align:middle line:-1
因为这样的集合没有第二个元素

00:10:03.136 --> 00:10:06.139 align:middle line:0
现在可以假设我们的集合有一个元素

00:10:07.774 --> 00:10:11.144 align:middle line:-2
我们可以使用index(after)函数
来获取第二个元素或第二个索引

00:10:11.612 --> 00:10:13.714 align:middle line:-1
但我们需要确保该索引是有效的

00:10:14.147 --> 00:10:15.182 align:middle line:-1
我们直观地来看一下

00:10:15.282 --> 00:10:17.985 align:middle line:-2
我们向前移动了一个元素
但如果集合中只有一个元素

00:10:18.051 --> 00:10:19.786 align:middle line:-1
我们现在的索引实际上是无效的

00:10:19.853 --> 00:10:21.288 align:middle line:-1
如果我们试图用下标索引它

00:10:21.355 --> 00:10:23.557 align:middle line:-1
我们就会得到刚才看到的严重错误

00:10:23.624 --> 00:10:24.691 align:middle line:-1
所以我们检查它是否有效

00:10:24.758 --> 00:10:26.159 align:middle line:-1
这与空链非常相似

00:10:26.226 --> 00:10:27.961 align:middle line:-1
我们只需要确保我们的索引

00:10:28.028 --> 00:10:30.163 align:middle line:-2
不等于endIndex
否则返回nil

00:10:30.564 --> 00:10:35.102 align:middle line:-2
同样 因为单元素集合
没有第二个元素

00:10:35.969 --> 00:10:37.838 align:middle line:0
这时我们确认了所有假设都成立

00:10:37.905 --> 00:10:40.107 align:middle line:0
并知道我们的集合至少有两个元素

00:10:40.407 --> 00:10:42.743 align:middle line:0
所以我们可以安全地
为该索引使用下标运算符

00:10:43.877 --> 00:10:45.279 align:middle line:0
从而检索我们想要的值

00:10:47.181 --> 00:10:49.883 align:middle line:-1
这些代码看起来很多

00:10:50.150 --> 00:10:52.753 align:middle line:-2
但值得指出的是
这个通用目的索引

00:10:52.819 --> 00:10:55.322 align:middle line:-2
将可以处理任何集合
这非常棒

00:10:55.889 --> 00:10:58.425 align:middle line:-2
但其实Swift有更好的方法
来做到这一点

00:10:58.859 --> 00:11:00.394 align:middle line:-1
即一个叫做切片的东西

