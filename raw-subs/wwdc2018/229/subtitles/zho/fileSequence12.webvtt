WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.686 --> 00:12:02.890 align:middle line:-2
看起来就是我们得到集合中
第二个元素的简便方法

00:12:03.724 --> 00:12:05.125 align:middle line:-1
让我们回到之前的解决方案

00:12:05.192 --> 00:12:07.561 align:middle line:-1
看看切片的表达能力有多强

00:12:08.629 --> 00:12:10.597 align:middle line:-1
还记得我们之前写的复杂的

00:12:10.664 --> 00:12:11.765 align:middle line:-1
索引检查代码吗

00:12:12.799 --> 00:12:15.235 align:middle line:-2
通过使用dropFirst
我们将让切片

00:12:15.302 --> 00:12:17.371 align:middle line:-2
替我们处理那些复杂的
索引边界检查过程

00:12:18.005 --> 00:12:19.706 align:middle line:-1
由于第一个返回值是可选的

00:12:20.941 --> 00:12:24.444 align:middle line:-2
这在集合为空或只有一个元素时
也能按预期工作

00:12:25.078 --> 00:12:26.880 align:middle line:-1
让我们将发生的事情可视化出来

00:12:27.614 --> 00:12:28.615 align:middle line:-1
我们从一个数组开始

00:12:28.682 --> 00:12:31.185 align:middle line:0
我们通过丢弃第一个元素
来构造一个切片

00:12:32.352 --> 00:12:37.624 align:middle line:0
然后我们使用first属性
对切片进行下标运算

00:12:37.691 --> 00:12:39.760 align:middle line:0
并从原始集合中获取元素

00:12:39.927 --> 00:12:42.863 align:middle line:-2
我不知道你怎么想
但我更愿意维护这样的代码

00:12:44.898 --> 00:12:47.034 align:middle line:-2
每种类型都可以
自由描述自己的切片类型

00:12:47.100 --> 00:12:48.101 align:middle line:-1
很多也正是这样做的

00:12:48.669 --> 00:12:51.038 align:middle line:-2
例如 Array
定义了ArraySlice

00:12:51.104 --> 00:12:53.240 align:middle line:-1
它们是为了数组最经常处理的情况

00:12:53.307 --> 00:12:54.508 align:middle line:-1
所特别定制的

00:12:54.908 --> 00:12:58.378 align:middle line:-2
类似地 String定义了
Substring切片类型

00:12:58.946 --> 00:13:00.147 align:middle line:-1
而Substring也是为了

