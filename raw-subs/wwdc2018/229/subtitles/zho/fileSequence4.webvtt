WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.206 --> 00:04:01.108 align:middle line:-1
我们还可以通过添加自己的扩展

00:04:01.175 --> 00:04:02.576 align:middle line:-1
来让集合更加强大

00:04:03.043 --> 00:04:03.911 align:middle line:-1
（间隔元素）

00:04:03.977 --> 00:04:06.713 align:middle line:-1
集合已经提供了遍历每个元素的方法

00:04:06.780 --> 00:04:10.584 align:middle line:-2
但我想要一个函数
能够让我遍历间隔元素

00:04:10.651 --> 00:04:12.519 align:middle line:-1
即在遍历过程中跳过一些值

00:04:13.587 --> 00:04:15.989 align:middle line:-2
我们将通过向集合添加扩展
来实现这点

00:04:16.055 --> 00:04:17.858 align:middle line:-1
我们从方法签名开始

00:04:18.158 --> 00:04:19.793 align:middle line:-2
我们称该函数为
everyOther

00:04:19.860 --> 00:04:23.397 align:middle line:-2
并且它将采用一个闭包
来调用我们想要的每个元素

00:04:24.064 --> 00:04:25.766 align:middle line:-1
我们得到迭代的边界

00:04:26.500 --> 00:04:29.403 align:middle line:-2
并定义一个初始值为
start的值的变量

00:04:29.469 --> 00:04:30.904 align:middle line:-1
该变量值将随运行而改变

00:04:32.105 --> 00:04:34.174 align:middle line:-1
我们在当前元素上调用闭包

00:04:34.441 --> 00:04:37.177 align:middle line:-1
并递增我们的索引

00:04:37.911 --> 00:04:39.646 align:middle line:-1
此时我们的索引可能已经无效

00:04:39.713 --> 00:04:40.848 align:middle line:-1
即我们已到集合的最后

00:04:40.914 --> 00:04:42.916 align:middle line:-1
因此我们需要确保检查它

00:04:43.250 --> 00:04:45.819 align:middle line:-2
如果还没越界
那么我们可以再次增加索引

00:04:46.353 --> 00:04:47.888 align:middle line:-1
从而跳过间隔元素

00:04:48.355 --> 00:04:51.825 align:middle line:0
如果我们在1到10的封闭范围内
调用这个函数

00:04:52.092 --> 00:04:54.261 align:middle line:0
可以看到我们跳过了偶数元素

00:04:55.929 --> 00:04:59.366 align:middle line:-2
我们看到集合可以让我们
描述一些非常强大的行为

