WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.938 --> 00:19:01.008 align:middle line:-2
“Spectacled”被打印
它也不包含“Bear”一词

00:19:01.074 --> 00:19:02.976 align:middle line:-2
最后我们移动到
“Gummy Bears”

00:19:03.610 --> 00:19:05.612 align:middle line:-1
它包含“Bear”这个词

00:19:06.680 --> 00:19:10.651 align:middle line:-2
LazyFilterCollection
现在可以将其返回给它的调用者

00:19:12.085 --> 00:19:14.154 align:middle line:-2
若我们再次调用first
会发生什么？

00:19:15.255 --> 00:19:18.492 align:middle line:-1
其实还是一样的过程

00:19:18.892 --> 00:19:22.396 align:middle line:-2
我们询问LazyFilterCollection
它将再次询问底层集合

00:19:22.462 --> 00:19:25.866 align:middle line:-2
底层集合重复刚才的计算
并将结果返回给调用者

00:19:27.935 --> 00:19:29.970 align:middle line:-1
现在这可能不是你想要的

00:19:30.237 --> 00:19:32.806 align:middle line:-2
所以如果你发现自己需要
反复调用惰性集合

00:19:32.873 --> 00:19:34.107 align:middle line:-1
来计算其结果

00:19:34.541 --> 00:19:36.910 align:middle line:-2
有一种方法可以确保
该计算只发生一次

00:19:37.911 --> 00:19:40.380 align:middle line:-2
我们可以通过从惰性集合
创建一个新的非惰性集合

00:19:40.447 --> 00:19:43.684 align:middle line:-1
来确保惰性集合只迭代一次

00:19:44.384 --> 00:19:45.385 align:middle line:-1
当你这样做时

00:19:45.752 --> 00:19:47.654 align:middle line:-1
它仍然会将计算委托给惰性集合

00:19:47.721 --> 00:19:48.555 align:middle line:-1
但现在迭代过程

00:19:48.622 --> 00:19:51.658 align:middle line:-1
将处理完整个底层集合

00:19:53.760 --> 00:19:55.028 align:middle line:-1
从而产生

00:19:55.095 --> 00:19:57.331 align:middle line:-1
该惰性计算的非惰性版本

00:19:57.865 --> 00:20:00.934 align:middle line:-2
这例子中 我们得到一个包含字符串
“Gummy Bears”的数组

