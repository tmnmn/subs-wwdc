WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.159 --> 00:21:00.160 align:middle line:-1
但不能更改它的长度

00:21:00.427 --> 00:21:02.596 align:middle line:-2
你必须能够
在常数时间内完成这项任务

00:21:02.663 --> 00:21:04.031 align:middle line:-1
（可变集合）

00:21:05.632 --> 00:21:08.502 align:middle line:-1
下一个被称为范围可替换集合

00:21:08.569 --> 00:21:10.504 align:middle line:-1
你可以在这种集合中

00:21:10.571 --> 00:21:14.308 align:middle line:-1
删除元素或插入元素

00:21:16.076 --> 00:21:18.779 align:middle line:-2
现在我想谈谈
我一直被问到的一个问题

00:21:20.347 --> 00:21:22.916 align:middle line:-2
为什么我的完全合理的
集合代码会崩溃？

00:21:23.784 --> 00:21:25.185 align:middle line:-1
像所有好问题的答案一样

00:21:25.252 --> 00:21:27.688 align:middle line:-1
一般我会反问他们我自己的一些问题

00:21:28.355 --> 00:21:31.425 align:middle line:-2
有时候我会从经典问题开始
“你想做什么？”

00:21:31.692 --> 00:21:33.293 align:middle line:-1
接下来我马上会问

00:21:33.360 --> 00:21:35.262 align:middle line:-1
“你是怎么使用集合的？”

00:21:35.362 --> 00:21:36.363 align:middle line:-1
“你在尝试改变它们吗？”

00:21:36.430 --> 00:21:38.866 align:middle line:-2
“你确定没有从多个线程
访问你的集合吗？”

00:21:38.932 --> 00:21:41.401 align:middle line:-1
我问这些问题是因为其答案

00:21:42.436 --> 00:21:45.038 align:middle line:-1
常常能引出导致问题的根本原因

00:21:46.039 --> 00:21:48.141 align:middle line:-1
首先让我们先假设跟线程没关系

00:21:48.208 --> 00:21:50.878 align:middle line:-2
我还没准备好考虑线程
现在9:30都还没到呢

00:21:50.944 --> 00:21:52.079 align:middle line:-1
（崩溃的集合代码）

00:21:52.145 --> 00:21:53.280 align:middle line:-1
假设我们有一个数组

00:21:53.780 --> 00:21:56.350 align:middle line:-1
我们获取一个已知元素的索引

00:21:57.184 --> 00:21:58.418 align:middle line:-1
这个例子中 值为“E”

00:21:58.652 --> 00:22:01.755 align:middle line:-2
然后我们通过删除它的第一个元素
来改变集合

