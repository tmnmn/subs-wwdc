WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.692 --> 00:26:01.695 align:middle line:-2
告诉我们应该从哪一行代码开始
寻找我们的问题

00:26:02.329 --> 00:26:06.700 align:middle line:-2
所有这些证据对于我们发现错误
都非常有帮助

00:26:06.934 --> 00:26:08.268 align:middle line:-1
我们已证明这里有一个漏洞

00:26:08.335 --> 00:26:11.238 align:middle line:-2
在我的经历中
TSan从未撒过谎

00:26:12.606 --> 00:26:13.607 align:middle line:-1
我们可以

00:26:13.841 --> 00:26:16.710 align:middle line:-2
通过解除熊的同时入睡能力
来解决这个问题

00:26:16.910 --> 00:26:18.979 align:middle line:-1
我们将使用串行调度队列来实现这点

00:26:19.746 --> 00:26:21.715 align:middle line:-1
现在一次只有一只熊可以入睡

00:26:21.949 --> 00:26:24.184 align:middle line:-2
所以如果我们现在再次查看
sleepingBears变量

00:26:24.885 --> 00:26:26.887 align:middle line:-1
并在适当的队列上小心操作

00:26:27.988 --> 00:26:29.122 align:middle line:-1
我们可以看到 果然

00:26:29.189 --> 00:26:31.959 align:middle line:-2
Grandpa和Cub
如预期的那样 平静地打瞌睡

00:26:34.194 --> 00:26:36.830 align:middle line:-2
所以对于在多线程环境下使用集合
我的建议是

00:26:36.897 --> 00:26:40.133 align:middle line:-2
尝试隔离你的数据
以便它只能被单个线程访问

00:26:40.300 --> 00:26:41.635 align:middle line:-1
当你不能这样做时

00:26:42.436 --> 00:26:44.705 align:middle line:-1
确保你实现适当形式的互斥

00:26:44.771 --> 00:26:47.040 align:middle line:-1
如串行调度队列或锁

00:26:47.741 --> 00:26:50.511 align:middle line:-2
并总是使用ThreadSanitizer
来检查你的工作

00:26:50.844 --> 00:26:54.248 align:middle line:-2
在app发布之前发现错误
要比之后好得多

00:26:54.314 --> 00:26:55.716 align:middle line:-1
（建议：多线程）

00:26:55.782 --> 00:26:58.519 align:middle line:-1
我对使用可变集合还有更多的建议

00:26:59.753 --> 00:27:03.490 align:middle line:-2
第一个是如果你可以避免它
就尽量不要使用可变状态

