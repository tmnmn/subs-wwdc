WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.660 --> 00:36:00.827 align:middle line:-1
但我们仍进行了桥接

00:36:01.328 --> 00:36:03.830 align:middle line:-2
这里的“brown”是一个
Swift值类型的字符串

00:36:05.032 --> 00:36:10.938 align:middle line:-2
每当我们调用Objective-C API
中NSString的range(of)属性时

00:36:11.004 --> 00:36:13.774 align:middle line:-2
我们实际上会将这个小小的
字符串桥接回NSString

00:36:14.908 --> 00:36:17.144 align:middle line:-2
在这种情况下它的开销不大
我只进行了一次

00:36:17.211 --> 00:36:18.946 align:middle line:-2
但你可以想象
如果这是一个循环

00:36:19.079 --> 00:36:20.948 align:middle line:-2
随着时间推移
这些小开销会积少成多

00:36:21.014 --> 00:36:22.549 align:middle line:-1
所以你要注意

00:36:22.616 --> 00:36:25.219 align:middle line:-1
避免重复桥接相同的小字符串

00:36:25.485 --> 00:36:28.222 align:middle line:-2
但在你做这样的优化之前
总是要进行测量

00:36:29.723 --> 00:36:31.258 align:middle line:-1
现在我们看过了桥接的细节

00:36:31.358 --> 00:36:34.294 align:middle line:-2
我想提供些关于何时使用
foundation集合的建议

00:36:35.662 --> 00:36:37.564 align:middle line:-1
当你需要具有引用语义的集合时

00:36:37.631 --> 00:36:39.800 align:middle line:-1
你应该考虑明确使用它们

00:36:40.467 --> 00:36:42.102 align:middle line:-1
你不需要自己写一个

00:36:42.169 --> 00:36:43.637 align:middle line:-1
我们已经有很多很棒的集合了

00:36:44.238 --> 00:36:45.706 align:middle line:-1
当你知道你在处理引用类型时

00:36:45.772 --> 00:36:46.974 align:middle line:-1
也应该使用它

00:36:47.040 --> 00:36:49.743 align:middle line:-2
像NS代理或核心数据托管对象
之类的东西

00:36:51.078 --> 00:36:52.679 align:middle line:-1
最后应该考虑使用它们的情景是

00:36:52.746 --> 00:36:54.848 align:middle line:-2
当你在与Objective-C
代码之间来回切换时

00:36:55.148 --> 00:36:56.884 align:middle line:-2
但我强烈建议你
只有在测量并确定

00:36:57.351 --> 00:37:00.053 align:middle line:-1
桥接确实是性能问题的罪魁祸首后

