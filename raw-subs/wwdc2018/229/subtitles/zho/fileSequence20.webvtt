WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.865 --> 00:20:00.934 align:middle line:-2
这例子中 我们得到一个包含字符串
“Gummy Bears”的数组

00:20:01.535 --> 00:20:03.570 align:middle line:-1
如果我们打印该数组的第一个元素

00:20:03.637 --> 00:20:06.106 align:middle line:-2
我们根本不需要咨询闭包
或者惰性集合

00:20:06.173 --> 00:20:09.276 align:middle line:-2
我们基本消除了其惰性
并得到一个“急切的”数组

00:20:11.879 --> 00:20:13.046 align:middle line:-1
我们何时该懒惰呢？

00:20:14.081 --> 00:20:16.517 align:middle line:-1
惰性集合是一种非常好的能够消除

00:20:16.583 --> 00:20:18.485 align:middle line:-1
链式映射和过滤器的开销的方法

00:20:18.585 --> 00:20:19.786 align:middle line:-1
当你发现你只需要

00:20:19.853 --> 00:20:22.556 align:middle line:-2
集合运算的部分结果时
它们就非常有用

00:20:23.257 --> 00:20:27.027 align:middle line:-2
但如果你的闭包有副作用
你就应该避免使用懒惰策略

00:20:27.127 --> 00:20:29.396 align:middle line:-1
你的闭包应该鲜有副作用

00:20:29.830 --> 00:20:31.765 align:middle line:-2
并且记得一定要恢复…
或者应该说

00:20:31.832 --> 00:20:34.234 align:middle line:-1
一定要考虑重新恢复到普通集合

00:20:34.301 --> 00:20:35.736 align:middle line:-1
当你跨越API边界时

00:20:36.069 --> 00:20:38.172 align:middle line:-1
惰性通常应该是一个实现细节

00:20:38.238 --> 00:20:39.940 align:middle line:-1
（建议：何时使用惰性？）

00:20:40.007 --> 00:20:42.142 align:middle line:-1
到目前为止 我们已经使用可变集合

00:20:42.209 --> 00:20:43.677 align:middle line:-1
做了很多很酷的事情

00:20:44.978 --> 00:20:47.681 align:middle line:-2
但Swift也允许我们
改变我们的集合

00:20:47.748 --> 00:20:48.982 align:middle line:-1
（集合协议层次结构）

00:20:49.049 --> 00:20:50.751 align:middle line:-1
让我们来谈谈

00:20:50.817 --> 00:20:52.319 align:middle line:-1
这两种尚未讨论过的集合

00:20:53.187 --> 00:20:55.088 align:middle line:-1
其中第一个是可变集合

00:20:55.989 --> 00:20:57.191 align:middle line:-1
它为下标添加了一个setter

00:20:57.257 --> 00:20:59.092 align:middle line:-1
以便你可以更改集合的内容

00:20:59.159 --> 00:21:00.160 align:middle line:-1
但不能更改它的长度

