WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.476 --> 00:27:01.166 A:middle
The first of which is if you can

00:27:01.166 --> 00:27:02.676 A:middle
avoid it, don't use mutable

00:27:02.676 --> 00:27:03.366 A:middle
state at all.

00:27:04.456 --> 00:27:05.706 A:middle
So far all the difficulties that

00:27:05.706 --> 00:27:06.906 A:middle
I've described have come about

00:27:06.906 --> 00:27:07.916 A:middle
because we've been working with

00:27:07.916 --> 00:27:08.526 A:middle
mutable state.

00:27:08.926 --> 00:27:10.066 A:middle
You can avoid all the potential

00:27:10.066 --> 00:27:11.356 A:middle
for this complexity by avoiding

00:27:11.356 --> 00:27:12.686 A:middle
mutable collections in the first

00:27:12.686 --> 00:27:13.096 A:middle
place.

00:27:13.866 --> 00:27:14.976 A:middle
Many times you can actually

00:27:14.976 --> 00:27:16.116 A:middle
emulate the mutations that you

00:27:16.116 --> 00:27:18.026 A:middle
want to perform by using a slice

00:27:18.766 --> 00:27:20.676 A:middle
or using a lazy wrapper, and

00:27:20.676 --> 00:27:21.666 A:middle
it's almost always easier to

00:27:21.666 --> 00:27:22.796 A:middle
understand data that cannot

00:27:22.856 --> 00:27:23.316 A:middle
change.

00:27:23.626 --> 00:27:25.416 A:middle
And thanks to mutability being

00:27:25.576 --> 00:27:27.066 A:middle
built into Swift, the compiler

00:27:27.066 --> 00:27:28.196 A:middle
will help you if you're leaving

00:27:28.196 --> 00:27:29.276 A:middle
a state mutable when you're not

00:27:29.276 --> 00:27:30.726 A:middle
actually mutating it.

00:27:32.436 --> 00:27:33.756 A:middle
Now I have one more piece of

00:27:33.756 --> 00:27:35.486 A:middle
advice that actually concerns

00:27:35.486 --> 00:27:36.746 A:middle
how best to use mutable state

00:27:36.746 --> 00:27:38.656 A:middle
when you have to.

00:27:38.856 --> 00:27:39.656 A:middle
And that's when you're forming

00:27:39.656 --> 00:27:40.396 A:middle
new collections.

00:27:40.606 --> 00:27:41.606 A:middle
You can help performance if

00:27:41.606 --> 00:27:42.786 A:middle
you're lucky enough to know an

00:27:42.786 --> 00:27:45.246 A:middle
exact count or a really good

00:27:45.246 --> 00:27:46.156 A:middle
approximation of how many

00:27:46.156 --> 00:27:47.056 A:middle
elements you're actually going

00:27:47.056 --> 00:27:47.226 A:middle
to need.

00:27:47.776 --> 00:27:49.326 A:middle
Most collection APIs have a way

00:27:49.326 --> 00:27:50.466 A:middle
of being able to provide this

00:27:50.536 --> 00:27:51.756 A:middle
hint, and when you do this, you

00:27:51.756 --> 00:27:53.136 A:middle
get exactly the size you need

00:27:53.136 --> 00:27:53.846 A:middle
with no overhead.

00:27:54.496 --> 00:27:56.146 A:middle
If you don't, our collections

00:27:56.146 --> 00:27:57.286 A:middle
are general purpose tools.

00:27:58.106 --> 00:27:59.036 A:middle
They're meant to work on a wide

00:27:59.036 --> 00:28:00.126 A:middle
variety of cases, and as you

