WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.536 --> 00:29:00.196 A:middle
call it x.

00:29:00.196 --> 00:29:01.456 A:middle
It will be an array of strings.

00:29:02.476 --> 00:29:04.466 A:middle
We get an empty array called x.

00:29:05.076 --> 00:29:06.206 A:middle
With a reference type, we get an

00:29:06.206 --> 00:29:08.306 A:middle
empty array, but x is pointing

00:29:08.306 --> 00:29:08.606 A:middle
to it.

00:29:10.036 --> 00:29:12.086 A:middle
We then mutate that array with

00:29:12.086 --> 00:29:12.656 A:middle
the value type.

00:29:12.656 --> 00:29:14.086 A:middle
That array is mutated in line.

00:29:14.736 --> 00:29:16.326 A:middle
With the reference type, that

00:29:16.486 --> 00:29:17.786 A:middle
array is, the reference, the

00:29:17.786 --> 00:29:19.646 A:middle
array that is being referenced

00:29:19.696 --> 00:29:20.816 A:middle
is mutated in line.

00:29:21.406 --> 00:29:22.286 A:middle
We add another variable.

00:29:22.556 --> 00:29:24.376 A:middle
With the value type, something

00:29:24.376 --> 00:29:25.276 A:middle
really special happens.

00:29:25.546 --> 00:29:26.316 A:middle
We actually don't copy the

00:29:26.316 --> 00:29:27.156 A:middle
storage at this point.

00:29:27.396 --> 00:29:29.766 A:middle
Why is an array that knows that

00:29:29.766 --> 00:29:30.926 A:middle
its storage is actually owned by

00:29:30.926 --> 00:29:31.056 A:middle
x?

00:29:31.056 --> 00:29:33.366 A:middle
And why is that actually going

00:29:33.436 --> 00:29:34.666 A:middle
to perform that copy until

00:29:34.666 --> 00:29:35.536 A:middle
either of those collections is

00:29:35.536 --> 00:29:35.916 A:middle
mutated.

00:29:36.676 --> 00:29:37.456 A:middle
The reference type is a little

00:29:37.456 --> 00:29:37.956 A:middle
bit different.

00:29:38.946 --> 00:29:40.616 A:middle
Y is just another pointer to the

00:29:40.616 --> 00:29:41.666 A:middle
same underlying array.

00:29:43.096 --> 00:29:44.516 A:middle
So let's go ahead and mutate y.

00:29:44.656 --> 00:29:45.516 A:middle
We'll put another bear in that

00:29:45.516 --> 00:29:45.786 A:middle
array.

00:29:46.126 --> 00:29:47.266 A:middle
With the value type what happens

00:29:47.546 --> 00:29:48.786 A:middle
is first we invoke that copy on

00:29:48.786 --> 00:29:49.336 A:middle
write machinery.

00:29:49.486 --> 00:29:51.256 A:middle
We're writing to a y, so we need

00:29:51.256 --> 00:29:53.816 A:middle
to copy it, and then we can

00:29:53.816 --> 00:29:54.966 A:middle
insert the next bear.

00:29:55.146 --> 00:29:57.106 A:middle
With the reference, it's a

00:29:57.106 --> 00:29:57.826 A:middle
little bit simpler.

00:29:58.056 --> 00:29:58.846 A:middle
There's only one array.

00:29:59.216 --> 00:30:00.756 A:middle
We simply put the panda in the

