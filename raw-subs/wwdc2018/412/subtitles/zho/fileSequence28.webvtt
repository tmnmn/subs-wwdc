WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.512 --> 00:28:00.347 align:middle line:0
我们可以找到其中之一的内存地址

00:28:00.647 --> 00:28:03.650 align:middle line:0
现在我们可以使用
po内存地址

00:28:03.717 --> 00:28:06.453 align:middle line:0
如果你是Objective-C开发者
你可能熟悉该命令

00:28:06.520 --> 00:28:08.255 align:middle line:0
这也行不通
那是因为Swift

00:28:08.322 --> 00:28:11.792 align:middle line:-1
不会将数字视为指针

00:28:11.859 --> 00:28:13.126 align:middle line:0
并为你解引用

00:28:13.193 --> 00:28:16.396 align:middle line:0
所以需要在Objective-C
上下文中做到这一点

00:28:16.930 --> 00:28:18.565 align:middle line:0
我们可以做跟刚才同样的事情

00:28:18.932 --> 00:28:20.434 align:middle line:0
但我觉得这样更方便

00:28:20.634 --> 00:28:22.402 align:middle line:-1
我喜欢将其简化为

00:28:22.469 --> 00:28:25.372 align:middle line:-1
一个简单的命令

00:28:26.340 --> 00:28:28.709 align:middle line:-2
所以我打算通过使用命令别名
来做到这一点

00:28:29.042 --> 00:28:30.711 align:middle line:0
我把这个命令称为poc

00:28:31.211 --> 00:28:32.312 align:middle line:0
我已创建了一个别名

00:28:32.379 --> 00:28:33.914 align:middle line:0
我能简单地poc那个内存地址

00:28:34.114 --> 00:28:36.149 align:middle line:0
并查看该对象的调试描述

00:28:36.750 --> 00:28:37.885 align:middle line:0
我想向你展示另一种方式

00:28:38.085 --> 00:28:41.955 align:middle line:0
来查看对象的描述
当你只有其内存地址的时候

00:28:42.322 --> 00:28:45.759 align:middle line:0
在Swift中你可以使用一个叫做
unsafeBitCast的函数

00:28:46.360 --> 00:28:48.061 align:middle line:0
给它一个内存地址
它不安全是因为

00:28:48.128 --> 00:28:50.931 align:middle line:0
它依赖你来提供正确的类型

00:28:51.231 --> 00:28:53.100 align:middle line:0
因此我给它
ScoreboardView.self

00:28:54.001 --> 00:28:57.471 align:middle line:0
现在我们看到我们可以使用
unsafeBitCast函数来查看一个对象的

00:28:57.538 --> 00:28:58.405 align:middle line:0
调试描述

00:28:59.139 --> 00:29:01.041 align:middle line:0
unsafeBitCast函数
的一个好处是

