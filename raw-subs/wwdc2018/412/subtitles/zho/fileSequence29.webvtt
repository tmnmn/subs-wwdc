WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.139 --> 00:29:01.041 align:middle line:0
unsafeBitCast函数
的一个好处是

00:29:01.108 --> 00:29:02.676 align:middle line:-1
它返回一个经过类型转换的结果

00:29:02.943 --> 00:29:06.246 align:middle line:-2
所以我们可以调用它的函数
和属性名称 例如.frame

00:29:06.780 --> 00:29:09.016 align:middle line:0
我想看一下它的中心点

00:29:09.349 --> 00:29:10.884 align:middle line:0
然后修改该中心点

00:29:10.951 --> 00:29:12.152 align:middle line:0
我们将其改为300

00:29:12.819 --> 00:29:15.088 align:middle line:0
现在我们可以看到
它已经变成了300

00:29:15.622 --> 00:29:18.258 align:middle line:0
但模拟器中的视图并没有移动

00:29:18.325 --> 00:29:19.159 align:middle line:0
为什么会这样呢？

00:29:19.693 --> 00:29:20.727 align:middle line:0
我们在调试器中暂停了

00:29:20.794 --> 00:29:24.198 align:middle line:0
所以Core Animation
目前不会将任何视图模块更改

00:29:24.264 --> 00:29:25.432 align:middle line:0
应用到屏幕的帧缓冲区

00:29:25.499 --> 00:29:27.534 align:middle line:-2
但我们可以要求Core Animation
为我们做这件事

00:29:28.001 --> 00:29:31.572 align:middle line:0
只需使用表达式
CAtransaction.flush()

00:29:33.106 --> 00:29:35.976 align:middle line:0
这告诉Core Animation
更新屏幕的帧缓冲区

00:29:42.049 --> 00:29:45.252 align:middle line:-2
现在我可以用这两行代码
来修复新的位置

00:29:45.319 --> 00:29:47.921 align:middle line:0
继续刷新屏幕
并四处移动该视图

00:29:47.988 --> 00:29:49.590 align:middle line:0
实际上 我觉得将这些都包装到

00:29:49.656 --> 00:29:51.992 align:middle line:0
一条命令中来移动视图会很方便

00:29:52.092 --> 00:29:54.094 align:middle line:0
所以我将这么做

00:29:54.661 --> 00:29:55.662 align:middle line:0
我们来看看

00:29:56.196 --> 00:29:58.932 align:middle line:-2
我将切换到终端
并打开一个Python文件

00:29:59.666 --> 00:30:00.968 align:middle line:-1
为什么使用Python文件呢？

