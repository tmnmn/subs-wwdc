WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.313 --> 00:33:02.115 align:start position:27% line:-1
配列を作ることができました

00:33:02.216 --> 00:33:07.254 align:start position:27% line:-2
しかしコンパイラの生成した
コードは 複雑でした

00:33:07.488 --> 00:33:11.725 align:start position:30% line:-2
Swift 4.2では
この機能を実装し直し

00:33:11.825 --> 00:33:16.130 align:start position:34% line:-2
メンタルモデルに
沿うようにしました

00:33:16.296 --> 00:33:21.135 align:start position:25% line:-2
ご覧のコードが
コンパイル時間の警告を出力し

00:33:21.235 --> 00:33:27.908 align:start position:23% line:-2
Optionalの整数値として
コンパイラが解析します

00:33:28.475 --> 00:33:33.914 align:start position:25% line:-2
極端なケースなので
通常のコードには影響しません

00:33:34.014 --> 00:33:37.084 align:start position:27% line:-1
しかし気になるようであれば

00:33:37.184 --> 00:33:40.487 align:start position:32% line:-2
Swift.orgの
ブログをご覧ください

00:33:40.587 --> 00:33:46.160 align:start position:29% line:-2
変更された点について
詳しい解説が載っています

00:33:47.294 --> 00:33:50.797 align:start position:29% line:-1
では最後の議題に移ります

00:33:50.898 --> 00:33:54.201 align:start position:34% line:-2
メモリへの
排他的チェックです

00:33:55.102 --> 00:34:01.475 align:start position:23% line:-2
Swift 4にもメモリの
排他的チェック機能がありました

