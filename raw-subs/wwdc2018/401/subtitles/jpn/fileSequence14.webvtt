WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:57.704 --> 00:14:00.707 align:start position:20% line:-1
Swift 4.2では改善しました

00:14:00.807 --> 00:14:05.012 align:start position:34% line:-2
オブジェクトは
リリースされません

00:14:05.112 --> 00:14:08.415 align:start position:36% line:-2
保持とリリースの
工程は消えました

00:14:10.517 --> 00:14:13.320 align:start position:27% line:-1
これで無駄が縮小されました

00:14:13.854 --> 00:14:15.355 align:start position:36% line:-1
これによる利点は

00:14:15.456 --> 00:14:18.525 align:start position:36% line:-2
コードサイズが
縮小されたことと

00:14:18.625 --> 00:14:20.661 align:start position:32% line:-1
ランタイムの改善です

00:14:23.330 --> 00:14:26.099 align:start position:29% line:-1
また文字列も改善しました

00:14:26.533 --> 00:14:30.537 align:start position:32% line:-2
以前は24だったのが
今は16バイトです

00:14:30.637 --> 00:14:34.274 align:start position:32% line:-2
メモリと動作との間の
妥協点です

00:14:35.242 --> 00:14:40.347 align:start position:30% line:-2
まだこのサイズでも
文字列を最適化できます

00:14:40.614 --> 00:14:44.084 align:start position:27% line:-1
文字列が15バイト内の場合

00:14:44.184 --> 00:14:47.321 align:start position:36% line:-2
文字列の型として
表示されます

00:14:47.421 --> 00:14:50.924 align:start position:32% line:-2
異なるバッファに
移す必要はありません

00:14:51.325 --> 00:14:55.395 align:start position:32% line:-2
これでメモリと動作が
さらに改善されます

00:14:55.629 --> 00:14:58.365 align:start position:29% line:-1
文字列内の最適化と同様に

00:14:58.465 --> 00:15:00.834 align:start position:27% line:-1
多くの文字列を入力できます

