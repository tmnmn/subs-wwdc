WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.586 --> 00:09:00.506 A:middle
我们来谈谈工具

00:09:00.506 --> 00:09:01.446 A:middle
方面的改进

00:09:02.536 --> 00:09:04.076 A:middle
在 Platform State of the Union 会议中

00:09:04.076 --> 00:09:05.006 A:middle
我们提到

00:09:05.106 --> 00:09:06.206 A:middle
Xcode 9 中的

00:09:06.206 --> 00:09:07.416 A:middle
Swift 项目构建

00:09:07.416 --> 00:09:09.366 A:middle
也得到了显著改善

00:09:10.176 --> 00:09:12.176 A:middle
这些结果是在一台配备

00:09:12.176 --> 00:09:13.516 A:middle
四核 i7 处理器的 MacBook Pro 上得到的

00:09:13.516 --> 00:09:17.416 A:middle
我们来仔细看看其中之一

00:09:18.896 --> 00:09:20.456 A:middle
这个项目混合了

00:09:20.456 --> 00:09:21.776 A:middle
Objective-C 和 Swift 代码

00:09:22.066 --> 00:09:24.666 A:middle
它最初是一个 Objective-C 项目 随后

00:09:24.666 --> 00:09:25.526 A:middle
开始采用 Swift

00:09:26.216 --> 00:09:27.786 A:middle
这种情况很常见

00:09:28.756 --> 00:09:29.576 A:middle
屏幕上的构建时间

00:09:29.576 --> 00:09:32.156 A:middle
提升无法反映

00:09:32.156 --> 00:09:33.826 A:middle
构建这段 Swift 代码

00:09:33.876 --> 00:09:35.536 A:middle
到底比之前快了多少

00:09:36.356 --> 00:09:37.526 A:middle
如果我们只关注

00:09:37.526 --> 00:09:39.826 A:middle
Swift 构建速度的提升

00:09:39.826 --> 00:09:42.896 A:middle
构建速度实际上快了三倍

00:09:43.386 --> 00:09:44.776 A:middle
这就是为什么

00:09:45.046 --> 00:09:47.536 A:middle
项目速度提升只有 1.6 倍

00:09:49.656 --> 00:09:51.096 A:middle
可以看到

00:09:51.096 --> 00:09:52.216 A:middle
构建速度提升

00:09:52.216 --> 00:09:53.706 A:middle
整体取决于

00:09:53.706 --> 00:09:54.766 A:middle
项目性质 使用多少

00:09:54.766 --> 00:09:56.816 A:middle
Swift 代码 以及处理器的

00:09:56.816 --> 00:09:58.606 A:middle
核数 但实际情况中

00:09:58.766 --> 00:10:01.476 A:middle
许多项目都提速多达两倍

