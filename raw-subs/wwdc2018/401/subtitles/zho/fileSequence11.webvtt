WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.566 --> 00:11:01.446 A:middle
编译（Whole Module Compilation）

00:11:01.446 --> 00:11:02.906 A:middle
目标中全部文件

00:11:02.906 --> 00:11:04.226 A:middle
总是一起构建

00:11:04.386 --> 00:11:05.836 A:middle
进行优化的

00:11:05.836 --> 00:11:07.326 A:middle
可能性最高

00:11:07.326 --> 00:11:09.756 A:middle
重点不是优化的数量 而是

00:11:09.756 --> 00:11:11.366 A:middle
进行优化的可能性

00:11:12.166 --> 00:11:14.146 A:middle
而如果是调试版本（Debug）

00:11:14.146 --> 00:11:15.176 A:middle
则是增量（Incremental）构建

00:11:15.386 --> 00:11:16.486 A:middle
并非所有文件

00:11:16.486 --> 00:11:18.626 A:middle
都会构建 或者再构建

00:11:19.616 --> 00:11:20.506 A:middle
这是性能表现

00:11:20.506 --> 00:11:22.536 A:middle
和构建时间权衡的结果

00:11:23.516 --> 00:11:24.826 A:middle
调试版本构建的

00:11:24.826 --> 00:11:25.746 A:middle
优化水平默认仍然是

00:11:25.746 --> 00:11:26.966 A:middle
无优化（No optimization）

00:11:26.966 --> 00:11:27.946 A:middle
这样构建速度更快

00:11:27.946 --> 00:11:29.806 A:middle
调试信息更全

00:11:29.806 --> 00:11:32.096 A:middle
发行版本构建则着重优化速度

00:11:32.636 --> 00:11:35.306 A:middle
我们稍后会再提到优化水平

00:11:38.436 --> 00:11:42.696 A:middle
好的 分离编译模式和

00:11:42.696 --> 00:11:45.296 A:middle
优化水平

00:11:45.356 --> 00:11:46.516 A:middle
反映了一个非常有趣的权宜之计

00:11:46.516 --> 00:11:48.096 A:middle
有人发现有时候

00:11:48.096 --> 00:11:50.176 A:middle
如果

00:11:50.176 --> 00:11:51.126 A:middle
结合全模组

00:11:51.126 --> 00:11:53.946 A:middle
编译并且无优化时

00:11:53.946 --> 00:11:54.876 A:middle
可以更快的

00:11:55.036 --> 00:11:56.026 A:middle
构建调试版本

00:11:56.966 --> 00:11:58.786 A:middle
这是因为

00:11:58.786 --> 00:12:02.246 A:middle
这一组合显著减少了

