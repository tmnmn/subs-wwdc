WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.666 --> 00:18:01.406 A:middle
你们遇到的

00:18:01.406 --> 00:18:03.276 A:middle
各类常见问题

00:18:03.276 --> 00:18:05.756 A:middle
也是你们想出了

00:18:05.756 --> 00:18:07.636 A:middle
解决方案

00:18:07.636 --> 00:18:09.246 A:middle
并向 Swift 贡献了

00:18:09.286 --> 00:18:11.766 A:middle
解决方案 使人人收益

00:18:12.166 --> 00:18:12.516 A:middle
谢谢大家

00:18:14.516 --> 00:18:19.016 A:middle
[ 掌声 ]

00:18:19.516 --> 00:18:20.936 A:middle
第一项改进

00:18:21.126 --> 00:18:22.226 A:middle
我们来看看

00:18:22.226 --> 00:18:23.636 A:middle
如何在使用枚举时

00:18:23.636 --> 00:18:25.486 A:middle
去除鸡肋代码

00:18:26.566 --> 00:18:28.196 A:middle
比如说 我要获得一个枚举

00:18:28.616 --> 00:18:30.486 A:middle
我想要打印出

00:18:30.486 --> 00:18:32.846 A:middle
这个枚举包含的所有值

00:18:33.376 --> 00:18:36.286 A:middle
在 Swift 4 中 我需要定义

00:18:36.286 --> 00:18:38.636 A:middle
一个属性 例如包括所有

00:18:39.026 --> 00:18:40.386 A:middle
可能样例的列表

00:18:41.056 --> 00:18:44.656 A:middle
如果我要添加新的样例

00:18:44.656 --> 00:18:46.016 A:middle
我要记得更新

00:18:46.086 --> 00:18:48.376 A:middle
属性 否则就会呈现

00:18:48.376 --> 00:18:49.706 A:middle
行为或运行时错误

00:18:50.976 --> 00:18:53.536 A:middle
这种做法并不好

00:18:53.536 --> 00:18:54.936 A:middle
因为你在向编译器

00:18:54.936 --> 00:18:56.406 A:middle
重复自己的工作

00:18:56.986 --> 00:18:59.296 A:middle
所以在 Swift 4.2 中 我们添加了

00:18:59.296 --> 00:19:01.966 A:middle
新的 CaseIterable 协议

