WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.156 --> 00:16:00.176 A:middle
可以看到 优化范围

00:16:00.176 --> 00:16:01.626 A:middle
取决于使用了

00:16:01.626 --> 00:16:03.456 A:middle
哪些语言特性 代码体积

00:16:03.456 --> 00:16:05.136 A:middle
缩减了 10% 到 30%

00:16:05.826 --> 00:16:07.896 A:middle
这里所说的代码体积指的是编译

00:16:07.896 --> 00:16:09.636 A:middle
Swift 代码过程中

00:16:09.636 --> 00:16:11.046 A:middle
构建的机器码

00:16:11.046 --> 00:16:12.676 A:middle
不是 App 的整体体积

00:16:12.906 --> 00:16:14.206 A:middle
App 整体体积取决于

00:16:14.206 --> 00:16:15.766 A:middle
应用素材等多重因素

00:16:17.576 --> 00:16:19.416 A:middle
现实中 我们发现

00:16:19.416 --> 00:16:21.836 A:middle
运行时性能会下降大约 5%

00:16:21.836 --> 00:16:23.776 A:middle
这需要牺牲一小部分性能

00:16:24.336 --> 00:16:25.766 A:middle
对很多 App 而言 这一点

00:16:25.766 --> 00:16:26.496 A:middle
无伤大雅

00:16:26.926 --> 00:16:28.716 A:middle
所以确实取决于实际用例

00:16:29.216 --> 00:16:30.096 A:middle
但如果你对此

00:16:30.096 --> 00:16:31.516 A:middle
感兴趣 我们也鼓励你

00:16:31.516 --> 00:16:33.956 A:middle
进行尝试

00:16:34.456 --> 00:16:35.476 A:middle
现在 我要把舞台

00:16:35.476 --> 00:16:36.916 A:middle
交给 Slava  他会谈到

00:16:36.916 --> 00:16:37.806 A:middle
Swift 4.2 中

00:16:37.806 --> 00:16:39.826 A:middle
语言方面的重大改进

00:16:40.516 --> 00:16:45.546 A:middle
[ 掌声 ]

00:16:46.046 --> 00:16:47.856 A:middle
&gt;&gt; 大家好 我是 Slava Pestov

00:16:47.896 --> 00:16:49.586 A:middle
我负责 Swift 编译器

00:16:49.586 --> 00:16:50.886 A:middle
今天 我想谈谈

00:16:50.886 --> 00:16:52.366 A:middle
Swift 4.2 中的新语言特性

00:16:52.366 --> 00:16:54.216 A:middle
可以如何帮助你

00:16:54.216 --> 00:16:55.956 A:middle
写出更简单 更易维护的代码

00:16:57.556 --> 00:16:59.156 A:middle
在讲到语言的

00:16:59.196 --> 00:17:00.766 A:middle
新变化之前 先来

