WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.876 --> 00:27:01.446 A:middle
因为 API 

00:27:01.446 --> 00:27:03.866 A:middle
因平台而异

00:27:03.866 --> 00:27:04.876 A:middle
名字不同

00:27:04.876 --> 00:27:06.586 A:middle
行为不同

00:27:06.666 --> 00:27:08.156 A:middle
需要检查构建配置

00:27:08.566 --> 00:27:10.486 A:middle
此外 这些 API 位于底层

00:27:10.486 --> 00:27:12.806 A:middle
还会用到一些

00:27:12.806 --> 00:27:14.566 A:middle
不太直观的常见运算

00:27:15.316 --> 00:27:16.886 A:middle
例如 如果我想得到

00:27:16.886 --> 00:27:19.016 A:middle
1 到 6 之间的随机数

00:27:19.406 --> 00:27:21.446 A:middle
我需要调用

00:27:21.446 --> 00:27:23.716 A:middle
Darwin 中的 arc4random 函数

00:27:23.826 --> 00:27:25.366 A:middle
再除以 6

00:27:25.366 --> 00:27:26.556 A:middle
来求余

00:27:26.836 --> 00:27:27.916 A:middle
但这样的结果

00:27:27.916 --> 00:27:29.476 A:middle
往往并非均匀

00:27:29.476 --> 00:27:31.566 A:middle
分布在 1 到 6 之间

00:27:32.346 --> 00:27:35.386 A:middle
Swift 4.2 中 我们添加了

00:27:35.386 --> 00:27:37.236 A:middle
一组新的 API

00:27:37.236 --> 00:27:38.086 A:middle
以简化操作

00:27:39.146 --> 00:27:41.186 A:middle
首先 我们为所有数字类型

00:27:41.186 --> 00:27:43.296 A:middle
定义了 random 方法

00:27:43.486 --> 00:27:45.576 A:middle
可以获取一个范围 返回

00:27:45.576 --> 00:27:47.986 A:middle
平均分布在范围中的数字

00:27:48.196 --> 00:27:49.816 A:middle
这种方法使用了正确算法

00:27:49.816 --> 00:27:51.316 A:middle
也适用于浮点型（floats）

00:27:52.516 --> 00:27:58.596 A:middle
[ 掌声 ]

00:27:59.096 --> 00:28:00.676 A:middle
对于顶层代码 我们

