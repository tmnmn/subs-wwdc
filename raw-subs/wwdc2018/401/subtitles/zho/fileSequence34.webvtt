WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.896 --> 00:34:01.386 A:middle
内存独占性检查

00:34:01.646 --> 00:34:02.896 A:middle
该功能结合了

00:34:02.956 --> 00:34:05.186 A:middle
运行时检查

00:34:05.436 --> 00:34:06.696 A:middle
和编译时检查

00:34:06.696 --> 00:34:08.856 A:middle
但一些功能受限

00:34:09.315 --> 00:34:10.976 A:middle
我们专门限制了

00:34:11.286 --> 00:34:13.376 A:middle
对同一内存区域的

00:34:13.376 --> 00:34:14.356 A:middle
重复访问

00:34:14.856 --> 00:34:15.656 A:middle
这意味着什么

00:34:15.815 --> 00:34:17.096 A:middle
我们来看个例子

00:34:17.666 --> 00:34:20.085 A:middle
这一段代码

00:34:20.085 --> 00:34:21.706 A:middle
为操作系统路径

00:34:21.896 --> 00:34:23.246 A:middle
实现了一个数据类型

00:34:23.766 --> 00:34:25.446 A:middle
表现为包含路径元素的

00:34:25.565 --> 00:34:27.005 A:middle
一个数组

00:34:27.576 --> 00:34:29.206 A:middle
还使用了 withAppended 方法

00:34:30.216 --> 00:34:31.946 A:middle
这个方法可以向数组中

00:34:31.946 --> 00:34:33.735 A:middle
添加元素 再调用 closure()

00:34:33.735 --> 00:34:35.806 A:middle
作用于你传入的元素

00:34:35.806 --> 00:34:37.626 A:middle
再将它从数组中移出

00:34:38.295 --> 00:34:40.036 A:middle
这段代码没有问题

00:34:40.036 --> 00:34:41.726 A:middle
在 Swift 4 中运行无误

00:34:42.755 --> 00:34:44.505 A:middle
但我们来看一下

00:34:44.505 --> 00:34:45.536 A:middle
Path 数据类型的使用

00:34:46.545 --> 00:34:47.976 A:middle
这个 path 变量

00:34:47.976 --> 00:34:49.746 A:middle
存储在局部变量中

00:34:50.056 --> 00:34:51.806 A:middle
我对它调用 withAppended 方法

00:34:52.295 --> 00:34:54.856 A:middle
在 closure 中 我再访问

00:34:54.856 --> 00:34:56.306 A:middle
这个局部变量

00:34:56.536 --> 00:34:57.056 A:middle
并将它打印出来

00:34:57.556 --> 00:34:58.696 A:middle
问题出在哪儿

00:34:59.436 --> 00:35:01.076 A:middle
事实上 这段代码

