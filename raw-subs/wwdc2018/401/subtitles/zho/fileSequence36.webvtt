WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.286 --> 00:36:01.246 A:middle
要从闭包内部获得

00:36:01.246 --> 00:36:02.166 A:middle
path 的值

00:36:02.496 --> 00:36:04.766 A:middle
但 Swift 4 无法在

00:36:04.766 --> 00:36:06.866 A:middle
编译时捕获到这个错误

00:36:08.286 --> 00:36:10.436 A:middle
Swift 4.2 中 我们改进了

00:36:10.436 --> 00:36:12.526 A:middle
静态独占性检查（static exclusivity 

00:36:12.526 --> 00:36:15.256 A:middle
checking） 可以在更多情况下 指出这样的歧义

00:36:16.386 --> 00:36:18.546 A:middle
除了改进

00:36:19.146 --> 00:36:20.526 A:middle
好吧 你还可以用类似方法

00:36:20.526 --> 00:36:22.236 A:middle
将变量值作为

00:36:22.236 --> 00:36:23.566 A:middle
closure 的参数传入

00:36:23.566 --> 00:36:24.026 A:middle
来消除歧义

00:36:24.576 --> 00:36:26.876 A:middle
除了改进

00:36:26.876 --> 00:36:28.986 A:middle
静态检查 我们还新增了

00:36:28.986 --> 00:36:30.796 A:middle
使用运行时独占性检查

00:36:30.796 --> 00:36:32.906 A:middle
和释放构造的功能

00:36:33.336 --> 00:36:35.166 A:middle
这会牺牲一些性能

00:36:35.166 --> 00:36:36.606 A:middle
但如果你的 App 不注重

00:36:36.606 --> 00:36:38.096 A:middle
性能 我们鼓励你尝试一下

00:36:38.096 --> 00:36:39.746 A:middle
并且始终开启

00:36:39.746 --> 00:36:40.216 A:middle
这一功能

00:36:40.686 --> 00:36:42.386 A:middle
未来 我们会将

00:36:42.386 --> 00:36:44.236 A:middle
动态检查的性能损耗

00:36:44.306 --> 00:36:46.276 A:middle
大幅降低 这样就可以

00:36:46.276 --> 00:36:48.126 A:middle
始终开启这一功能

00:36:48.186 --> 00:36:49.226 A:middle
这一功能还能带来

00:36:49.226 --> 00:36:50.846 A:middle
额外保护 就像

00:36:50.896 --> 00:36:53.296 A:middle
数组边界检查（array bounds checking）

00:36:53.296 --> 00:36:54.596 A:middle
或整型溢出检查（integer overflow checking）

00:36:55.166 --> 00:36:58.316 A:middle
一样 Swift 4.2 中还有

00:36:58.316 --> 00:37:01.576 A:middle
很多我没有涉及的特性

