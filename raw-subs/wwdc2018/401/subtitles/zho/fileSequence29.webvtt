WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.356 --> 00:29:00.796 A:middle
在 iOS 和 macOS 间共用

00:29:00.796 --> 00:29:03.836 A:middle
在 iOS 上 你应该

00:29:03.836 --> 00:29:05.206 A:middle
使用 UIKit

00:29:05.586 --> 00:29:06.776 A:middle
在 macOS 上 你应该

00:29:06.776 --> 00:29:08.156 A:middle
使用 AppKit

00:29:08.896 --> 00:29:10.466 A:middle
现在要做到这一点

00:29:10.466 --> 00:29:11.816 A:middle
你要写一段 #if 代码

00:29:12.236 --> 00:29:14.186 A:middle
来进行编译时间检查

00:29:14.186 --> 00:29:15.386 A:middle
之后需要列出

00:29:15.386 --> 00:29:17.736 A:middle
支持 UIKit 的操作系统

00:29:18.566 --> 00:29:20.046 A:middle
但你真正关心的

00:29:20.046 --> 00:29:21.836 A:middle
不是你在运行

00:29:21.836 --> 00:29:23.016 A:middle
什么操作系统

00:29:23.016 --> 00:29:25.096 A:middle
而是导入 UIKit

00:29:25.626 --> 00:29:27.956 A:middle
Swift 4.2 中 我们添加了

00:29:27.956 --> 00:29:30.086 A:middle
canImport() 构建配置指令

00:29:30.086 --> 00:29:32.486 A:middle
（Build Configuration Directive）

00:29:32.486 --> 00:29:33.476 A:middle
帮助你表达本意

00:29:34.171 --> 00:29:36.171 A:middle
[ 掌声 ]

00:29:36.326 --> 00:29:38.026 A:middle
而利用 Swift 4.2 的新特性

00:29:38.026 --> 00:29:39.686 A:middle
我还可以进一步

00:29:39.686 --> 00:29:40.766 A:middle
完善代码

00:29:41.246 --> 00:29:43.326 A:middle
比方说 我还要

00:29:43.326 --> 00:29:44.966 A:middle
专门检查 AppKit

00:29:45.306 --> 00:29:47.036 A:middle
如果 UIKit 和

00:29:47.036 --> 00:29:48.866 A:middle
AppKit 都不可用

00:29:48.866 --> 00:29:50.576 A:middle
例如我在 Linux 上构建

00:29:50.576 --> 00:29:52.356 A:middle
我就可以使用新的 #error

00:29:52.546 --> 00:29:53.916 A:middle
构建指令来生成

00:29:53.916 --> 00:29:55.796 A:middle
编译时间错误信息

00:29:57.206 --> 00:29:59.376 A:middle
好的 还有一种类似的

00:29:59.376 --> 00:30:00.416 A:middle
鸡肋代码

