WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.436 --> 00:35:01.076 A:middle
事实上 这段代码

00:35:01.076 --> 00:35:03.756 A:middle
有歧义 因为

00:35:03.756 --> 00:35:05.866 A:middle
当我访问 closure 中的

00:35:06.136 --> 00:35:08.436 A:middle
局部变量时 它已经被

00:35:08.436 --> 00:35:10.086 A:middle
withAppended

00:35:10.086 --> 00:35:11.686 A:middle
这一可变方法（mutating method）

00:35:11.686 --> 00:35:12.586 A:middle
修改过了

00:35:13.306 --> 00:35:16.136 A:middle
歧义之处在于

00:35:16.136 --> 00:35:18.466 A:middle
我所指的是 path

00:35:18.806 --> 00:35:20.556 A:middle
在调用 withAppended 之前的

00:35:20.556 --> 00:35:22.706 A:middle
原始值 还是

00:35:22.706 --> 00:35:24.106 A:middle
修改之后的

00:35:24.106 --> 00:35:25.926 A:middle
当前值

00:35:26.756 --> 00:35:28.636 A:middle
Swift 4 中 这是一处

00:35:28.636 --> 00:35:30.396 A:middle
编译时错误 因为

00:35:30.396 --> 00:35:32.226 A:middle
它违反了独占性

00:35:32.756 --> 00:35:34.716 A:middle
要解决这一问题

00:35:34.716 --> 00:35:35.976 A:middle
消除歧义 办法之一

00:35:35.976 --> 00:35:37.926 A:middle
是告诉编译器

00:35:37.926 --> 00:35:40.496 A:middle
我想要获得当前值 所以

00:35:40.496 --> 00:35:41.766 A:middle
我只将其作为参数

00:35:41.766 --> 00:35:44.986 A:middle
传入 closure 而不去捕获它

00:35:45.586 --> 00:35:47.936 A:middle
可以 但再看看这个例子

00:35:48.266 --> 00:35:49.586 A:middle
这个函数和刚才的

00:35:49.586 --> 00:35:51.376 A:middle
几乎相同 除了这是一个泛型

00:35:51.376 --> 00:35:53.326 A:middle
函数 参数由

00:35:53.326 --> 00:35:54.646 A:middle
closure 返回值的类型决定

00:35:55.306 --> 00:35:57.436 A:middle
这个例子中 我们会遇到

00:35:57.436 --> 00:35:59.286 A:middle
类似的歧义 因为

00:35:59.286 --> 00:36:01.246 A:middle
要从闭包内部获得

