WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.096 --> 00:28:00.676 A:middle
对于顶层代码 我们

00:28:00.676 --> 00:28:03.076 A:middle
为集合协议添加了

00:28:03.076 --> 00:28:04.196 A:middle
randomElement 方法

00:28:04.786 --> 00:28:07.026 A:middle
可以像 min 和 max 方法一样

00:28:07.026 --> 00:28:08.636 A:middle
返回选项

00:28:08.636 --> 00:28:10.376 A:middle
如果传入空集合

00:28:10.526 --> 00:28:11.506 A:middle
会返回空

00:28:12.596 --> 00:28:14.326 A:middle
最后 我们为集合添加了

00:28:14.326 --> 00:28:17.116 A:middle
shuffle 方法

00:28:17.116 --> 00:28:18.926 A:middle
可以生成一个

00:28:18.926 --> 00:28:21.616 A:middle
该集合元素的随机排列组合的数组

00:28:22.146 --> 00:28:25.216 A:middle
我们认为 默认的随机数

00:28:25.216 --> 00:28:26.636 A:middle
生成器（Random Number Generator）

00:28:26.636 --> 00:28:27.996 A:middle
适合大多数 App

00:28:28.296 --> 00:28:29.883 A:middle
但你也可以采用自己的算法

00:28:30.676 --> 00:28:31.836 A:middle
现在 有了新的

00:28:31.836 --> 00:28:34.206 A:middle
RandomNumberGenerator 协议

00:28:34.206 --> 00:28:35.606 A:middle
一旦你创建一个符合

00:28:35.606 --> 00:28:37.826 A:middle
该协议的类型 就可以将它

00:28:37.826 --> 00:28:39.326 A:middle
传递给我提到的 API

00:28:39.326 --> 00:28:40.846 A:middle
API 拥有一个使用 using 参数的

00:28:40.846 --> 00:28:43.416 A:middle
额外重载（additional overload）

00:28:43.576 --> 00:28:44.706 A:middle
可以接收 RandomNumberGenerator

00:28:44.706 --> 00:28:45.236 A:middle
作为输入

00:28:46.746 --> 00:28:49.456 A:middle
好的 之前我们看到了

00:28:49.456 --> 00:28:51.446 A:middle
构建配置检查

00:28:51.526 --> 00:28:54.346 A:middle
我们再多了解一些

00:28:54.566 --> 00:28:56.806 A:middle
这是 Swift 中常见的情况

00:28:57.026 --> 00:28:58.356 A:middle
有一小段代码

00:28:58.356 --> 00:29:00.796 A:middle
在 iOS 和 macOS 间共用

