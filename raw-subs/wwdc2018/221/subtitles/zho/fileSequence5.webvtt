WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.296 --> 00:05:00.236 A:middle
来进行字符串绘制

00:05:01.146 --> 00:05:02.366 A:middle
你们中的一些人可能会为了

00:05:02.366 --> 00:05:03.696 A:middle
避免在 Kit 层级上使用过多的

00:05:03.846 --> 00:05:05.236 A:middle
视图对象所带来的性能收益

00:05:05.236 --> 00:05:06.276 A:middle
来使用它

00:05:07.606 --> 00:05:08.446 A:middle
因此 如果你想要用这个方法

00:05:08.446 --> 00:05:10.826 A:middle
请务必记住下面的几点提示

00:05:11.696 --> 00:05:12.686 A:middle
你应该用它来处理

00:05:12.686 --> 00:05:13.676 A:middle
少量的静态文本

00:05:14.166 --> 00:05:14.926 A:middle
并且你应该限制

00:05:14.926 --> 00:05:16.396 A:middle
调用 draw() 方法的频率

00:05:17.236 --> 00:05:18.186 A:middle
如果你频繁地调用字符串

00:05:18.186 --> 00:05:20.296 A:middle
绘制方法 

00:05:20.296 --> 00:05:21.626 A:middle
你获得的性能表现可能不如

00:05:21.896 --> 00:05:23.706 A:middle
使用标签或文本栏

00:05:23.846 --> 00:05:25.006 A:middle
因为这些控件能提供

00:05:25.006 --> 00:05:26.516 A:middle
更好的缓存 特别是

00:05:26.516 --> 00:05:27.306 A:middle
使用自动布局的情况下

00:05:27.306 --> 00:05:29.216 A:middle
如果你正在绘制一个

00:05:29.216 --> 00:05:31.056 A:middle
有很多自定义属性的

00:05:31.056 --> 00:05:33.176 A:middle
属性文本字符串 这也会

00:05:33.176 --> 00:05:34.366 A:middle
减慢你的字符串绘制

00:05:34.366 --> 00:05:35.756 A:middle
因为文本系统

00:05:35.756 --> 00:05:36.936 A:middle
需要在渲染之前

00:05:36.936 --> 00:05:38.966 A:middle
验证所有的属性 

00:05:38.966 --> 00:05:40.386 A:middle
因此 为了最佳性能表现

00:05:40.386 --> 00:05:41.326 A:middle
你应该在绘制之前

00:05:41.326 --> 00:05:42.906 A:middle
剥离额外的属性

00:05:42.906 --> 00:05:44.776 A:middle
只保留那些

00:05:44.776 --> 00:05:46.706 A:middle
需要去决定的视觉表现属性

00:05:46.706 --> 00:05:48.506 A:middle
比如字体或颜色

00:05:49.076 --> 00:05:51.996 A:middle
最后你要知道

00:05:51.996 --> 00:05:53.146 A:middle
如果使用字符串绘制

00:05:53.146 --> 00:05:54.546 A:middle
你会失去所有这些

00:05:54.546 --> 00:05:55.746 A:middle
文本控件提供的额外功能

00:05:55.746 --> 00:05:57.286 A:middle
因此只要可能的话

00:05:57.286 --> 00:05:59.166 A:middle
你应该一直使用文本控件

00:05:59.726 --> 00:06:02.706 A:middle
所以现在你知道

