WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:01.355 --> 00:27:05.092 align:middle line:-1
这是内存分配器本身提供的线索

00:27:05.158 --> 00:27:06.760 align:middle line:-1
让我告诉你为什么是这样

00:27:07.394 --> 00:27:10.831 align:middle line:-2
这是我们的对象
在它仍然有效时的样子

00:27:11.398 --> 00:27:13.934 align:middle line:-1
一个对象以isa字段开始

00:27:14.001 --> 00:27:16.970 align:middle line:-1
isa字段指向对象的类

00:27:17.237 --> 00:27:19.840 align:middle line:-2
这就是
Objective-C对象的结构

00:27:19.907 --> 00:27:22.442 align:middle line:-1
这也是一些Swift对象的结构

00:27:23.043 --> 00:27:25.479 align:middle line:-2
objc_release函数
是做什么的呢？

00:27:26.113 --> 00:27:30.384 align:middle line:-2
它读取isa字段
然后解引用该isa字段

00:27:30.450 --> 00:27:33.820 align:middle line:-1
从而可以到该类对象中查找其方法

00:27:35.122 --> 00:27:38.392 align:middle line:-2
通常这当然是有效的
这是正常情况下所发生的事情

00:27:39.259 --> 00:27:42.396 align:middle line:-1
但若我们的对象已被释放会怎样呢？

00:27:44.331 --> 00:27:47.267 align:middle line:-1
当释放函数删除一个对象时

00:27:48.302 --> 00:27:52.573 align:middle line:-2
它将其插入到一个
由其它无效对象构成的释放列表中

00:27:53.106 --> 00:27:57.978 align:middle line:-2
它会将一个释放列表指针
写入列表中的下一个对象

00:27:58.245 --> 00:28:00.047 align:middle line:-2
写入位置
即以前isa字段所在位置

