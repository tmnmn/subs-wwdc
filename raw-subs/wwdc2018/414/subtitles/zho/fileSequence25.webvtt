WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.331 --> 00:25:00.501 align:middle line:0
那么是什么代码调用了
objc_release函数呢？

00:25:00.868 --> 00:25:02.903 align:middle line:0
我们可以查看堆栈跟踪的其余部分

00:25:03.103 --> 00:25:05.906 align:middle line:0
我们看到
object_dispose函数

00:25:06.373 --> 00:25:08.942 align:middle line:0
这是Objective-C
运行时中的一个函数

00:25:09.009 --> 00:25:11.311 align:middle line:0
它用于释放对象

00:25:12.513 --> 00:25:13.981 align:middle line:0
object_dispose函数

00:25:14.047 --> 00:25:18.585 align:middle line:0
在我们的一个类上调用了
名为__ivar_destroyer的函数

00:25:18.652 --> 00:25:20.954 align:middle line:0
我们的LoginViewController类

00:25:21.855 --> 00:25:25.792 align:middle line:0
__ivar_destroyer
函数是Swift代码的一部分

00:25:25.859 --> 00:25:28.295 align:middle line:-1
这个函数用来清理属性

00:25:28.362 --> 00:25:32.699 align:middle line:-2
即在一个对象被释放时
清除对象的ivar存储

00:25:34.001 --> 00:25:37.437 align:middle line:0
所以这告诉我们
造成崩溃的一部分原因

00:25:37.971 --> 00:25:42.543 align:middle line:0
我们当时正在释放
LoginViewController类的对象

00:25:43.544 --> 00:25:49.249 align:middle line:0
这个类在其初始化代码中
试图清理其属性及ivar

00:25:49.583 --> 00:25:53.253 align:middle line:0
并且在释放其中一个属性时
程序崩溃了

00:25:54.521 --> 00:25:57.157 align:middle line:0
所以这给了我们
所发生问题的一些细节

00:25:57.224 --> 00:26:00.160 align:middle line:-2
我们可以做得更好吗
崩溃日志中是否包含更多

