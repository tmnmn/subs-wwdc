WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.117 --> 00:17:00.721 align:middle line:-1
它包含当这个错误检查失败时

00:17:00.787 --> 00:17:03.724 align:middle line:-1
Swift运行时所打印的错误消息

00:17:03.790 --> 00:17:07.227 align:middle line:-2
即“在解包可选值时
意外发现nil”

00:17:08.729 --> 00:17:12.766 align:middle line:-1
这很好 因为它与代码一致

00:17:12.833 --> 00:17:16.136 align:middle line:-2
我们在第26行有一个
强制解包运算符

00:17:16.203 --> 00:17:19.106 align:middle line:-1
我们在崩溃日志中有一条错误消息

00:17:19.173 --> 00:17:21.575 align:middle line:-1
该消息说我们正在解包一个可选值

00:17:21.974 --> 00:17:25.878 align:middle line:-2
造成这次崩溃的原因
就变得很合理并且一致了

00:17:29.049 --> 00:17:31.885 align:middle line:-1
强制解包失败

00:17:31.952 --> 00:17:35.589 align:middle line:-2
是代码中的前提条件或断言的
一个例子

00:17:36.290 --> 00:17:38.725 align:middle line:-1
前提条件和断言是一种错误检查

00:17:38.792 --> 00:17:42.362 align:middle line:-1
它在发现错误时主动停止进程

00:17:43.730 --> 00:17:47.367 align:middle line:-2
它们的一些例子包括
我们刚刚看到的

00:17:47.434 --> 00:17:48.435 align:middle line:-1
强制解包可选值

00:17:48.802 --> 00:17:50.737 align:middle line:-1
Swift运行时将断言

00:17:50.971 --> 00:17:52.339 align:middle line:-1
可选值不是nil

00:17:53.273 --> 00:17:54.374 align:middle line:-1
否则就会崩溃

00:17:55.609 --> 00:17:59.046 align:middle line:-2
另一个例子是
Swift.Array访问越界

00:17:59.980 --> 00:18:03.383 align:middle line:-1
如果你访问一个数组且索引超出范围

