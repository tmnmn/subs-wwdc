WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.399 --> 00:35:02.035 align:middle line:-2
而其中的database属性
是无效的

00:35:04.404 --> 00:35:08.609 align:middle line:-2
我们目前为止还没有发现漏洞
这些代码都没错

00:35:08.675 --> 00:35:13.714 align:middle line:-2
__ivar_destroyer函数没有错
我们的代码中应该有些别的问题

00:35:14.281 --> 00:35:15.516 align:middle line:-1
但是从崩溃日志中

00:35:15.582 --> 00:35:19.453 align:middle line:-1
我们已经能够缩小测试的范围

00:35:19.720 --> 00:35:22.489 align:middle line:-2
以及我们应该在何处
尝试重现该漏洞的范围

00:35:22.556 --> 00:35:25.158 align:middle line:-1
我们应该检验这个类

00:35:25.225 --> 00:35:27.261 align:middle line:-1
我们应该检验database字段

00:35:27.327 --> 00:35:31.598 align:middle line:-2
我们应该阅读
使用该database对象的代码

00:35:31.665 --> 00:35:32.866 align:middle line:-1
并尝试找到错误

00:35:35.135 --> 00:35:36.436 align:middle line:-1
那我们刚刚做了什么？

00:35:37.037 --> 00:35:38.839 align:middle line:-1
我们从头开始阅读崩溃日志

00:35:38.906 --> 00:35:42.609 align:middle line:-2
从崩溃原因开始
我们读取了异常类型

00:35:42.676 --> 00:35:45.045 align:middle line:-1
我们了解了异常类型的含义

00:35:45.913 --> 00:35:50.083 align:middle line:-1
我们检查了崩溃线程的堆栈跟踪

00:35:50.150 --> 00:35:55.122 align:middle line:-2
了解它正在做什么
以及导致失败的实际错误是什么

00:35:55.889 --> 00:35:59.092 align:middle line:-2
并且我们在崩溃日志的其它地方
寻找线索

00:35:59.259 --> 00:36:02.729 align:middle line:-2
在这个例子中
我们使用了内存错误的错误地址

