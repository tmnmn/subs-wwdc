WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.887 --> 00:37:04.591 align:middle line:-1
这次是在同一地址分配了一个新对象

00:37:04.658 --> 00:37:06.326 align:middle line:-1
取代了以前旧对象所在的位置

00:37:06.860 --> 00:37:10.163 align:middle line:0
所以当代码尝试使用旧对象时

00:37:10.230 --> 00:37:12.332 align:middle line:0
调用旧对象上的函数

00:37:12.533 --> 00:37:16.703 align:middle line:0
我们在该地址处却有一个
不同类型的不同对象

00:37:16.937 --> 00:37:19.740 align:middle line:0
并且它根本无法识别该函数

00:37:19.940 --> 00:37:22.342 align:middle line:0
因此我们得到一个
无法识别的选择器异常

00:37:24.945 --> 00:37:27.481 align:middle line:0
内存错误的另一个常见症状

00:37:27.548 --> 00:37:31.585 align:middle line:0
是内存分配器本身的终止

00:37:31.652 --> 00:37:34.121 align:middle line:0
即在malloc和free函数内
调用abort()

00:37:34.888 --> 00:37:38.358 align:middle line:0
这是我们之前看到的
前提条件的一个例子

00:37:38.425 --> 00:37:41.361 align:middle line:0
这是内存分配器内部的前提条件

00:37:41.862 --> 00:37:44.198 align:middle line:-1
它可能识别到这样的情况

00:37:44.264 --> 00:37:49.303 align:middle line:-2
即malloc内存
本身的堆数据结构

00:37:49.369 --> 00:37:53.540 align:middle line:-2
已被内存错误破坏
这会终止进程并进行响应

00:37:53.974 --> 00:37:59.046 align:middle line:-2
或者它可能检测到
malloc API的错误使用

00:37:59.413 --> 00:38:02.816 align:middle line:-2
例如 如果你在一行代码中
连续两次释放一个对象

