WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.098 --> 00:45:00.767 align:middle line:-1
我非常怀疑这是一个多线程问题

00:45:02.002 --> 00:45:05.105 align:middle line:-2
所以我们来看看
LazyImageView类

00:45:05.172 --> 00:45:07.608 align:middle line:-1
我点击此按钮

00:45:07.941 --> 00:45:10.511 align:middle line:-2
来在我们的项目中打开它
并直接跳到这行代码

00:45:11.778 --> 00:45:14.815 align:middle line:-2
你可以在这里看到
LazyImageView的源代码

00:45:15.249 --> 00:45:18.986 align:middle line:-2
它是UIImageView的子类
但它有一个额外的功能

00:45:19.052 --> 00:45:22.122 align:middle line:-1
即它可以惰性地并且异步地加载图像

00:45:22.689 --> 00:45:25.692 align:middle line:-1
我们可以看下初始化函数的逻辑

00:45:25.759 --> 00:45:29.196 align:middle line:-1
我们所做的是将作业分配到后台队列

00:45:29.730 --> 00:45:32.366 align:middle line:-1
我们将在后台线程上创建图像

00:45:32.766 --> 00:45:35.936 align:middle line:-1
一旦完成 我们将调度回主队列

00:45:36.336 --> 00:45:38.472 align:middle line:-1
来在屏幕上实际显示图像

00:45:39.406 --> 00:45:41.975 align:middle line:-1
崩溃日志指向这行代码

00:45:42.509 --> 00:45:45.445 align:middle line:-2
我们这里正在访问
imageCache

00:45:45.646 --> 00:45:49.149 align:middle line:-2
我们使用它来确保
我们不会不必要地多次创建

00:45:49.283 --> 00:45:50.817 align:middle line:-1
相同的图像

00:45:51.251 --> 00:45:54.488 align:middle line:-1
所以我的缓存实现方式可能存在漏洞

00:45:54.788 --> 00:45:58.759 align:middle line:-2
让我们试着避免猜测
我将在模拟器中运行app

00:45:58.825 --> 00:46:00.494 align:middle line:-1
并尝试重现此崩溃

