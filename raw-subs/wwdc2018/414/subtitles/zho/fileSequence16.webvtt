WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:55.122 --> 00:16:00.494 align:middle line:-2
我们有一个Recipe类
其image函数被调用

00:16:00.928 --> 00:16:03.764 align:middle line:-1
并且该函数由于某些错误又调用了

00:16:03.830 --> 00:16:05.666 align:middle line:-1
fatalErrorMessage函数

00:16:06.934 --> 00:16:11.271 align:middle line:-2
因为这是带有完整调试信息的
符号化堆栈跟踪

00:16:11.338 --> 00:16:15.576 align:middle line:-2
我们可以看到一个文件和代码行号
其指明崩溃发生的地方

00:16:16.710 --> 00:16:20.214 align:middle line:-2
所以我们可以看看那段代码
我们打开该项目

00:16:20.280 --> 00:16:22.516 align:middle line:-1
这是RecipeImage.swift

00:16:22.916 --> 00:16:25.819 align:middle line:-1
第26行是在崩溃中标记的那一行

00:16:26.653 --> 00:16:29.323 align:middle line:-2
你们中那些经验丰富的
Swift程序员

00:16:29.389 --> 00:16:32.893 align:middle line:-2
应该容易猜出
为什么这行代码可能会崩溃

00:16:33.827 --> 00:16:36.830 align:middle line:-1
这是一个强制解包运算符

00:16:37.664 --> 00:16:40.634 align:middle line:-2
我们有一个函数
即UIImage构造函数

00:16:40.701 --> 00:16:42.736 align:middle line:-1
它返回一个可选值

00:16:43.470 --> 00:16:45.339 align:middle line:-1
如果可选值为nil

00:16:45.506 --> 00:16:49.376 align:middle line:-1
强制解包运算符将停止进程

00:16:49.743 --> 00:16:52.246 align:middle line:-1
生成崩溃日志并退出

00:16:53.714 --> 00:16:56.917 align:middle line:-1
若我们还记得刚才的app特定信息

00:16:57.117 --> 00:17:00.721 align:middle line:-1
它包含当这个错误检查失败时

