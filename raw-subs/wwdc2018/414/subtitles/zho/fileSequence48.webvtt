WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.878 --> 00:48:00.981 align:middle line:-2
我们看看如果我尝试
添加新食谱时会发生什么

00:48:03.483 --> 00:48:07.454 align:middle line:-2
如果我现在点击“+”按钮
你会看到该app立即停止

00:48:07.521 --> 00:48:09.489 align:middle line:-2
因为Thread Sanitizer
发现了这个漏洞

00:48:09.556 --> 00:48:12.259 align:middle line:-1
请注意 我没有进行多次尝试

00:48:12.526 --> 00:48:16.230 align:middle line:-2
Thread Sanitizer
非常可靠地重现了多线程问题

00:48:17.464 --> 00:48:19.633 align:middle line:-1
让我们看一下这个漏洞的一些细节

00:48:19.967 --> 00:48:22.469 align:middle line:-2
我们看到它是一个
Swift访问竞争

00:48:23.437 --> 00:48:26.673 align:middle line:-1
如果我们查看左侧的调试导航器

00:48:26.740 --> 00:48:29.076 align:middle line:-2
我们甚至可以得到
有关此漏洞的更多详细信息

00:48:29.409 --> 00:48:33.480 align:middle line:-2
我们看到两个不同的线程
执行了两次访问

00:48:33.547 --> 00:48:37.551 align:middle line:-2
这里是线程2和线程4
它们都试图

00:48:37.618 --> 00:48:39.887 align:middle line:-1
同时访问同一个内存位置

00:48:40.020 --> 00:48:41.221 align:middle line:-1
这是不允许的

00:48:42.756 --> 00:48:46.927 align:middle line:-2
如果我们查看正在构成竞争的
这两行代码

00:48:47.261 --> 00:48:50.531 align:middle line:-2
我们发现它们都在访问
imageCache

00:48:51.298 --> 00:48:55.369 align:middle line:-2
由于这是一个在多个线程之间
共享的数据结构

00:48:55.435 --> 00:48:58.138 align:middle line:-2
就像我们在此看到的一样
它需要变为一个线程数据结构

00:48:58.872 --> 00:49:00.607 align:middle line:-1
我们来看看它是如何实现的

