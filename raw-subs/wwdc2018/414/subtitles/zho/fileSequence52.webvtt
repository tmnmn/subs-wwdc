WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:57.417 --> 00:52:00.854 align:middle line:-2
如果我将这行代码移到
这个queue.sync中

00:52:00.921 --> 00:52:03.390 align:middle line:-1
它将作为该调度队列的一部分执行

00:52:04.291 --> 00:52:06.627 align:middle line:-2
通过这种方式
这段代码现在是线程安全的

00:52:06.693 --> 00:52:09.997 align:middle line:-2
因为访问storage的
每一行代码

00:52:10.330 --> 00:52:13.433 align:middle line:-1
都将在串行调度队列中执行

00:52:13.500 --> 00:52:16.303 align:middle line:-1
这意味着它一次只能执行一个

00:52:16.370 --> 00:52:17.905 align:middle line:-1
而这对线程安全来说是正确的

00:52:18.272 --> 00:52:22.242 align:middle line:-1
现在你可能很想

00:52:22.309 --> 00:52:25.445 align:middle line:-2
仅在更改storage变量的
setter中使用同步

00:52:25.512 --> 00:52:27.548 align:middle line:-2
并在getter中避免使用它
就像这样

00:52:28.448 --> 00:52:29.449 align:middle line:-1
但这并不正确

00:52:29.516 --> 00:52:32.452 align:middle line:-2
这仍然可能导致内存损坏
并再次导致崩溃

00:52:32.519 --> 00:52:34.121 align:middle line:-1
我通过在模拟器中运行

00:52:34.354 --> 00:52:37.157 align:middle line:-1
此版本的代码来向你证明这一点

00:52:37.291 --> 00:52:40.827 align:middle line:-2
让我们看看Sanitizer
现在能否发现这个更微妙的错误

00:52:43.530 --> 00:52:45.065 align:middle line:-1
如我所料 它的确发现了

00:52:45.132 --> 00:52:48.468 align:middle line:-1
我们必须使用同步

00:52:48.769 --> 00:52:49.870 align:middle line:-2
同时保护
getter和setter

00:52:49.937 --> 00:52:53.273 align:middle line:-2
让我最后一次
在模拟器中运行该app

00:52:53.340 --> 00:52:56.577 align:middle line:-1
你会看到如果我这次尝试添加新配方

00:52:56.977 --> 00:53:00.113 align:middle line:-2
控制器加载正常
并且我们不再收到任何警告

