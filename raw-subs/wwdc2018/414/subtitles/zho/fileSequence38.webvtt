WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.413 --> 00:38:02.816 align:middle line:-2
例如 如果你在一行代码中
连续两次释放一个对象

00:38:03.116 --> 00:38:05.619 align:middle line:-1
malloc分配器有时可以识别出

00:38:05.686 --> 00:38:09.056 align:middle line:-2
这是一个双重释放
并立即终止该进程

00:38:11.725 --> 00:38:13.393 align:middle line:-1
让我给你一些最后的提示

00:38:13.460 --> 00:38:18.498 align:middle line:-2
以用于分析崩溃日志
特别是分析内存错误

00:38:20.667 --> 00:38:22.069 align:middle line:-1
在刚才看到的崩溃中

00:38:22.135 --> 00:38:24.972 align:middle line:-2
我们大部分时间在
查看崩溃的代码

00:38:25.038 --> 00:38:28.742 align:middle line:-1
即崩溃的特定代码行和崩溃的线程

00:38:29.209 --> 00:38:33.514 align:middle line:-2
查看进程中其它
与崩溃代码相关的代码

00:38:33.580 --> 00:38:35.549 align:middle line:-1
非常重要

00:38:36.016 --> 00:38:41.021 align:middle line:-2
例如 在这次崩溃中
__ivar_destroyer函数并没有错

00:38:41.088 --> 00:38:42.656 align:middle line:-1
漏洞不在这里

00:38:42.923 --> 00:38:47.494 align:middle line:-2
该漏洞位于其它地方
其它一些代码不正确

00:38:49.229 --> 00:38:52.699 align:middle line:-2
除了崩溃线程之外
你还应该查看

00:38:52.866 --> 00:38:54.835 align:middle line:-1
崩溃日志中的堆栈跟踪

00:38:56.236 --> 00:38:59.540 align:middle line:-1
崩溃日志包含进程中的所有堆栈跟踪

00:38:59.606 --> 00:39:02.843 align:middle line:-1
并且可能包含有用的信息和线索

