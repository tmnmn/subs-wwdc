WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.245 --> 00:28:00.047 align:middle line:-2
写入位置
即以前isa字段所在位置

00:28:01.281 --> 00:28:05.485 align:middle line:-2
但是以一种稍微扭曲的方式
它不会在该字段中直接写入指针

00:28:05.552 --> 00:28:08.989 align:middle line:-1
而是将旋转后的指针写入该字段

00:28:09.489 --> 00:28:12.159 align:middle line:-1
它想确保写在那里的值

00:28:12.226 --> 00:28:15.062 align:middle line:-1
不是有效的内存地址

00:28:15.262 --> 00:28:18.765 align:middle line:-2
这正是错误使用该对象
造成崩溃的原因

00:28:20.133 --> 00:28:23.537 align:middle line:-2
所以当objc_release
读取isa字段时

00:28:23.604 --> 00:28:26.807 align:middle line:-2
它得到的是一个
旋转后的释放列表指针

00:28:27.274 --> 00:28:30.911 align:middle line:-2
当它解引用旋转后的释放列表指针时
它就会崩溃

00:28:31.912 --> 00:28:35.782 align:middle line:-2
内存分配器为我们做了这件事
它故意旋转了指针

00:28:35.849 --> 00:28:38.619 align:middle line:-2
以确保如果我们再次尝试使用它
就会发生崩溃

00:28:40.120 --> 00:28:43.190 align:middle line:-2
这就是我们在此崩溃日志中
看到的签名

00:28:43.557 --> 00:28:49.463 align:middle line:-2
我们的无效地址字段看起来
像是malloc区域中的指针

00:28:49.530 --> 00:28:53.567 align:middle line:-2
但旋转的方式与malloc
旋转其释放列表指针的方式相同

00:28:54.201 --> 00:28:55.769 align:middle line:-1
这是一个明显的信号

00:28:55.836 --> 00:29:00.507 align:middle line:-1
即我们在代码中尝试释放的对象

