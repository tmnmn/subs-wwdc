WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:56.977 --> 00:53:00.113 align:middle line:-2
控制器加载正常
并且我们不再收到任何警告

00:53:00.180 --> 00:53:02.382 align:middle line:-1
因为该类现在是线程安全的

00:53:02.749 --> 00:53:05.452 align:middle line:-2
现在我可以回到
我们的Organizer窗口

00:53:05.519 --> 00:53:08.322 align:middle line:-1
并将此崩溃标记为已解决

00:53:08.388 --> 00:53:11.391 align:middle line:-2
因为我们已经找到和
识别并修复了这个漏洞

00:53:21.235 --> 00:53:23.637 align:middle line:-1
我们刚看到的是

00:53:23.704 --> 00:53:26.840 align:middle line:-1
我从一组具有多线程错误症状的

00:53:26.907 --> 00:53:29.009 align:middle line:-1
崩溃日志开始

00:53:29.376 --> 00:53:31.912 align:middle line:-2
然后我使用这个
名为Thread Sanitizer的工具

00:53:31.979 --> 00:53:34.448 align:middle line:-1
来识别并最终修复此漏洞

00:53:35.516 --> 00:53:38.318 align:middle line:-2
Thread Sanitizer
不仅能检测多线程问题

00:53:38.385 --> 00:53:41.622 align:middle line:-1
还可以使它们更可靠地重现

00:53:42.189 --> 00:53:46.260 align:middle line:-2
请注意 在演示中
我不必多次调用控制器

00:53:47.227 --> 00:53:50.163 align:middle line:-1
该工具适用于macOS和模拟器

00:53:50.998 --> 00:53:53.367 align:middle line:-1
但就像所有其他运行时诊断工具一样

00:53:53.433 --> 00:53:57.905 align:middle line:-2
它只能通过实际运行代码
来查找其中的错误

00:53:58.405 --> 00:54:00.707 align:middle line:-1
因此你应该牢记这一点并确保

