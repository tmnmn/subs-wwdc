WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:57.437 --> 00:14:00.807 align:start position:34% line:-2
アプリケーションの
アナリティクスです

00:14:01.775 --> 00:14:05.746 align:start position:29% line:-2
皆さんはアナリティクスを
すぐに送信するでしょう

00:14:05.846 --> 00:14:09.483 align:start position:23% line:-1
クラッシュしないデータセットを

00:14:09.583 --> 00:14:11.985 align:start position:32% line:-1
ビルドできるからです

00:14:12.953 --> 00:14:15.422 align:start position:27% line:-1
ただ エネルギー非効率です

00:14:15.856 --> 00:14:19.026 align:start position:30% line:-2
都度 アナリティクスを
送っていると

00:14:19.126 --> 00:14:21.528 align:start position:23% line:-1
ハードウェアが過剰に使われます

00:14:22.696 --> 00:14:25.866 align:start position:21% line:-1
電力と時間の関係を見てみましょう

00:14:26.533 --> 00:14:29.970 align:start position:36% line:-2
送信の都度
リソースが使われ

00:14:30.070 --> 00:14:33.073 align:start position:27% line:-1
続いて アイドルとなります

00:14:34.007 --> 00:14:37.110 align:start position:34% line:-2
グラフでは
山は３つだけですが

00:14:37.244 --> 00:14:41.815 align:start position:27% line:-2
実際のアプリケーションでは
影響は かなりのものです

00:14:44.017 --> 00:14:46.653 align:start position:27% line:-1
解決策は至ってシンプルです

00:14:47.888 --> 00:14:50.457 align:start position:30% line:-1
バッチ処理を行うのです

00:14:50.924 --> 00:14:54.795 align:start position:27% line:-2
それをサポートするAPIは
たくさんあり

00:14:54.895 --> 00:14:57.064 align:start position:14% line:-1
主たるものがNSURLSessionです

00:14:57.798 --> 00:15:00.501 align:start position:16% line:-1
discretionaryプロパティや

