WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.798 --> 00:15:00.501 align:start position:16% line:-1
discretionaryプロパティや

00:15:00.601 --> 00:15:03.437 align:start position:25% line:-2
バックグラウンドセッションに
利用し

00:15:03.537 --> 00:15:06.340 align:start position:32% line:-1
迅速に最適化できます

00:15:08.342 --> 00:15:09.743 align:start position:38% line:-1
これが正解です

00:15:11.144 --> 00:15:15.516 align:start position:29% line:-2
エネルギーと時間の関係を
見てみましょう

00:15:16.917 --> 00:15:19.820 align:start position:32% line:-2
アナリティクスの
アップロードなどには

00:15:19.920 --> 00:15:22.923 align:start position:25% line:-1
多少 時間がかかるでしょうが

00:15:23.023 --> 00:15:26.627 align:start position:30% line:-2
エネルギー量は
はるかに少なく済みます

00:15:26.760 --> 00:15:29.263 align:start position:29% line:-1
消費するのは一度だけです

00:15:29.563 --> 00:15:34.434 align:start position:27% line:-2
バックグラウンドでの処理を
一括で実行したからです

00:15:35.302 --> 00:15:40.274 align:start position:23% line:-2
タスク完了には
多くのエネルギーを費やしますが

00:15:40.374 --> 00:15:45.012 align:start position:27% line:-2
他のアプリケーションを
邪魔する心配はなくなります

00:15:47.214 --> 00:15:51.785 align:start position:23% line:-2
タスクを素早く完了させることも
いい例です

00:15:52.586 --> 00:15:56.323 align:start position:30% line:-2
バックグラウンドで
有用なAPIがあります

00:15:57.157 --> 00:16:00.727 align:start position:30% line:-2
UIKitやVoIP
PushKitなどです

