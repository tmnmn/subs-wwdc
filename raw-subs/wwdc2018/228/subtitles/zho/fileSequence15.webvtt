WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.798 --> 00:15:00.334 align:middle line:-1
通过一个自由属性

00:15:00.567 --> 00:15:01.602 align:middle line:-1
和后台回话

00:15:01.869 --> 00:15:06.106 align:middle line:-2
使用NSURLSession
能快速让你利用这种优化

00:15:08.375 --> 00:15:09.576 align:middle line:-1
这也是解决的正确方法

00:15:11.178 --> 00:15:13.280 align:middle line:-1
这样做以后

00:15:13.347 --> 00:15:15.182 align:middle line:-1
我们再看看能耗时间曲线的样子

00:15:16.850 --> 00:15:20.454 align:middle line:0
这里能看到app执行

00:15:20.521 --> 00:15:23.023 align:middle line:0
上传分析数据的时间长了一些

00:15:23.090 --> 00:15:26.393 align:middle line:0
能耗却小了很多

00:15:26.727 --> 00:15:28.962 align:middle line:0
都集中在一次消耗

00:15:29.596 --> 00:15:32.766 align:middle line:0
这就是在后台运行时

00:15:33.200 --> 00:15:34.168 align:middle line:0
聚合任务的效果

00:15:35.335 --> 00:15:37.838 align:middle line:0
完成任务的短期能耗很高

00:15:37.905 --> 00:15:39.973 align:middle line:-1
但一旦完成后

00:15:40.374 --> 00:15:42.276 align:middle line:-1
不再需要担心这些任务

00:15:42.342 --> 00:15:44.811 align:middle line:-1
或者中断另一个任务的体验

00:15:47.247 --> 00:15:50.184 align:middle line:-1
另一个直观的例子

00:15:50.250 --> 00:15:51.585 align:middle line:-1
是快速结束任务

00:15:52.686 --> 00:15:54.121 align:middle line:-1
使用系统上允许

00:15:54.188 --> 00:15:55.989 align:middle line:-1
你利用后台运行的API

00:15:57.224 --> 00:16:00.394 align:middle line:-2
例如用户界面后台任务或者
UIKit、VOIP、PushKit

