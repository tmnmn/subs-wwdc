WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:56.870 --> 00:49:00.607 align:middle line:-1
这个能耗问题在普通测试中

00:49:01.909 --> 00:49:02.943 align:middle line:-1
很难发现

00:49:03.810 --> 00:49:06.980 align:middle line:-1
可一旦看到变量的值就变得明显

00:49:08.415 --> 00:49:10.150 align:middle line:-1
这就是能耗日志的作用

00:49:11.018 --> 00:49:13.220 align:middle line:-1
这就是能耗分析器的作用

00:49:14.521 --> 00:49:17.191 align:middle line:-1
我们看看这个演示的三个结论

00:49:17.257 --> 00:49:18.492 align:middle line:-1
（能耗分析器演示的结论）

00:49:18.559 --> 00:49:20.427 align:middle line:-1
你能使用能耗分析器

00:49:20.494 --> 00:49:23.230 align:middle line:-1
发现顶级能耗问题

00:49:24.264 --> 00:49:25.766 align:middle line:-1
通过查看顶级问题

00:49:26.133 --> 00:49:27.901 align:middle line:-1
查看发生的频率

00:49:28.535 --> 00:49:31.738 align:middle line:-1
查看受影响的设备和版本

00:49:33.173 --> 00:49:35.609 align:middle line:-1
其次 你能使用权重调用图

00:49:36.043 --> 00:49:37.611 align:middle line:-1
查看集中能耗点

00:49:38.512 --> 00:49:41.281 align:middle line:-1
寻找不寻常的高采样计数的帧

00:49:42.549 --> 00:49:44.651 align:middle line:-1
留心非预期的工作量

00:49:46.286 --> 00:49:50.657 align:middle line:-2
最后使用OpenEnd项目
直接前往代码

00:49:51.191 --> 00:49:53.994 align:middle line:-1
能针对在运行的

00:49:55.028 --> 00:49:55.863 align:middle line:-1
修改并检查

00:49:58.398 --> 00:49:59.933 align:middle line:-1
总结下今天我们学到什么

