WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:57.404 --> 00:14:00.541 align:middle line:-1
是上传分析以及与app分析配合

00:14:00.607 --> 00:14:01.675 align:middle line:-1
（举例）

00:14:01.742 --> 00:14:04.144 align:middle line:-1
可能你收集这些分析数据时

00:14:04.211 --> 00:14:07.381 align:middle line:-2
会立即发送
因为这是一个很健壮的方案

00:14:07.447 --> 00:14:09.216 align:middle line:-1
它让你构建一个数据集

00:14:09.583 --> 00:14:11.685 align:middle line:-1
以应对app的崩溃情况

00:14:12.920 --> 00:14:15.122 align:middle line:-1
那样做可能会能耗有点高

00:14:15.856 --> 00:14:18.692 align:middle line:-1
如果每次进入后台都发送分析数据

00:14:19.159 --> 00:14:21.328 align:middle line:-1
我们可能过度使用网络硬件

00:14:22.729 --> 00:14:23.764 align:middle line:0
我们看看能耗时间曲线

00:14:23.830 --> 00:14:25.699 align:middle line:0
它是这个样子的

00:14:26.567 --> 00:14:27.901 align:middle line:0
每次进入后台

00:14:28.235 --> 00:14:31.138 align:middle line:0
我们驱动网络资源发送分析数据

00:14:31.205 --> 00:14:32.806 align:middle line:0
然后再次空闲下来

00:14:34.074 --> 00:14:37.110 align:middle line:0
图上三点看起来不算太多

00:14:37.177 --> 00:14:40.247 align:middle line:-1
但可以想象如果大量使用app

00:14:40.314 --> 00:14:41.648 align:middle line:-1
这些会一次次叠加起来

00:14:44.051 --> 00:14:46.353 align:middle line:-1
解决问题的正确方法非常简单

00:14:47.921 --> 00:14:50.057 align:middle line:-1
就是分批次发送这些数据

00:14:50.958 --> 00:14:54.461 align:middle line:-1
我们有大量符合聚合原则的API

00:14:54.928 --> 00:14:56.830 align:middle line:-2
其中一个很大的组成部分
是NSURLSession

00:14:57.798 --> 00:15:00.334 align:middle line:-1
通过一个自由属性

