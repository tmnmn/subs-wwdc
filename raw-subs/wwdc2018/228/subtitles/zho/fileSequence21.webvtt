WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.025 --> 00:21:01.695 align:middle line:-1
如果有过多的开销 它有助于识别

00:21:01.762 --> 00:21:03.931 align:middle line:-1
或者意料外的某个组件

00:21:03.997 --> 00:21:04.865 align:middle line:-1
消耗了过多能量

00:21:06.834 --> 00:21:08.268 align:middle line:-1
然后在那下面

00:21:08.936 --> 00:21:11.104 align:middle line:-1
构成平均组件利用率饼图的

00:21:11.772 --> 00:21:12.940 align:middle line:-1
是一个时序图

00:21:13.540 --> 00:21:16.610 align:middle line:-1
代表app实际运行时

00:21:16.677 --> 00:21:18.278 align:middle line:-1
每个组件平均利用率

00:21:18.946 --> 00:21:19.947 align:middle line:-1
这里也能看到

00:21:20.280 --> 00:21:22.749 align:middle line:-1
app当前运行状态

00:21:23.116 --> 00:21:25.819 align:middle line:-1
前台或者后台 也会列出挂起

00:21:27.154 --> 00:21:28.455 align:middle line:-1
这是十分有用的工具

00:21:28.522 --> 00:21:31.124 align:middle line:-1
便于理解app的实时行为

00:21:33.760 --> 00:21:35.829 align:middle line:-1
如我所说 能耗表用于

00:21:36.864 --> 00:21:38.899 align:middle line:-1
高层面的特征识别

00:21:39.666 --> 00:21:40.901 align:middle line:-1
和快速分析非常不错

00:21:41.502 --> 00:21:42.369 align:middle line:-1
这是关键所在

00:21:42.736 --> 00:21:44.004 align:middle line:-1
在代码上迭代时

00:21:44.071 --> 00:21:46.073 align:middle line:-1
作为开发者 你试着完成任务

00:21:46.139 --> 00:21:47.508 align:middle line:-1
试着将其组合起来

00:21:48.075 --> 00:21:51.078 align:middle line:-1
对耗能的设想不能立即清晰起来

00:21:51.345 --> 00:21:52.946 align:middle line:-1
但耗能表是个不错的开始

00:21:55.482 --> 00:21:56.517 align:middle line:-1
但假如已经那样做过

00:21:56.583 --> 00:21:58.218 align:middle line:-1
能耗表对你来说不够

00:21:59.786 --> 00:22:00.854 align:middle line:-1
这时候就要用到工具

