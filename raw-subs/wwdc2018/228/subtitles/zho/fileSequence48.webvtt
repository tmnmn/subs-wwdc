WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:58.212 --> 00:48:00.280 align:middle line:-1
时间间隔有可能是负数

00:48:01.281 --> 00:48:03.016 align:middle line:-1
我们见过这种事情

00:48:03.483 --> 00:48:06.220 align:middle line:-1
特别是用户折腾系统的时候

00:48:07.087 --> 00:48:08.355 align:middle line:-1
可能是在玩游戏

00:48:09.523 --> 00:48:11.191 align:middle line:-1
也可能他们想重置时钟

00:48:11.758 --> 00:48:14.261 align:middle line:-1
也许他们想要额外的时间或者机会

00:48:14.695 --> 00:48:16.029 align:middle line:-1
所以他们前往系统设置

00:48:16.330 --> 00:48:18.332 align:middle line:-1
把时间改到24小时之前

00:48:19.566 --> 00:48:21.168 align:middle line:-1
这种情况下

00:48:21.235 --> 00:48:23.704 align:middle line:-1
这将导致下次刷新时间变成负数

00:48:24.605 --> 00:48:27.140 align:middle line:-2
当我们为定时器设置一个
过去的时间

00:48:27.508 --> 00:48:31.311 align:middle line:-1
定时器将马上触发

00:48:31.778 --> 00:48:33.847 align:middle line:-1
然后反复调用自身

00:48:34.948 --> 00:48:37.317 align:middle line:-1
所以这里就成死循环了

00:48:39.653 --> 00:48:41.655 align:middle line:-1
幸运的是这很容易修复

00:48:42.756 --> 00:48:47.761 align:middle line:-2
我们前往这个函数
将其改成小于或等于0

00:48:48.328 --> 00:48:50.931 align:middle line:-1
这样即使下次刷新时间是负数

00:48:51.465 --> 00:48:52.733 align:middle line:-1
也能从循环退出

00:48:54.468 --> 00:48:56.570 align:middle line:-1
这是不错的例子

00:48:56.870 --> 00:49:00.607 align:middle line:-1
这个能耗问题在普通测试中

