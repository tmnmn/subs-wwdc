WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.224 --> 00:16:00.394 align:middle line:-2
例如用户界面后台任务或者
UIKit、VOIP、PushKit

00:16:01.995 --> 00:16:06.066 align:middle line:-1
这些API有办法让你指明

00:16:06.133 --> 00:16:07.935 align:middle line:-1
你不再需要在后台运行

00:16:10.704 --> 00:16:13.340 align:middle line:-1
因此作为开发者

00:16:13.407 --> 00:16:14.908 align:middle line:-1
如果在使用这些后台模式

00:16:15.742 --> 00:16:18.045 align:middle line:-1
你应该调用这些完成处理函数

00:16:18.111 --> 00:16:19.279 align:middle line:-1
让系统知道任务完成

00:16:20.080 --> 00:16:23.584 align:middle line:-1
事实不总是这样 很多情况下

00:16:23.650 --> 00:16:26.954 align:middle line:-1
我们可能忘了或者不想结束任务

00:16:27.821 --> 00:16:29.423 align:middle line:-1
所以 让任务自己过期

00:16:30.757 --> 00:16:32.459 align:middle line:-1
这对能耗影响很大

00:16:32.526 --> 00:16:37.798 align:middle line:-1
也确实不是软件开发过程中

00:16:37.865 --> 00:16:39.066 align:middle line:-1
必须看到的

00:16:40.133 --> 00:16:42.135 align:middle line:-1
用能耗时间曲线解释一下

00:16:42.202 --> 00:16:43.470 align:middle line:-1
为什么这会高能耗

00:16:44.705 --> 00:16:47.040 align:middle line:-1
想象因为什么原因进入后台

00:16:47.107 --> 00:16:49.676 align:middle line:-1
任务开始 一段时间后任务完成

00:16:50.277 --> 00:16:53.213 align:middle line:-1
如果像说过的 让任务自己过期

00:16:53.981 --> 00:16:56.450 align:middle line:-1
我们进入消耗能量的这段空闲期

00:16:56.517 --> 00:16:58.051 align:middle line:-1
app在后台运行

00:16:58.118 --> 00:17:00.754 align:middle line:-1
因为某些原因请求API

