WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.152 --> 00:37:01.388 align:middle line:-1
例如 是iPhone还是iPad

00:37:02.122 --> 00:37:04.224 align:middle line:-1
还是app的Build 30版本

00:37:05.492 --> 00:37:07.861 align:middle line:-1
第三 也是最重要的信息

00:37:08.195 --> 00:37:09.563 align:middle line:-1
是权重调用图

00:37:09.763 --> 00:37:11.865 align:middle line:-1
其将展示代码里的集中能耗点

00:37:13.200 --> 00:37:15.335 align:middle line:-1
我们深入介绍权重调用图

00:37:16.003 --> 00:37:17.204 align:middle line:-1
它是怎样产生的

00:37:17.571 --> 00:37:19.640 align:middle line:-1
如何用它调试能耗问题

00:37:21.375 --> 00:37:23.343 align:middle line:-2
（Xcode能耗日志：
权重调用图）

00:37:23.410 --> 00:37:26.280 align:middle line:-1
假如app由主函数

00:37:26.647 --> 00:37:27.614 align:middle line:-1
还有一些方法构成

00:37:27.681 --> 00:37:30.784 align:middle line:-1
方法1、方法2、方法3、方法4

00:37:33.687 --> 00:37:35.055 align:middle line:-1
代码开始运行

00:37:35.389 --> 00:37:37.891 align:middle line:-1
直到检测到CPU高能耗事件

00:37:40.661 --> 00:37:44.031 align:middle line:-1
到这时以每秒固定周期

00:37:44.431 --> 00:37:46.867 align:middle line:-1
采样调用堆栈

00:37:47.701 --> 00:37:50.571 align:middle line:-1
调用堆栈是运行时

00:37:51.371 --> 00:37:54.107 align:middle line:-1
活动帧的采样

00:37:55.876 --> 00:37:57.544 align:middle line:0
例如第一个调用堆栈

00:37:58.045 --> 00:38:01.348 align:middle line:0
显示主函数、方法1
方法2被激活

