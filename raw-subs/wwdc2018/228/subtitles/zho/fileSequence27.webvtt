WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.853 --> 00:27:02.656 align:middle line:-1
假如前往添加新动画的视图控制器

00:27:02.956 --> 00:27:05.192 align:middle line:-1
我有一个函数上传动画计数

00:27:05.259 --> 00:27:08.896 align:middle line:-2
其创建简单连接对象
并在每次添加动画时

00:27:08.962 --> 00:27:10.163 align:middle line:-1
上传动画计数

00:27:10.597 --> 00:27:12.132 align:middle line:-1
我将注释掉代码

00:27:13.433 --> 00:27:14.801 align:middle line:-1
然后前往app代理

00:27:14.868 --> 00:27:17.905 align:middle line:-1
将其移动到后台运行时

00:27:17.971 --> 00:27:19.006 align:middle line:-1
唯一的上传动画计数

00:27:20.407 --> 00:27:21.441 align:middle line:-1
在这个演示里

00:27:21.508 --> 00:27:23.277 align:middle line:-1
我将其命名为网络优化

00:27:24.077 --> 00:27:25.846 align:middle line:-1
然后重新构建能耗游戏

00:27:26.713 --> 00:27:28.916 align:middle line:-1
向你们展示这对能耗表的影响

00:27:31.885 --> 00:27:33.687 align:middle line:-1
能耗游戏再次运行

00:27:34.321 --> 00:27:36.456 align:middle line:-1
我将回到Xcode调试器用户界面

00:27:37.324 --> 00:27:38.692 align:middle line:-1
回到耗能影响

00:27:39.693 --> 00:27:42.696 align:middle line:-1
我们再看不到网络耗能

00:27:42.763 --> 00:27:44.932 align:middle line:-1
也看不到任何开销 这很不错

00:27:45.699 --> 00:27:47.034 align:middle line:-1
这是个简单优化

00:27:47.367 --> 00:27:50.304 align:middle line:-1
简单将网络请求从一处移到另一处

00:27:50.737 --> 00:27:52.739 align:middle line:-1
阻止其频繁发生

00:27:53.473 --> 00:27:56.143 align:middle line:-1
让我们在安静的用例中

00:27:56.910 --> 00:27:58.111 align:middle line:-1
大幅降低能耗

