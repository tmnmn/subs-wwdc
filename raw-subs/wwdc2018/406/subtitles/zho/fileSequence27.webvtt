WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.306 --> 00:27:00.396 A:middle
这是 当然了 Swift 中的一个较新的功能

00:27:00.646 --> 00:27:02.216 A:middle
让我们首先从切片开始看

00:27:02.216 --> 00:27:07.276 A:middle
对于你所拥有的任意一个集合
你可以形成那个集合的一个切片

00:27:07.276 --> 00:27:12.236 A:middle
通过带有指定 索引范围的自定义下标实现

00:27:12.236 --> 00:27:16.256 A:middle
并且那个切片 其实是集合的某一个部分的视图

00:27:16.256 --> 00:27:21.366 A:middle
现在你在切片集合中所得到的一种默认类型

00:27:21.366 --> 00:27:23.696 A:middle
叫做切片

00:27:24.486 --> 00:27:26.146 A:middle
并且切片是一个通用的适配器类型

00:27:26.146 --> 00:27:32.016 A:middle
那么它在基础集合类型上参数化了

00:27:32.016 --> 00:27:33.216 A:middle
它自己就是一个集合

00:27:33.936 --> 00:27:37.636 A:middle
所以我们对于切片的期待就是
你可以对切片做任何

00:27:37.636 --> 00:27:38.676 A:middle
你能对下面的集合所做的事

00:27:38.676 --> 00:27:41.266 A:middle
这个要求很合理

00:27:41.966 --> 00:27:44.496 A:middle
我们当然可以使用向前搜索操作

00:27:44.496 --> 00:27:47.406 A:middle
比如 index(where:)
来查找匹配某个谓语的东西

00:27:47.406 --> 00:27:50.226 A:middle
那适用于集合以及那个集合的任意切片

00:27:50.226 --> 00:27:54.506 A:middle
我们想用向后搜索来做同样的事

00:27:54.506 --> 00:27:55.456 A:middle
但在这里我们会产生一个问题

00:27:55.456 --> 00:27:59.756 A:middle
即便缓冲器是一个
BidirectionalCollection

00:27:59.756 --> 00:28:01.976 A:middle
并没说切片也是一个
BidirectionalCollection

