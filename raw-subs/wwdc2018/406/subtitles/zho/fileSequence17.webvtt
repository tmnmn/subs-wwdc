WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.276 --> 00:17:00.356 A:middle
取决于它要变得多大

00:17:00.356 --> 00:17:02.696 A:middle
那么这个过程需要时间

00:17:02.926 --> 00:17:04.715 A:middle
分配内存的消耗非常大

00:17:04.715 --> 00:17:09.106 A:middle
有一个很棒的优化小技巧
我们可以应用于这种实施上

00:17:09.106 --> 00:17:13.986 A:middle
我们已经了解
最终的数组具体会有多大了

00:17:14.016 --> 00:17:16.945 A:middle
它会跟我们原始集合的尺寸一样大

00:17:16.945 --> 00:17:22.766 A:middle
那么我们可以提前在数组中储备好空间

00:17:22.766 --> 00:17:26.435 A:middle
在我们开始添加之前
这是一次很漂亮的加速

00:17:26.435 --> 00:17:29.106 A:middle
为此我们要调用计数

00:17:29.196 --> 00:17:32.466 A:middle
但我们在这里调用计数

00:17:32.466 --> 00:17:34.226 A:middle
在通用情境中

00:17:34.226 --> 00:17:40.626 A:middle
也就是集合类型是完全通用的情境
而不是特定的情境

00:17:40.626 --> 00:17:43.296 A:middle
可以是一个数组或字典或链表或任意

00:17:43.296 --> 00:17:46.286 A:middle
那么我们不知道有一个

00:17:46.286 --> 00:17:49.396 A:middle
更好的计数实施可用

00:17:49.396 --> 00:17:51.646 A:middle
当编译器编译这段代码时

00:17:51.646 --> 00:17:56.376 A:middle
那么在这种情况下 即将被调用的计数版本

00:17:56.376 --> 00:18:01.086 A:middle
实际上是计数的通用版本 可以应用在任意集合上

