WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.486 --> 00:29:02.806 A:middle
现在请注意 我在这里写了两个不同的扩展

00:29:03.806 --> 00:29:05.086 A:middle
它是常见的 Swift 样式

00:29:05.086 --> 00:29:07.026 A:middle
写扩展 让它遵循某个协议

00:29:07.026 --> 00:29:10.966 A:middle
这样你就知道该扩展是干什么的
你就了解了它的意思

00:29:11.466 --> 00:29:15.106 A:middle
它有条件一致性特别重要

00:29:15.456 --> 00:29:19.006 A:middle
因为你在这些扩展上有不同的要求

00:29:19.006 --> 00:29:22.036 A:middle
这就允许有可组合性

00:29:22.036 --> 00:29:26.316 A:middle
无论下面的基层集合可以做什么

00:29:26.316 --> 00:29:27.326 A:middle
切片类型同样也可以做

00:29:28.796 --> 00:29:32.326 A:middle
那么让我们看看条件一致性的另一个 App

00:29:32.326 --> 00:29:33.556 A:middle
也是在标准程序库中

00:29:33.556 --> 00:29:34.866 A:middle
也是在标准程序库中 这些是范围

00:29:34.866 --> 00:29:37.666 A:middle
那么范围永远存在于 Swift 中

00:29:37.666 --> 00:29:40.156 A:middle
你可以形成一个范围 比如说这些操作符

00:29:40.156 --> 00:29:44.506 A:middle
因此你可以形成双精度浮点型范围
也可以形成整型范围

00:29:44.506 --> 00:29:48.156 A:middle
但有些范围比另外一些更强大

00:29:48.416 --> 00:29:52.316 A:middle
那么你可以在整型范围内迭代元素

00:29:52.926 --> 00:29:53.876 A:middle
为什么你能这样做呢？

00:29:53.876 --> 00:29:55.066 A:middle
那是因为 intRange 遵循集合

00:29:55.576 --> 00:29:59.276 A:middle
现在如果你查看一下类型

00:29:59.276 --> 00:30:00.606 A:middle
由那个运算符创建的类型

