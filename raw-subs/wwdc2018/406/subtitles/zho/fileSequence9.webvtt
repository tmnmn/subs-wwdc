WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.726 --> 00:09:01.816 A:middle
然后尝试通过一个协议把它们统一起来

00:09:03.336 --> 00:09:04.176 A:middle
那些类型共同拥有什么？

00:09:04.176 --> 00:09:06.456 A:middle
它们不共同拥有什么？

00:09:07.356 --> 00:09:08.706 A:middle
当你正设计一个这样的协议时

00:09:08.706 --> 00:09:11.246 A:middle
你可以把它看作是一种诸如合约谈判一样的东西

00:09:11.246 --> 00:09:14.686 A:middle
这里有一个很常见的拉锯战

00:09:14.686 --> 00:09:17.086 A:middle
在一致性类型之间 一方面

00:09:17.526 --> 00:09:20.896 A:middle
在执行那个约束方面 想要尽可能多的灵活性

00:09:20.896 --> 00:09:24.636 A:middle
而协议的用户

00:09:24.636 --> 00:09:25.856 A:middle
想要一个漂亮、紧凑、简单的协议

00:09:26.086 --> 00:09:28.546 A:middle
以便实现他们的扩展

00:09:28.546 --> 00:09:32.196 A:middle
这就是为什么非常重要的原因

00:09:32.226 --> 00:09:35.006 A:middle
同时考虑到 尽可能多的种类的一致性类型

00:09:35.006 --> 00:09:37.226 A:middle
和一系列不同用例

00:09:37.226 --> 00:09:42.246 A:middle
当你正在设计协议时 因为它是一种平衡做法

00:09:43.076 --> 00:09:46.546 A:middle
那么让我们开始具体化集合协议吧

00:09:46.726 --> 00:09:48.616 A:middle
那么首先我们需要表达元素类型

00:09:49.036 --> 00:09:52.556 A:middle
现在在协议中 我们使用了一个相关联类型

00:09:52.956 --> 00:09:55.906 A:middle
每个一致性类型 都需要对元素进行适当的设置

00:09:55.906 --> 00:09:59.096 A:middle
在缓冲器或数组的例子中

00:09:59.096 --> 00:10:02.516 A:middle
对于 Swift 4.2 来说 这是自动发生的

