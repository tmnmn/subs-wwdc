WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.646 --> 00:15:03.976 A:middle
字典可以很简单地把它的索引类型变为等同

00:15:07.346 --> 00:15:10.246 A:middle
接下来让我们谈谈优化这个计数操作

00:15:10.426 --> 00:15:12.256 A:middle
通过一个自定义点

00:15:14.416 --> 00:15:19.126 A:middle
那么我们已经写了一个版本的计数

00:15:19.126 --> 00:15:19.886 A:middle
计算集合中元素的数量

00:15:19.886 --> 00:15:21.446 A:middle
通过跨过整个集合

00:15:21.446 --> 00:15:24.846 A:middle
但很明显 许多集合很可能做得更快

00:15:24.846 --> 00:15:29.736 A:middle
比如 假如字典在内部保留

00:15:29.736 --> 00:15:30.946 A:middle
它所持有的元素数量

00:15:30.946 --> 00:15:32.516 A:middle
用于实现自己的目的

00:15:33.256 --> 00:15:34.946 A:middle
如果它拥有这个信息

00:15:34.946 --> 00:15:37.416 A:middle
它就可以在它自己的计数实施中使用它

00:15:38.386 --> 00:15:41.806 A:middle
那意味着当人们在字典上调用计数时

00:15:42.036 --> 00:15:43.676 A:middle
他们会获得快速、恒定的时间

00:15:44.096 --> 00:15:45.416 A:middle
而不是线性时间

00:15:45.416 --> 00:15:48.256 A:middle
是指那个适用于任意集合的原始版本
所需要的线性时间

00:15:49.116 --> 00:15:52.196 A:middle
但当添加这样的优化时
你需要注意几点

00:15:52.196 --> 00:15:55.476 A:middle
即旅行协议的要求之间的不同点

00:15:55.476 --> 00:15:59.546 A:middle
和仅在指定类型上添加大量负载

00:15:59.546 --> 00:16:05.686 A:middle
直到现在 这个字典上的计数新版本
就是一个负载

