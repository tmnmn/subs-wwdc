WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.126 --> 00:07:03.646 A:middle
更多关于元素所需要具备的性能的信息

00:07:03.646 --> 00:07:05.636 A:middle
以便让这个方法在缓冲器上可用

00:07:05.636 --> 00:07:10.626 A:middle
现在最简单的方式就是 通过限制元素类型

00:07:10.626 --> 00:07:13.856 A:middle
为指定类型实现 就好像原始循环中的整型

00:07:14.676 --> 00:07:20.656 A:middle
如果你采用这种简单的方法来实现
并和扩展一起运行

00:07:20.656 --> 00:07:21.726 A:middle
那么稍后的推广会很简单

00:07:22.176 --> 00:07:23.676 A:middle
当你发现你需要做一些不同的操作时

00:07:23.676 --> 00:07:25.906 A:middle
比如总计双精度浮点型缓冲器
或单精度浮点型缓冲器

00:07:26.966 --> 00:07:28.256 A:middle
请看看你所限制的类型

00:07:28.256 --> 00:07:31.006 A:middle
查看它所遵循的协议

00:07:31.006 --> 00:07:34.816 A:middle
并保持追踪 直到你获得最通用的协议

00:07:34.816 --> 00:07:35.736 A:middle
那你就万事俱备了

00:07:35.736 --> 00:07:39.206 A:middle
在本例中 数字协议

00:07:39.206 --> 00:07:41.756 A:middle
给我们提供了 我们在这里所依赖的两个功能

00:07:42.486 --> 00:07:46.596 A:middle
创建值为 0 的新元素的能力

00:07:46.596 --> 00:07:48.096 A:middle
以及添加新元素的能力

00:07:48.096 --> 00:07:49.876 A:middle
这是数字协议的一部分

00:07:49.876 --> 00:07:54.776 A:middle
现在让我们谈谈

00:07:54.776 --> 00:07:58.496 A:middle
从不同类型中析出协议的过程

00:07:59.456 --> 00:08:03.366 A:middle
那么我们一直在谈这个缓冲器类型

