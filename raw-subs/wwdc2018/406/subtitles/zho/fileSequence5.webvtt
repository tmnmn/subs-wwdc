WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.976 --> 00:05:00.316 A:middle
它可以使用那个元素类型 而以前它用的是 Any

00:05:03.336 --> 00:05:05.476 A:middle
那意味着不再需要任何转换

00:05:05.476 --> 00:05:06.416 A:middle
当你从缓冲器中获取类型时

00:05:06.416 --> 00:05:10.456 A:middle
如果你意外分配了错误的类型

00:05:10.456 --> 00:05:13.566 A:middle
或者类似的情况 编译器会捕捉你

00:05:15.216 --> 00:05:19.406 A:middle
现在并没有这种不带相关联的
元素类型的缓冲器类型了

00:05:19.406 --> 00:05:23.646 A:middle
如果你尝试声明一个那样的类型
你会得到一个编译错误

00:05:23.646 --> 00:05:29.106 A:middle
你可能会感觉有点吃惊 因为有时候你会看到

00:05:29.106 --> 00:05:32.386 A:middle
你可以声明不带任何元素类型的类型 比如缓冲器

00:05:33.206 --> 00:05:33.926 A:middle
但那仅仅是因为编译器

00:05:33.926 --> 00:05:36.896 A:middle
可以根据情境推断 应该是哪种元素类型

00:05:37.206 --> 00:05:40.676 A:middle
在本例中 是从右手边这儿的字面进行推断

00:05:41.686 --> 00:05:44.576 A:middle
元素仍然还在那里 就是有点含蓄

00:05:46.356 --> 00:05:48.046 A:middle
到底包含哪种类型

00:05:48.126 --> 00:05:50.506 A:middle
诸如缓冲器一样的类型

00:05:50.506 --> 00:05:54.276 A:middle
可以应用在编译和运行期的整个过程中

00:05:54.276 --> 00:06:01.266 A:middle
这意味着我们可以实现在内存的
连续块中保留全部元素的目标

