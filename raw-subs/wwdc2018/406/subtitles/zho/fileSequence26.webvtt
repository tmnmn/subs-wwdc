WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:56.756 --> 00:26:00.556 A:middle
现在我们把这两个协议的功能放在了一起

00:26:00.556 --> 00:26:06.216 A:middle
现在当你拥有许多一致性类型时

00:26:06.216 --> 00:26:07.986 A:middle
以及许多通用算法时

00:26:07.986 --> 00:26:09.806 A:middle
你常常会形成协议等级

00:26:09.806 --> 00:26:12.156 A:middle
这些等级不应该太长

00:26:12.156 --> 00:26:14.026 A:middle
不应该太深入

00:26:14.026 --> 00:26:18.066 A:middle
因为你其实是希望要少量的协议

00:26:18.066 --> 00:26:21.426 A:middle
只要能描述在域名中出现的类型即可 对吧？

00:26:21.876 --> 00:26:23.766 A:middle
现在你一定注意到了

00:26:23.766 --> 00:26:25.846 A:middle
当你着手创建这些协议等级时

00:26:25.846 --> 00:26:29.646 A:middle
那么随着你从等级的底层到顶层

00:26:29.646 --> 00:26:32.176 A:middle
你得到的协议会拥有较少的要求

00:26:32.306 --> 00:26:35.306 A:middle
因此有更多的一致性类型 可以实施那些要求

00:26:35.306 --> 00:26:39.416 A:middle
现在从另一方面说 随着你往等级的底层移动

00:26:39.466 --> 00:26:42.646 A:middle
并结合等级中不同的协议

00:26:42.696 --> 00:26:46.076 A:middle
你就要实施更复杂、更专业的算法

00:26:46.076 --> 00:26:47.676 A:middle
要求更高级的功能

00:26:47.676 --> 00:26:50.836 A:middle
但实际上只能用于较少的一致性类型上

00:26:54.556 --> 00:26:56.306 A:middle
好的

00:26:56.306 --> 00:26:57.246 A:middle
让我们谈谈条件一致性

00:26:57.306 --> 00:27:00.396 A:middle
这是 当然了 Swift 中的一个较新的功能

