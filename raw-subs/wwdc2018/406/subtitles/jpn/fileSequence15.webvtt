WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:56.597 --> 00:15:00.501 align:start position:20% line:-2
Swift 4.2の新しい
Equatable準拠自動合成で―

00:15:01.235 --> 00:15:04.271 align:start position:25% line:-2
インデックス型を
Equatableにできます

00:15:07.241 --> 00:15:12.646 align:start position:27% line:-2
次はカスタムポイントを含む
カウントの最適化です

00:15:14.381 --> 00:15:17.251 align:start position:23% line:-1
今書いたカウントのバージョンは

00:15:17.351 --> 00:15:22.189 align:start position:29% line:-2
全コレクションをまたいで
要素数を計算します

00:15:22.289 --> 00:15:26.126 align:start position:25% line:-2
しかし 多くのコレクションは
もっと速くできます

00:15:26.593 --> 00:15:32.866 align:start position:21% line:-2
例えば ディクショナリが
要素数のカウントを保持していれば

00:15:33.400 --> 00:15:37.838 align:start position:32% line:-2
自身のカウント実装に
使うことができます

00:15:38.572 --> 00:15:44.011 align:start position:27% line:-2
ディクショナリのカウントを
呼び出すと得られるのは

00:15:44.111 --> 00:15:48.549 align:start position:32% line:-2
元の線形時間ではなく
速い定数時間です

00:15:49.817 --> 00:15:53.921 align:start position:32% line:-2
ただ 最適化の追加に
留意点があります

00:15:54.021 --> 00:16:00.427 align:start position:25% line:-2
プロトコル要件の実行と
オーバーロード追加の違いです

