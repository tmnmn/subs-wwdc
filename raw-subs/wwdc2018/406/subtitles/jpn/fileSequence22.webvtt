WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.418 --> 00:22:01.755 align:start position:30% line:-2
コレクションにも準拠し
アルゴリズムを使えます

00:22:02.022 --> 00:22:08.195 align:start position:2% line:-2
しかしBidirectionalCollectionは
後退する要件を追加します

00:22:08.695 --> 00:22:13.801 align:start position:27% line:-2
ただ この要件を実装できる
コレクションは限られます

00:22:13.901 --> 00:22:20.007 align:start position:14% line:-2
例えばSinglyLinkedListは
次に飛ぶだけですよね

00:22:20.107 --> 00:22:22.776 align:start position:29% line:-1
後退は効率的ではないので

00:22:22.876 --> 00:22:25.679 align:start position:7% line:-2
BidirectionalCollectionは
あり得ません

00:22:25.779 --> 00:22:29.650 align:start position:34% line:-2
つまり継承の導入は
準拠型を制限します

00:22:30.117 --> 00:22:34.054 align:start position:27% line:-2
しかし より興味深い
アルゴリズムを実装できます

00:22:34.154 --> 00:22:39.092 align:start position:30% line:-2
最後のインデックス後の
コードはこうです

00:22:39.193 --> 00:22:44.965 align:start position:7% line:-2
BidirectionalCollectionの
新要件を使って後退させるだけです

00:22:46.500 --> 00:22:50.404 align:start position:27% line:-2
次は 更に興味深い
シャッフルアルゴリズムです

00:22:50.504 --> 00:22:55.008 align:start position:20% line:-2
Swift 4.2のコレクションに
導入されています

00:22:55.109 --> 00:22:59.079 align:start position:30% line:-2
このアルゴリズムを見て
導入された要件を確認し

00:22:59.179 --> 00:23:02.883 align:start position:29% line:-2
プロトコルを
意味のあるよう分類します

