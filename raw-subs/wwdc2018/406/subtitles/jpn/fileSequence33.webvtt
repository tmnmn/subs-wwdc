WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.813 --> 00:33:02.883 align:start position:29% line:-2
実際 他コードの
クリーンアップに使えます

00:33:02.983 --> 00:33:04.685 align:start position:23% line:-1
CountableRangeは

00:33:04.785 --> 00:33:10.691 align:start position:25% line:-2
Stride機能を持つ
Rangeなので拡張できます

00:33:10.791 --> 00:33:15.262 align:start position:9% line:-2
RandomAccessCollectionに
準拠の場合です

00:33:16.363 --> 00:33:20.968 align:start position:21% line:-2
Swift 4.2に導入したのは
扱う型をシンプルにし―

00:33:21.068 --> 00:33:25.672 align:start position:27% line:-2
既存のコア型の構成可能性と
柔軟性を高めるためです

00:33:27.641 --> 00:33:33.080 align:start position:29% line:-2
再帰的制約はプロトコルと
関連型の関係を記述します

00:33:33.247 --> 00:33:37.217 align:start position:21% line:-1
WWDCでは取り上げていませんが

00:33:37.451 --> 00:33:41.989 align:start position:27% line:-2
Swiftのジェネリクスで
重要な部分です

00:33:42.122 --> 00:33:43.290 align:start position:38% line:-1
見てみましょう

00:33:44.057 --> 00:33:50.664 align:start position:21% line:-2
再帰的制約は同じプロトコルを示す
プロトコル内の制約です

00:33:50.964 --> 00:33:57.438 align:start position:14% line:-2
このSubSequenceという関連型は
これ自体コレクションですが

00:33:57.638 --> 00:33:59.106 align:start position:39% line:-1
なぜ必要か？

00:33:59.239 --> 00:34:02.810 align:start position:21% line:-1
汎用アルゴリズムを見てみましょう

