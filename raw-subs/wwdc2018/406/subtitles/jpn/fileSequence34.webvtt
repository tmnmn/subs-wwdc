WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.239 --> 00:34:02.810 align:start position:21% line:-1
汎用アルゴリズムを見てみましょう

00:34:03.644 --> 00:34:06.213 align:start position:25% line:-1
コレクションはソート済みです

00:34:06.313 --> 00:34:12.119 align:start position:29% line:-2
ここに新しい値を挿入する
インデックスを探します

00:34:12.351 --> 00:34:15.922 align:start position:5% line:-2
値“11”の
sortedInsertionPointを探します

00:34:16.255 --> 00:34:21.762 align:start position:25% line:-2
ここに“11”を挿入しても
ソート済み配列はそのままです

00:34:21.929 --> 00:34:27.134 align:start position:27% line:-2
これは 二分探索の観点から
実装される機能です

00:34:27.434 --> 00:34:30.871 align:start position:29% line:-2
二分探索は
分割統治アルゴリズムで―

00:34:30.971 --> 00:34:37.110 align:start position:27% line:-2
各段階で 問題サイズを
大幅に減らす決定を行います

00:34:37.210 --> 00:34:39.146 align:start position:36% line:-1
次のステップです

00:34:39.413 --> 00:34:43.516 align:start position:29% line:-2
二分探索のために
まず中央要素“８”を見て

00:34:43.750 --> 00:34:46.887 align:start position:21% line:-1
挿入したい値“11”と比較します

00:34:47.187 --> 00:34:49.422 align:start position:25% line:-1
“11”は“８”より上なので

00:34:49.523 --> 00:34:55.429 align:start position:25% line:-2
“８”の後ろのコレクションに
挿入すると分かります

00:34:55.529 --> 00:34:58.065 align:start position:29% line:-1
探索範囲が二分されました

00:34:58.999 --> 00:35:04.571 align:start position:23% line:-2
さらに後半の中央要素“14”と
“11”と比較します

