WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:56.450 --> 00:17:00.954 align:start position:27% line:-2
大きくなる度合いによっては
数回必要になり―

00:17:01.421 --> 00:17:02.890 align:start position:36% line:-1
時間もかかります

00:17:02.990 --> 00:17:05.659 align:start position:23% line:-1
メモリの割り当ては負担ですが―

00:17:06.693 --> 00:17:10.130 align:start position:25% line:-1
ここで最適化のコツがあります

00:17:10.531 --> 00:17:14.334 align:start position:29% line:-1
最終的な配列の大きさは―

00:17:14.434 --> 00:17:17.804 align:start position:30% line:-2
元のコレクションと
まったく同じサイズです

00:17:18.605 --> 00:17:23.443 align:start position:30% line:-2
配列に加える前に
その分を取っておけば―

00:17:23.544 --> 00:17:27.181 align:start position:29% line:-1
スピードアップを図れます

00:17:27.513 --> 00:17:29.950 align:start position:32% line:-2
これには カウントを
呼び出します

00:17:30.951 --> 00:17:35.689 align:start position:30% line:-2
ここでは 汎用的な
コンテキストとしてです

00:17:35.789 --> 00:17:40.661 align:start position:29% line:-2
つまり コレクション型は
完全に汎用的なので―

00:17:40.761 --> 00:17:44.064 align:start position:32% line:-2
配列やディクショナリ
何でもあり得ます

00:17:44.631 --> 00:17:48.869 align:start position:27% line:-2
コードをコンパイルする際の
カウントが―

00:17:48.969 --> 00:17:52.372 align:start position:25% line:-1
より良いものかは分かりません

00:17:52.906 --> 00:17:59.112 align:start position:27% line:-2
この場合 呼び出されるのは
汎用バージョンで

00:17:59.213 --> 00:18:03.116 align:start position:21% line:-1
全コレクションに働き 反復します

