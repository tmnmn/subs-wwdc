WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.411 --> 00:48:00.280 align:start position:29% line:-1
凝集設計の好例と言えます

00:48:00.614 --> 00:48:05.953 align:start position:21% line:-2
コレクション階層で
様々な関連型のデフォルトが要ると

00:48:06.120 --> 00:48:08.021 align:start position:29% line:-1
設計は困難かもしれません

00:48:08.222 --> 00:48:13.594 align:start position:23% line:-2
再帰的制約はパワフルで
関連型とwhere句に使えます

00:48:13.694 --> 00:48:15.996 align:start position:27% line:-1
必要なプロトコル要件が書け

00:48:16.096 --> 00:48:20.467 align:start position:30% line:-2
分割統治アルゴリズムを
汎用コードで表せます

00:48:20.567 --> 00:48:23.971 align:start position:23% line:-1
では WWDCの最終パートです

00:48:24.905 --> 00:48:28.208 align:start position:20% line:-1
Swiftはマルチパラダイム言語で

00:48:28.308 --> 00:48:32.946 align:start position:21% line:-2
オブジェクト指向プログラミングも
サポートしています

00:48:33.614 --> 00:48:36.350 align:start position:30% line:-1
そこで ２つの機能が―

00:48:36.450 --> 00:48:40.888 align:start position:21% line:-2
Swift言語でどう対話するかを
お話しします

00:48:41.188 --> 00:48:44.958 align:start position:29% line:-2
まず クラス継承の働きは
ご存じですね

00:48:45.058 --> 00:48:46.160 align:start position:39% line:-1
シンプルです

00:48:46.260 --> 00:48:48.295 align:start position:21% line:-1
スーパークラスのVehicleや

00:48:48.395 --> 00:48:53.133 align:start position:12% line:-2
継承したサブクラスの
TaxiやPoliceCarが宣言できます

00:48:53.467 --> 00:48:56.703 align:start position:23% line:-1
オブジェクト指向階層ができたら

00:48:56.803 --> 00:49:00.741 align:start position:30% line:-2
サブクラスが
どこで使えるか考えます

