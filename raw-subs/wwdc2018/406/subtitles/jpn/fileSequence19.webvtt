WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.140 --> 00:19:05.412 align:start position:30% line:-2
メソッドやプロパティの
実装が良くなる可能性を

00:19:05.512 --> 00:19:07.214 align:start position:30% line:-1
コンパイラに知らせます

00:19:07.314 --> 00:19:09.650 align:start position:29% line:-1
それで汎用コンテキストで

00:19:09.750 --> 00:19:14.288 align:start position:30% line:-2
プロトコルを通して
動的に実装を行うのです

00:19:15.422 --> 00:19:18.192 align:start position:32% line:-2
今 ディクショナリで
マップを呼び出せば

00:19:18.292 --> 00:19:22.829 align:start position:27% line:-2
汎用的な機能でも
カウント実装が良くなります

00:19:24.498 --> 00:19:29.570 align:start position:21% line:-2
このようなカスタマイズポイントの
追加で―

00:19:30.270 --> 00:19:33.240 align:start position:27% line:-1
パワフルに恩恵が得られます

00:19:33.340 --> 00:19:37.945 align:start position:27% line:-2
クラスや実装継承
メソッドの上書きと同様です

00:19:38.278 --> 00:19:42.649 align:start position:21% line:-1
また 構造体や列挙型にも使えます

00:19:45.285 --> 00:19:48.655 align:start position:32% line:-2
ただ 最適化できない
メソッドもあります

00:19:49.122 --> 00:19:52.960 align:start position:30% line:-2
カスタマイズポイントは
バイナリサイズや―

00:19:53.060 --> 00:19:56.196 align:start position:36% line:-2
ランタイム動作に
少しは影響します

00:19:56.296 --> 00:19:59.032 align:start position:25% line:-2
ですから
カスタマイズポイントの追加は

00:19:59.132 --> 00:20:01.635 align:start position:27% line:-1
最適化が適する時に限ります

