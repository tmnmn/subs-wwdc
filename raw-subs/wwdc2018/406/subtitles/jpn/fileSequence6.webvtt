WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:56.456 --> 00:06:00.294 align:start position:32% line:-2
つまり 全要素を
オーバーヘッドなしで

00:06:00.394 --> 00:06:03.263 align:start position:29% line:-2
連続したメモリブロックに
保持できるのです

00:06:03.864 --> 00:06:06.934 align:start position:29% line:-1
型が任意に大きくてもです

00:06:08.168 --> 00:06:10.204 align:start position:34% line:-1
コンパイラは常に―

00:06:10.771 --> 00:06:15.742 align:start position:27% line:-2
バッファが対応する要素型を
直接知っています

00:06:15.843 --> 00:06:20.047 align:start position:21% line:-1
それで最適化の機会を持てるのです

00:06:20.480 --> 00:06:23.684 align:start position:29% line:-2
ここでは 整数バッファを
宣言していて―

00:06:24.284 --> 00:06:29.623 align:start position:23% line:-2
ループの高効率なCPU命令への
コンパイルが必要です

00:06:31.825 --> 00:06:33.660 align:start position:32% line:-1
このようなループを―

00:06:35.028 --> 00:06:41.268 align:start position:27% line:-2
定期的に書くならメソッドに
抽出するのもいいでしょう

00:06:41.368 --> 00:06:47.140 align:start position:21% line:-2
バッファの拡張でユニットテストや
読み込みも楽になります

00:06:48.242 --> 00:06:52.012 align:start position:21% line:-1
しかしコンパイルの問題が起きます

00:06:52.412 --> 00:06:56.550 align:start position:32% line:-2
すべての要素型が
要約されないからです

00:06:57.518 --> 00:07:03.190 align:start position:25% line:-2
要素に必要なケイパビリティを
コンパイラに伝えないと―

