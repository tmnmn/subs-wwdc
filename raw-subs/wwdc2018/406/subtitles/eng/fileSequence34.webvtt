WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.316 --> 00:34:00.886 A:middle
Well, let's look at a generic

00:34:00.886 --> 00:34:02.566 A:middle
algorithm that relies on it.

00:34:03.086 --> 00:34:05.386 A:middle
So here, given an already sorted

00:34:05.386 --> 00:34:06.006 A:middle
collection.

00:34:06.316 --> 00:34:07.906 A:middle
We want to find the index at

00:34:07.906 --> 00:34:09.496 A:middle
which we should insert a new

00:34:09.496 --> 00:34:10.065 A:middle
value.

00:34:10.335 --> 00:34:12.076 A:middle
To maintain that sort order.

00:34:12.456 --> 00:34:13.255 A:middle
We're going to compute the

00:34:13.255 --> 00:34:14.656 A:middle
sorted insertion point for the

00:34:14.656 --> 00:34:15.585 A:middle
value 11.

00:34:16.335 --> 00:34:17.985 A:middle
When we go ahead and insert 11

00:34:17.985 --> 00:34:19.936 A:middle
at that index, the result is

00:34:19.936 --> 00:34:21.406 A:middle
still a sorted array.

00:34:22.036 --> 00:34:23.315 A:middle
The sorted insertion point of

00:34:23.315 --> 00:34:25.386 A:middle
function is implemented in terms

00:34:25.386 --> 00:34:26.846 A:middle
of a binary search.

00:34:27.536 --> 00:34:28.806 A:middle
Binary search is a classic

00:34:28.806 --> 00:34:30.716 A:middle
divide-and-conquer algorithm.

00:34:31.005 --> 00:34:32.766 A:middle
Meaning that at each step, it

00:34:32.766 --> 00:34:34.646 A:middle
makes a decision that allows it

00:34:34.646 --> 00:34:35.985 A:middle
to significantly reduce the

00:34:35.985 --> 00:34:37.056 A:middle
problem size.

00:34:37.196 --> 00:34:38.876 A:middle
For the next step to consider.

00:34:38.876 --> 00:34:41.476 A:middle
For binary search, we first look

00:34:41.476 --> 00:34:43.216 A:middle
at the middle element, 8.

00:34:43.735 --> 00:34:44.966 A:middle
And compare it against the value

00:34:44.966 --> 00:34:45.755 A:middle
that we want to insert.

00:34:45.976 --> 00:34:46.545 A:middle
That's 11.

00:34:47.226 --> 00:34:49.085 A:middle
And because 11 is greater than

00:34:49.085 --> 00:34:51.085 A:middle
8, we know that 11 needs to be

00:34:51.085 --> 00:34:53.476 A:middle
inserted somewhere after the 8.

00:34:53.585 --> 00:34:54.556 A:middle
In the latter half of the

00:34:54.556 --> 00:34:55.136 A:middle
collection.

00:34:55.626 --> 00:34:57.136 A:middle
So we restrict our search space

00:34:57.236 --> 00:34:57.826 A:middle
by half.

00:34:59.096 --> 00:35:00.726 A:middle
In our next step, we find the

