WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:56.096 --> 00:21:00.606 A:middle
这也是 Swift 开源项目的一部分

00:21:02.796 --> 00:21:04.806 A:middle
独立的软件开发

00:21:04.876 --> 00:21:06.266 A:middle
再加上详细声明的依赖

00:21:06.266 --> 00:21:10.686 A:middle
保证了

00:21:10.686 --> 00:21:11.776 A:middle
即使有的包要求复杂

00:21:11.776 --> 00:21:13.476 A:middle
也可以安全可靠地

00:21:13.476 --> 00:21:15.736 A:middle
在不同环境下构建和使用

00:21:17.016 --> 00:21:18.376 A:middle
SwiftPM 不会把包

00:21:18.376 --> 00:21:19.596 A:middle
以全局形式安装到系统

00:21:19.786 --> 00:21:21.506 A:middle
它只允许你

00:21:21.506 --> 00:21:23.956 A:middle
使用你指明依赖的包

00:21:25.166 --> 00:21:29.116 A:middle
我们还利用了构建沙盒

00:21:29.116 --> 00:21:30.526 A:middle
这样在构建时 就不会

00:21:30.526 --> 00:21:32.106 A:middle
把内容写入文件系统的任意位置

00:21:33.546 --> 00:21:36.216 A:middle
SwiftPM 不允许

00:21:36.216 --> 00:21:37.676 A:middle
执行任意命令

00:21:37.676 --> 00:21:39.056 A:middle
或者外壳脚本

00:21:40.246 --> 00:21:41.326 A:middle
这让我们可以

00:21:41.326 --> 00:21:44.016 A:middle
完全了解你的构建图

00:21:44.396 --> 00:21:46.396 A:middle
和所有的输入输出

00:21:46.396 --> 00:21:49.366 A:middle
进行快速又准确的增量构建

00:21:50.166 --> 00:21:52.486 A:middle
因为我们知道

00:21:52.486 --> 00:21:53.326 A:middle
你所有的依赖

00:21:53.946 --> 00:21:56.726 A:middle
正如我之前演示时所说 

00:21:56.726 --> 00:21:59.496 A:middle
SwiftPM 也支持测试

