WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.556 --> 00:31:00.406 A:middle
前瞻想法

00:31:00.906 --> 00:31:04.026 A:middle
Git 自身支持

00:31:04.026 --> 00:31:05.226 A:middle
它的条款也支持

00:31:05.546 --> 00:31:07.116 A:middle
提供如 TLS 的安全机制

00:31:07.116 --> 00:31:08.786 A:middle
以确保

00:31:08.786 --> 00:31:10.056 A:middle
你在和你认为的

00:31:10.056 --> 00:31:11.826 A:middle
远程储存库接触

00:31:12.356 --> 00:31:14.036 A:middle
但是恶意伪装

00:31:14.036 --> 00:31:15.496 A:middle
可以危害到

00:31:15.496 --> 00:31:17.296 A:middle
远程储存库

00:31:17.326 --> 00:31:18.876 A:middle
并写入恶意内容

00:31:19.166 --> 00:31:20.186 A:middle
事实上

00:31:20.186 --> 00:31:21.536 A:middle
在任何情况下使用第三方代码

00:31:21.536 --> 00:31:22.996 A:middle
你都应该

00:31:22.996 --> 00:31:24.006 A:middle
提高警惕

00:31:24.376 --> 00:31:25.706 A:middle
但是 Swift 包管理器

00:31:25.856 --> 00:31:27.776 A:middle
提供一个很好的机会

00:31:27.776 --> 00:31:29.686 A:middle
让我们构建一个安全功能

00:31:29.686 --> 00:31:30.996 A:middle
确保你得到的是

00:31:30.996 --> 00:31:33.016 A:middle
你所期待的内容

00:31:35.456 --> 00:31:37.546 A:middle
SwiftPM 还可以让

00:31:37.546 --> 00:31:39.026 A:middle
构建中的

00:31:39.026 --> 00:31:41.206 A:middle
package.swift 清单评估 

00:31:41.206 --> 00:31:42.876 A:middle
无法绕过安全保护并从你的

00:31:42.876 --> 00:31:44.266 A:middle
文件系统写出内容

00:31:44.266 --> 00:31:45.316 A:middle
或者访问网络

00:31:45.756 --> 00:31:47.686 A:middle
今天我们使用的是

00:31:47.686 --> 00:31:49.066 A:middle
macOS 的沙盒技术

00:31:49.066 --> 00:31:49.786 A:middle
它很棒

00:31:50.096 --> 00:31:51.166 A:middle
但我们同时也想

00:31:51.166 --> 00:31:53.126 A:middle
把这种安全性带入别的平台

00:31:55.596 --> 00:31:56.966 A:middle
很多用户希望

00:31:56.966 --> 00:31:58.566 A:middle
将复刻包变得简单

00:31:58.916 --> 00:32:00.346 A:middle
也许是因为他们想

