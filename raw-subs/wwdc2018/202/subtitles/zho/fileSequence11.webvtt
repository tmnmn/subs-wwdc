WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.966 --> 00:11:00.416 A:middle
让 CPU 性能在此期间匹配

00:11:00.416 --> 00:11:01.546 A:middle
你的 App 的需求

00:11:01.616 --> 00:11:03.396 A:middle
但是你最应该做的

00:11:03.396 --> 00:11:04.996 A:middle
就是保持

00:11:04.996 --> 00:11:06.016 A:middle
减少所需的工作量

00:11:06.016 --> 00:11:09.076 A:middle
以确保给你的客户带来

00:11:09.146 --> 00:11:10.336 A:middle
流畅的滚动体验

00:11:11.676 --> 00:11:13.416 A:middle
这就是 iOS 12 里的滚动部分

00:11:14.396 --> 00:11:16.056 A:middle
接下来让我们关注

00:11:16.096 --> 00:11:18.416 A:middle
下一个性能话题内存

00:11:19.626 --> 00:11:21.166 A:middle
你也许会想

00:11:21.166 --> 00:11:22.206 A:middle
为什么内存会成为

00:11:22.206 --> 00:11:23.176 A:middle
性能讨论中的话题

00:11:23.226 --> 00:11:25.726 A:middle
但是我保证

00:11:25.726 --> 00:11:26.966 A:middle
这其实很必要

00:11:26.966 --> 00:11:30.816 A:middle
实际上是因为内存

00:11:30.816 --> 00:11:32.026 A:middle
就相当于性能

00:11:32.746 --> 00:11:34.106 A:middle
你的 App 使用的

00:11:34.196 --> 00:11:36.066 A:middle
内存越多

00:11:36.066 --> 00:11:38.896 A:middle
对 App 性能的影响越大

00:11:39.626 --> 00:11:41.756 A:middle
要理解这一点

00:11:41.756 --> 00:11:43.756 A:middle
让我们在较高层面

00:11:43.756 --> 00:11:45.326 A:middle
来看一下

00:11:45.326 --> 00:11:46.996 A:middle
通常情况下

00:11:46.996 --> 00:11:48.296 A:middle
系统内存是什么样的

00:11:49.136 --> 00:11:50.576 A:middle
你可以看到

00:11:50.576 --> 00:11:52.186 A:middle
系统的内存

00:11:52.186 --> 00:11:54.536 A:middle
很大部分被其他 App

00:11:54.536 --> 00:11:55.666 A:middle
和系统本身占用

00:11:56.276 --> 00:11:57.706 A:middle
你的 App 现在

00:11:57.736 --> 00:11:58.246 A:middle
占用了一部分

00:11:58.676 --> 00:11:59.906 A:middle
还有一部分

00:11:59.906 --> 00:12:02.136 A:middle
空闲出来

