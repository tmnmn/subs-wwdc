WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.256 --> 00:07:00.286 A:middle
看一下这个记录

00:07:00.286 --> 00:07:01.066 A:middle
就会发现问题所在

00:07:01.866 --> 00:07:05.536 A:middle
这个 Cell 预读取 API 和请求

00:07:05.536 --> 00:07:06.826 A:middle
当前 Cell 的指令

00:07:06.826 --> 00:07:07.496 A:middle
同时被调用

00:07:08.056 --> 00:07:09.326 A:middle
调用的数据

00:07:09.326 --> 00:07:10.626 A:middle
不是为了现有 Cell 的

00:07:10.626 --> 00:07:12.976 A:middle
而是为了之后可能需要的 Cell

00:07:12.976 --> 00:07:14.706 A:middle
但是它们

00:07:14.736 --> 00:07:15.606 A:middle
被同时运行

00:07:15.976 --> 00:07:19.616 A:middle
所以现在 CPU 出现了冲突

00:07:19.616 --> 00:07:21.766 A:middle
是加载当前帧

00:07:21.766 --> 00:07:23.146 A:middle
还是加载现在并不需要

00:07:23.146 --> 00:07:24.276 A:middle
但以后需要的帧

00:07:25.736 --> 00:07:27.006 A:middle
因为这个冲突

00:07:27.006 --> 00:07:29.996 A:middle
两个任务都会花费更多时间

00:07:30.666 --> 00:07:33.126 A:middle
在 iOS 12 里

00:07:33.126 --> 00:07:35.226 A:middle
我们在安排

00:07:35.956 --> 00:07:37.166 A:middle
这些后台预读取操作时

00:07:37.166 --> 00:07:39.046 A:middle
更加智能

00:07:39.096 --> 00:07:40.226 A:middle
这两个步骤会接连发生

00:07:40.286 --> 00:07:42.056 A:middle
而不是同时发生

00:07:42.386 --> 00:07:43.776 A:middle
并产生冲突

00:07:44.136 --> 00:07:45.176 A:middle
这可以缩短

00:07:45.176 --> 00:07:47.626 A:middle
加载当前帧的时间

00:07:47.626 --> 00:07:50.886 A:middle
并且防止丢帧的出现

00:07:52.516 --> 00:07:56.456 A:middle
[ 掌声 ]

00:07:56.956 --> 00:07:58.016 A:middle
这个问题解决之后

00:07:58.016 --> 00:08:00.086 A:middle
我们继续测试 App

