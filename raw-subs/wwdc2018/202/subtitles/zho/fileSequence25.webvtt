WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.176 --> 00:25:00.286 A:middle
我还想要聊一聊

00:25:00.286 --> 00:25:01.236 A:middle
另外一大类函数

00:25:01.236 --> 00:25:02.446 A:middle
就是所有的

00:25:02.446 --> 00:25:03.956 A:middle
String Conversion 函数

00:25:03.956 --> 00:25:05.306 A:middle
UIKit 里面的所有类型

00:25:05.776 --> 00:25:07.206 A:middle
CGPoint CGRect CGSize CGVector

00:25:07.346 --> 00:25:09.706 A:middle
所有的这些

00:25:09.706 --> 00:25:11.726 A:middle
有很多 既可以是转换到字符串

00:25:11.726 --> 00:25:12.106 A:middle
也可以反过来

00:25:12.516 --> 00:25:14.676 A:middle
当我们想决定

00:25:14.676 --> 00:25:15.386 A:middle
它们应该放在哪里时

00:25:15.386 --> 00:25:16.836 A:middle
就会发现

00:25:16.836 --> 00:25:19.086 A:middle
它们其实有两种用途

00:25:19.386 --> 00:25:21.216 A:middle
一个是编码和解码

00:25:21.676 --> 00:25:24.276 A:middle
另一个是它们总用来 print

00:25:24.466 --> 00:25:25.296 A:middle
当你想得到

00:25:25.296 --> 00:25:26.276 A:middle
debug 描述时

00:25:26.826 --> 00:25:28.586 A:middle
这两个用途很不一样

00:25:28.586 --> 00:25:30.886 A:middle
但其实 Swift 对 

00:25:30.946 --> 00:25:33.166 A:middle
这两种用途 都有一级支持

00:25:33.626 --> 00:25:34.846 A:middle
我们现在可以确保

00:25:34.846 --> 00:25:36.166 A:middle
所有的类型

00:25:36.166 --> 00:25:37.436 A:middle
和 Swift 的内置支持

00:25:37.436 --> 00:25:38.156 A:middle
都可以和谐共处

00:25:38.776 --> 00:25:40.706 A:middle
在 Swift 4.2 里

00:25:40.786 --> 00:25:42.436 A:middle
所有的类型都变得可编码

00:25:42.706 --> 00:25:44.526 A:middle
这样你可以很容易的

00:25:44.526 --> 00:25:46.146 A:middle
给这些类型

00:25:46.146 --> 00:25:47.896 A:middle
编码和解码 JSON 

00:25:48.516 --> 00:25:53.656 A:middle
[ 掌声 ]

00:25:54.156 --> 00:25:55.236 A:middle
在 Swift 里 debug printing

00:25:55.306 --> 00:25:56.766 A:middle
其实比在

00:25:56.766 --> 00:25:58.296 A:middle
Objective-C 更容易

00:25:58.296 --> 00:26:00.106 A:middle
因为你不需要

