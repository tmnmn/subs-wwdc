WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.686 --> 00:18:00.726 A:middle
不同的 App

00:18:00.726 --> 00:18:02.496 A:middle
可能遇到的

00:18:02.566 --> 00:18:03.546 A:middle
比较普遍的陷阱

00:18:04.026 --> 00:18:05.086 A:middle
所以我们会

00:18:05.156 --> 00:18:06.406 A:middle
向你们展示一些简单的方法

00:18:06.406 --> 00:18:08.376 A:middle
让你们可以

00:18:08.376 --> 00:18:09.486 A:middle
优化你们的 App

00:18:10.796 --> 00:18:11.766 A:middle
今天 让我们先了解一下

00:18:11.816 --> 00:18:13.466 A:middle
自动布局在 iOS 12 中     

00:18:13.466 --> 00:18:16.306 A:middle
怎样能做到更快 

00:18:16.386 --> 00:18:17.976 A:middle
我们首先要知道

00:18:18.016 --> 00:18:20.996 A:middle
当我们在普遍用户场景中

00:18:20.996 --> 00:18:23.336 A:middle
添加更多视图时

00:18:23.446 --> 00:18:24.296 A:middle
自动布局的渐近行为

00:18:25.646 --> 00:18:26.346 A:middle
这样做的原因是

00:18:26.346 --> 00:18:28.196 A:middle
讨论渐近性

00:18:28.196 --> 00:18:29.476 A:middle
是想了解

00:18:29.476 --> 00:18:31.056 A:middle
如果我们大量增加视图

00:18:31.056 --> 00:18:31.956 A:middle
会发生什么

00:18:32.366 --> 00:18:33.776 A:middle
如果我们一下增加

00:18:33.776 --> 00:18:35.486 A:middle
非常多的视图

00:18:35.486 --> 00:18:37.216 A:middle
可以很快地让

00:18:37.216 --> 00:18:38.356 A:middle
性能问题显现

00:18:38.866 --> 00:18:40.186 A:middle
这样可以帮助我们看清楚

00:18:40.406 --> 00:18:41.776 A:middle
这次优化

00:18:41.776 --> 00:18:43.316 A:middle
即使对少量视窗

00:18:43.316 --> 00:18:44.906 A:middle
也有提速作用

00:18:45.366 --> 00:18:46.506 A:middle
让我们从普通模式开始

00:18:46.506 --> 00:18:48.366 A:middle
最简单的

00:18:48.366 --> 00:18:50.246 A:middle
一个容器里的

00:18:50.246 --> 00:18:52.576 A:middle
Independent Sibling Views

00:18:53.006 --> 00:18:54.156 A:middle
这些视图的位置

00:18:54.156 --> 00:18:55.386 A:middle
受到容器

00:18:55.386 --> 00:18:57.596 A:middle
或者其他视图的约束

00:18:57.596 --> 00:18:58.536 A:middle
但彼此之间并没有约束

00:18:58.666 --> 00:18:59.876 A:middle
它们相互独立

