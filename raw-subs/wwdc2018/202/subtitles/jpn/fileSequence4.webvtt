WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.238 --> 00:04:00.841 align:start position:34% line:-2
この作業も長時間に
わたります

00:04:00.941 --> 00:04:04.178 align:start position:32% line:-2
テキスト描画のような
作業だからです

00:04:05.846 --> 00:04:10.551 align:start position:29% line:-2
このコードにより
多くの処理を実行しますが

00:04:11.018 --> 00:04:13.921 align:start position:29% line:-1
作業時間の短縮も必要です

00:04:14.087 --> 00:04:18.392 align:start position:30% line:-2
我々の60ヘルツの
デバイスだと16ミリ秒

00:04:18.492 --> 00:04:22.496 align:start position:30% line:-2
フレームは欠けず
スクロールも滑らかです

00:04:23.030 --> 00:04:26.400 align:start position:30% line:-2
120ヘルツの
iPad Proでは―

00:04:26.767 --> 00:04:30.003 align:start position:34% line:-2
作業完了まで
わずか８ミリ秒です

00:04:30.103 --> 00:04:33.307 align:start position:36% line:-2
迅速な処理が
求められるのです

00:04:34.241 --> 00:04:39.313 align:start position:9% line:-2
助けになるのがiOS 10の
Cell Pre-Fetching APIです

00:04:39.513 --> 00:04:43.083 align:start position:34% line:-2
そのアイデアは
この作業のためです

00:04:43.383 --> 00:04:45.385 align:start position:27% line:-1
セルにモデルデータを入力し

00:04:45.486 --> 00:04:50.424 align:start position:29% line:-2
不可欠な部分を
需要に応じて取り出します

00:04:50.691 --> 00:04:53.393 align:start position:29% line:-2
早い段階の
バックグラウンド処理なら

00:04:53.493 --> 00:04:56.296 align:start position:29% line:-1
他の作業とは重なりません

00:04:56.396 --> 00:04:59.500 align:start position:32% line:-2
特に低負荷な
スクロールフレームの

