WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.598 --> 00:25:00.901 align:start position:36% line:-2
さらに重要な
関数を紹介します

00:25:01.001 --> 00:25:05.606 align:start position:30% line:-2
UIKitの多くの型が
文字列変換関数でした

00:25:05.706 --> 00:25:09.376 align:start position:12% line:-2
CGPoint CGRect CGSize
CGVectorなどが―

00:25:09.476 --> 00:25:12.379 align:start position:30% line:-2
toとfromの文字列
だったのです

00:25:12.479 --> 00:25:15.916 align:start position:27% line:-1
これらの行き先を判断する時

00:25:16.183 --> 00:25:19.253 align:start position:29% line:-1
異なる役割に気づきました

00:25:19.353 --> 00:25:21.555 align:start position:34% line:-2
１つはエンコードと
デコード

00:25:21.655 --> 00:25:26.627 align:start position:23% line:-2
他方はデバッグの記述より
見つけたprintコードでした

00:25:26.860 --> 00:25:29.263 align:start position:32% line:-1
役割は全く違いますが

00:25:29.496 --> 00:25:33.433 align:start position:27% line:-2
Swiftは
どちらのサポートも可能です

00:25:33.600 --> 00:25:38.505 align:start position:27% line:-2
Swiftのおかげで
すべての型が機能しています

00:25:38.739 --> 00:25:42.576 align:start position:30% line:-2
さらにすべてが
コードに準拠しています

00:25:42.676 --> 00:25:48.448 align:start position:29% line:-2
異なる型のエンコードや
デコードが簡単にできます

00:25:48.649 --> 00:25:53.587 align:start position:43% line:-1
（拍手）

00:25:54.121 --> 00:25:57.891 align:start position:21% line:-2
Swiftのデバッグプリントは
Objective-Cより簡単で

00:25:57.991 --> 00:26:01.061 align:start position:27% line:-1
変換を行う必要がありません

