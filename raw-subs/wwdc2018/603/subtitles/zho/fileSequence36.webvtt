WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.786 --> 00:36:01.156 A:middle
动画不会被修改

00:36:01.406 --> 00:36:02.496 A:middle
只是纹理

00:36:02.496 --> 00:36:02.976 A:middle
会被下采样

00:36:06.276 --> 00:36:07.576 A:middle
你可能在想

00:36:07.576 --> 00:36:09.986 A:middle
好吧 我的模型可以有多大

00:36:09.986 --> 00:36:12.286 A:middle
我的纹理可以有多大或多复杂

00:36:12.286 --> 00:36:15.626 A:middle
答案是没有 一个答案

00:36:16.376 --> 00:36:17.986 A:middle
影响模型内存使用情况的

00:36:17.986 --> 00:36:19.786 A:middle
因素有很多 网格模型和

00:36:19.786 --> 00:36:21.436 A:middle
动画的复杂性

00:36:21.436 --> 00:36:22.576 A:middle
以及纹理大小和数量

00:36:23.816 --> 00:36:26.536 A:middle
但作为参考 对于一个具有单个 PBR 纹理

00:36:26.536 --> 00:36:28.716 A:middle
并使用我们看到的那六种纹理

00:36:28.716 --> 00:36:30.126 A:middle
的模型来说

00:36:30.126 --> 00:36:32.116 A:middle
如果你的目标是

00:36:32.336 --> 00:36:35.606 A:middle
100k 个多边形 一套 2k 乘以

00:36:35.606 --> 00:36:38.136 A:middle
2k 的 PBR 纹理

00:36:38.136 --> 00:36:39.956 A:middle
和约 10 秒钟的动画

00:36:39.956 --> 00:36:40.916 A:middle
这对那些

00:36:40.916 --> 00:36:42.576 A:middle
我们提到的高内存设备是可以的

00:36:43.156 --> 00:36:45.976 A:middle
如果有疑问 多在设备上

00:36:45.976 --> 00:36:47.786 A:middle
测试你的模型 以确保

00:36:47.786 --> 00:36:52.116 A:middle
它渲染并加载正确

00:36:52.236 --> 00:36:53.736 A:middle
当你为 AR Quick Look

00:36:53.796 --> 00:36:55.336 A:middle
优化你的模型时

00:36:55.336 --> 00:36:56.906 A:middle
有一些事情需要注意

00:36:57.636 --> 00:37:00.656 A:middle
确保冻结模型中的任何变换

