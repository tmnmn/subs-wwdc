WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.266 --> 00:22:00.936 A:middle
This eGPU will be our primary

00:22:00.936 --> 00:22:04.396 A:middle
GPU driving the headset, so we

00:22:04.396 --> 00:22:06.576 A:middle
can use GPU that is already in

00:22:06.576 --> 00:22:08.676 A:middle
our Mac as secondary supporting

00:22:08.676 --> 00:22:09.136 A:middle
GPU.

00:22:10.496 --> 00:22:12.766 A:middle
And we will use shared event to

00:22:12.766 --> 00:22:16.896 A:middle
synchronize workloads of both

00:22:18.486 --> 00:22:18.716 A:middle
GPUs.

00:22:19.206 --> 00:22:21.816 A:middle
Event initial value is zero, so

00:22:21.816 --> 00:22:22.996 A:middle
it's important to start

00:22:22.996 --> 00:22:25.526 A:middle
synchronization counter from 1.

00:22:26.176 --> 00:22:27.516 A:middle
That's because when we would

00:22:27.516 --> 00:22:30.096 A:middle
wait on just initialized event,

00:22:30.276 --> 00:22:32.476 A:middle
its counter of zero will cause

00:22:32.476 --> 00:22:34.696 A:middle
it to return immediately, so

00:22:34.696 --> 00:22:35.126 A:middle
there would be no

00:22:35.126 --> 00:22:35.976 A:middle
synchronization.

00:22:37.786 --> 00:22:39.276 A:middle
So our rendering thread now

00:22:39.276 --> 00:22:41.826 A:middle
starts encoding work for our

00:22:41.826 --> 00:22:43.836 A:middle
supporting GPU immediately.

00:22:44.536 --> 00:22:46.426 A:middle
It will encode pause-independent

00:22:46.426 --> 00:22:48.796 A:middle
work that will happen on our

00:22:48.796 --> 00:22:50.996 A:middle
supporting GPU course, and once

00:22:51.026 --> 00:22:53.426 A:middle
this work is complete, its

00:22:53.426 --> 00:22:55.496 A:middle
results will be stored in locker

00:22:55.646 --> 00:22:56.156 A:middle
memory.

00:22:56.796 --> 00:22:59.146 A:middle
That's why we follow with

00:22:59.146 --> 00:23:01.396 A:middle
encoding brief operation that

