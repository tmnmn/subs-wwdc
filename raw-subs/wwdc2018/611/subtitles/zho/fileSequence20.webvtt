WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.336 --> 00:20:00.576 A:middle
任何空闲时间

00:20:00.636 --> 00:20:01.846 A:middle
只要上一帧完成之后

00:20:01.846 --> 00:20:04.086 A:middle
图形处理器就会立即开始

00:20:04.626 --> 00:20:06.766 A:middle
下一帧处理

00:20:06.896 --> 00:20:09.376 A:middle
最后一个小节就是

00:20:09.376 --> 00:20:11.306 A:middle
多图形处理器工作负荷的分配

00:20:13.226 --> 00:20:15.666 A:middle
我们可以在多个图形处理器之间

00:20:15.666 --> 00:20:16.386 A:middle
分配工作负荷

00:20:16.386 --> 00:20:19.226 A:middle
当前的 Mac Book Pro 目前共有两个图形处理器

00:20:19.306 --> 00:20:21.166 A:middle
虽然它们具有

00:20:21.166 --> 00:20:22.056 A:middle
不同的性能特点

00:20:22.116 --> 00:20:23.616 A:middle
但是我们可以

00:20:23.616 --> 00:20:25.366 A:middle
畅通无阻地使用它们

00:20:26.036 --> 00:20:27.926 A:middle
类似地 如果每个图形处理器相互连接起来

00:20:27.986 --> 00:20:29.906 A:middle
那么 App 就能用它

00:20:29.906 --> 00:20:31.756 A:middle
对头戴式设备进行渲染

00:20:32.096 --> 00:20:34.866 A:middle
并同时使用 Mac 的主图形处理器

00:20:34.896 --> 00:20:35.936 A:middle
对一些工作进行分流

00:20:39.066 --> 00:20:40.516 A:middle
所以我们将

00:20:40.666 --> 00:20:43.286 A:middle
停顿依赖性工作分离出来

00:20:43.566 --> 00:20:45.256 A:middle
并将它移动至次图形处理器上

00:20:45.796 --> 00:20:48.436 A:middle
我们这样做是因为这些工作

00:20:48.436 --> 00:20:52.046 A:middle
在很久之前的帧中就已经

00:20:52.046 --> 00:20:53.576 A:middle
完成编码 而且现在

00:20:53.666 --> 00:20:55.866 A:middle
停顿依赖性工作负荷

00:20:55.866 --> 00:20:57.516 A:middle
在执行上一帧

00:20:57.616 --> 00:20:59.746 A:middle
停顿依赖性工作负荷的同时 被执行

