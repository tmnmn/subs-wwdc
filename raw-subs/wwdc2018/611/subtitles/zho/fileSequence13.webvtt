WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.866 --> 00:13:03.256 A:middle
从而接收停顿

00:13:03.256 --> 00:13:05.866 A:middle
并将其执行情况同步到

00:13:05.866 --> 00:13:07.256 A:middle
头戴式设备的帧率之中

00:13:09.026 --> 00:13:11.506 A:middle
Vive 和 Vive Pro 都拥有

00:13:11.506 --> 00:13:13.286 A:middle
每秒 90 帧的刷新率

00:13:13.286 --> 00:13:14.936 A:middle
这就意味着

00:13:14.986 --> 00:13:17.096 A:middle
App 只需要 11.1

00:13:17.096 --> 00:13:19.316 A:middle
毫秒就能处理一帧

00:13:20.086 --> 00:13:22.496 A:middle
对比之下 眨一下眼

00:13:22.746 --> 00:13:24.756 A:middle
大约需要 300 毫秒

00:13:25.536 --> 00:13:27.286 A:middle
那么在这一时间里

00:13:27.286 --> 00:13:28.666 A:middle
App 就能渲染 50 帧画面

00:13:30.326 --> 00:13:32.436 A:middle
所以一旦 App 收到了

00:13:32.616 --> 00:13:34.736 A:middle
来自 WaitGet 停顿的停顿

00:13:34.806 --> 00:13:37.636 A:middle
它就能开始模拟你的试验

00:13:38.816 --> 00:13:39.886 A:middle
一旦完成模拟

00:13:39.956 --> 00:13:41.676 A:middle
也就知道了

00:13:41.676 --> 00:13:43.756 A:middle
所有对象的状态

00:13:43.756 --> 00:13:46.076 A:middle
App 就能继续对

00:13:46.206 --> 00:13:48.286 A:middle
命令缓冲区进行编码

00:13:48.286 --> 00:13:50.386 A:middle
然后将其发送至图形处理器 以实现执行目的

00:13:51.886 --> 00:13:54.786 A:middle
一旦图形处理器完成操作

00:13:54.786 --> 00:13:57.416 A:middle
针对双眼的图像 也就渲染完成了

00:13:57.416 --> 00:13:59.906 A:middle
它可以被发送至 VR 生成器

00:13:59.906 --> 00:14:01.426 A:middle
进行我们在前几张幻灯片中所讲的

