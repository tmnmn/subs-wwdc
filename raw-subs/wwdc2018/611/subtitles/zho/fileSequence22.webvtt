WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.266 --> 00:22:00.936 A:middle
这一外置图形处理器将成为我们的

00:22:00.936 --> 00:22:04.396 A:middle
主图形处理器 用于驱动头戴式设备

00:22:04.396 --> 00:22:06.576 A:middle
这样我们就能使用 Mac 中

00:22:06.576 --> 00:22:08.676 A:middle
已有的图形处理器作为辅助的

00:22:08.676 --> 00:22:09.136 A:middle
次图形处理器

00:22:10.496 --> 00:22:12.766 A:middle
然后我们会使用共享事件来

00:22:12.766 --> 00:22:16.896 A:middle
同步两个图形处理器中的

00:22:18.486 --> 00:22:18.716 A:middle
工作负荷

00:22:19.206 --> 00:22:21.816 A:middle
事件的初始值为 0

00:22:21.816 --> 00:22:22.996 A:middle
因此有必要

00:22:22.996 --> 00:22:25.526 A:middle
从 1 开始启动同步计数器

00:22:26.176 --> 00:22:27.516 A:middle
这是因为当我们

00:22:27.516 --> 00:22:30.096 A:middle
在初始化事件中等待之时

00:22:30.276 --> 00:22:32.476 A:middle
如果事件的计数器显示为 0

00:22:32.476 --> 00:22:34.696 A:middle
事件就会立刻恢复原状

00:22:34.696 --> 00:22:35.976 A:middle
所以就无法实现同步

00:22:37.786 --> 00:22:39.276 A:middle
那么我们的渲染线程现在

00:22:39.276 --> 00:22:41.826 A:middle
立即开始了针对辅助图形处理器

00:22:41.826 --> 00:22:43.836 A:middle
的编码工作

00:22:44.536 --> 00:22:46.426 A:middle
它会对停顿依赖性工作

00:22:46.426 --> 00:22:48.796 A:middle
进行编码 这会发生在我们的

00:22:48.796 --> 00:22:50.996 A:middle
次图形处理器上

00:22:51.026 --> 00:22:53.426 A:middle
一旦这一工作完成

00:22:53.426 --> 00:22:55.496 A:middle
结果将会存储在

00:22:55.646 --> 00:22:56.156 A:middle
锁定存储器之中

00:22:56.796 --> 00:22:59.146 A:middle
这就是为什么我们采用

00:22:59.146 --> 00:23:01.396 A:middle
编码简单操作

