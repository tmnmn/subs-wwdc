WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.266 --> 00:11:02.476 A:middle
现在我们再回过来看我们的管线

00:11:02.716 --> 00:11:05.576 A:middle
看看会发生什么变化

00:11:05.606 --> 00:11:07.806 A:middle
现在 App 可以

00:11:07.806 --> 00:11:10.466 A:middle
用一个 2D 阵列纹理

00:11:10.466 --> 00:11:13.096 A:middle
替换那些分离的 IOSurface

00:11:13.096 --> 00:11:14.256 A:middle
将针对双眼的图像存储起来

00:11:15.346 --> 00:11:17.406 A:middle
这能够促成进一步的优化

00:11:18.026 --> 00:11:20.166 A:middle
因为原始的 2D 多样本

00:11:20.166 --> 00:11:21.876 A:middle
阵列纹理现在也可以

00:11:21.876 --> 00:11:24.236 A:middle
在一个通道中加以解决

00:11:24.606 --> 00:11:25.906 A:middle
只需通过阵列纹理

00:11:25.906 --> 00:11:26.736 A:middle
将其创建成可共享的类型即可

00:11:27.706 --> 00:11:28.716 A:middle
而且不止如此

00:11:29.486 --> 00:11:30.786 A:middle
让我们来看一下生成器

00:11:32.286 --> 00:11:33.196 A:middle
一旦我们在 App 上

00:11:33.196 --> 00:11:35.006 A:middle
完成了渲染部件的简化

00:11:35.006 --> 00:11:36.596 A:middle
就没有什么

00:11:36.716 --> 00:11:38.176 A:middle
可以阻止生成器

00:11:38.406 --> 00:11:40.596 A:middle
从这些新特性中获益

00:11:41.246 --> 00:11:45.056 A:middle
所以生成器现在可以使用

00:11:45.126 --> 00:11:47.826 A:middle
这些即将发布的 2D 阵列纹理

00:11:47.826 --> 00:11:50.086 A:middle
并能在单一渲染通道中

00:11:50.086 --> 00:11:51.576 A:middle
针对双眼执行操作

00:11:51.736 --> 00:11:54.836 A:middle
正如你所见 我们刚刚完成了

00:11:54.836 --> 00:11:56.396 A:middle
整条管线的简化

00:11:57.816 --> 00:11:59.246 A:middle
那么让我们来总结一下

00:11:59.246 --> 00:11:59.766 A:middle
我们刚刚了解到的内容

