WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:00.656 --> 00:18:01.986 A:middle
想象一下一个长方形   

00:18:01.986 --> 00:18:03.546 A:middle
包含这个布局将要

00:18:03.546 --> 00:18:04.646 A:middle
为你的 CollectionView 定义

00:18:04.646 --> 00:18:06.196 A:middle
所有内容  

00:18:06.626 --> 00:18:09.406 A:middle
我们想要这样的大小

00:18:09.406 --> 00:18:11.596 A:middle
好的 这就是 CollectionView     

00:18:11.596 --> 00:18:12.436 A:middle
的内容大小       

00:18:13.556 --> 00:18:15.326 A:middle
接下来我们有两种  

00:18:15.326 --> 00:18:18.246 A:middle
提供布局属性的方法  

00:18:19.376 --> 00:18:20.516 A:middle
第一种是  

00:18:20.516 --> 00:18:21.826 A:middle
LayoutAttributesForElements（在   

00:18:21.826 --> 00:18:22.116 A:middle
矩形中）                    

00:18:23.186 --> 00:18:24.606 A:middle
现在这个被 CollectionView 定期调用 

00:18:24.606 --> 00:18:25.996 A:middle
当用户第一次滚动浏览

00:18:25.996 --> 00:18:26.856 A:middle
你的内容或者展示时

00:18:26.856 --> 00:18:30.916 A:middle
它需要知道在屏幕上展示 什么

00:18:31.906 --> 00:18:33.966 A:middle
所以这个查询是由一个几何区域构成的 

00:18:35.686 --> 00:18:38.166 A:middle
好的 这是 API   

00:18:38.276 --> 00:18:39.596 A:middle
LayoutAttributesForItem    

00:18:39.596 --> 00:18:42.046 A:middle
AtIndexPath 你可以想象 

00:18:42.046 --> 00:18:43.366 A:middle
它只是在寻找一个单独的项目  

00:18:43.496 --> 00:18:44.876 A:middle
给我这个属性   

00:18:45.876 --> 00:18:47.416 A:middle
好的 当 Mohammed 带着我们浏览的时候

00:18:47.416 --> 00:18:48.446 A:middle
我们会看到更多东西

00:18:48.446 --> 00:18:50.116 A:middle
但是对于这两个 API 来说

00:18:50.116 --> 00:18:52.936 A:middle
需要注意的是 性能最重要

00:18:57.136 --> 00:18:58.956 A:middle
好的 所以我们四个

00:18:59.136 --> 00:19:01.906 A:middle
核心自定义布局子集中的第四个

