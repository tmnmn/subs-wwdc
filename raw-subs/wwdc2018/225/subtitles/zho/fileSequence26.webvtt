WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.616 --> 00:26:01.376 A:middle
所以这里的这个函数

00:26:01.376 --> 00:26:03.656 A:middle
正在过滤我们的整个数组

00:26:03.656 --> 00:26:05.036 A:middle
你可能会想

00:26:05.036 --> 00:26:06.666 A:middle
当我们的 CollectionView 的项目数增加  

00:26:06.666 --> 00:26:08.096 A:middle
会变得非常高耗  

00:26:08.416 --> 00:26:09.476 A:middle
所以在我们的 App 中

00:26:09.476 --> 00:26:11.106 A:middle
我们的照片越多  

00:26:11.106 --> 00:26:13.096 A:middle
我们的滚动进程将会越慢  

00:26:14.296 --> 00:26:15.506 A:middle
所以如果你发现你自己遇到

00:26:15.506 --> 00:26:17.146 A:middle
这种情况 它帮助你

00:26:17.146 --> 00:26:18.766 A:middle
后退 想想你

00:26:18.766 --> 00:26:20.776 A:middle
布局的属性 想想

00:26:20.776 --> 00:26:21.976 A:middle
你是否可以找到任何

00:26:21.976 --> 00:26:23.466 A:middle
优化机会    

00:26:24.296 --> 00:26:28.476 A:middle
所以我们的布局要求

00:26:28.476 --> 00:26:31.226 A:middle
每个单元 App 紧邻或者   

00:26:31.226 --> 00:26:32.856 A:middle
低于它的前一个单元格

00:26:33.536 --> 00:26:34.976 A:middle
所以这意味着我们的    

00:26:34.976 --> 00:26:37.926 A:middle
属性已经按照   

00:26:37.926 --> 00:26:39.126 A:middle
它们框架的最小 y 值   

00:26:39.126 --> 00:26:41.736 A:middle
在缓存的属性数组中排序了   

00:26:43.456 --> 00:26:45.736 A:middle
所以我们有一个排序数组 所以我们 

00:26:45.736 --> 00:26:48.006 A:middle
可以通过做一些

00:26:48.006 --> 00:26:49.206 A:middle
二进制的搜索来加速搜索

00:26:49.206 --> 00:26:51.826 A:middle
而不是像现在我们正在做的

00:26:51.826 --> 00:26:52.506 A:middle
线型过滤器

00:26:53.386 --> 00:26:57.786 A:middle
所以让我们删除我们的

00:26:57.786 --> 00:27:00.216 A:middle
慢执行 让我们

