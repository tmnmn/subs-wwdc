WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.831 --> 00:20:01.268 align:middle line:-2
在数据集中
除以批大小32或64

00:20:02.236 --> 00:20:04.805 align:middle line:-1
现在我们来看每次训练迭代

00:20:07.107 --> 00:20:08.609 align:middle line:-1
每次训练迭代中

00:20:09.910 --> 00:20:11.912 align:middle line:-1
我们对一批图像编码用于训练

00:20:13.146 --> 00:20:16.450 align:middle line:-1
但我们不想让CPU等GPU

00:20:16.517 --> 00:20:20.020 align:middle line:-1
跑完一次训练图

00:20:20.087 --> 00:20:21.421 align:middle line:-1
处理一批图像

00:20:21.755 --> 00:20:25.526 align:middle line:-2
然后CPU才开始编码
commandBuffer

00:20:25.592 --> 00:20:26.827 align:middle line:-1
给下一次图形运行

00:20:27.494 --> 00:20:29.830 align:middle line:-1
我们希望CPU和GPU

00:20:29.897 --> 00:20:31.031 align:middle line:-1
同时工作

00:20:31.331 --> 00:20:33.500 align:middle line:-1
为此我们要用到双缓冲

00:20:34.434 --> 00:20:37.070 align:middle line:-2
那么设置中
我们要创建

00:20:37.671 --> 00:20:40.474 align:middle line:-2
计数信号量
初始值为2

00:20:40.541 --> 00:20:44.344 align:middle line:-2
这是因为我们只要
2个编码同时运行

00:20:45.679 --> 00:20:48.715 align:middle line:-2
然后在输入
训练迭代函数时

00:20:48.782 --> 00:20:50.717 align:middle line:-1
就会调用信号量权重

00:20:50.784 --> 00:20:51.952 align:middle line:-1
进行自减

00:20:52.920 --> 00:20:56.323 align:middle line:-1
当计数值减到0

00:20:56.390 --> 00:20:58.225 align:middle line:-2
就等待
否则就继续

00:20:59.593 --> 00:21:00.928 align:middle line:-1
之后对图形编码

