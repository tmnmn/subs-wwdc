WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:56.176 --> 00:18:00.280 align:middle line:0
你需要部署一个符合协议规则的类

00:18:00.347 --> 00:18:02.216 align:middle line:0
这里就叫做MyWeights

00:18:04.685 --> 00:18:08.155 align:middle line:-1
数据源提供器在许多方面都很好用

00:18:08.589 --> 00:18:09.623 align:middle line:-1
比如

00:18:09.857 --> 00:18:12.593 align:middle line:-1
如果在网络里你有许多卷积节点

00:18:13.260 --> 00:18:16.396 align:middle line:-1
网络的整体权重会相当可观

00:18:16.964 --> 00:18:20.234 align:middle line:-1
但我们并不想让所有卷积节点的权重

00:18:20.300 --> 00:18:22.035 align:middle line:-1
同时存入内存

00:18:22.769 --> 00:18:25.506 align:middle line:-1
我们希望网络的内存占用

00:18:25.572 --> 00:18:26.673 align:middle line:-1
越低越好

00:18:27.407 --> 00:18:29.576 align:middle line:-1
数据源提供器就派上用场了

00:18:30.010 --> 00:18:32.679 align:middle line:-1
因为它们能及时载入

00:18:32.913 --> 00:18:34.681 align:middle line:-1
和清除权重数据

00:18:35.616 --> 00:18:38.118 align:middle line:-1
所以我们加载权重给一个卷积核

00:18:38.752 --> 00:18:39.987 align:middle line:-1
在处理时

00:18:40.053 --> 00:18:43.524 align:middle line:-2
清除它们后
才继续下一次卷积

00:18:46.260 --> 00:18:48.629 align:middle line:-1
MyWeights这样实施

00:18:49.429 --> 00:18:50.531 align:middle line:0
你要提供

00:18:51.198 --> 00:18:53.867 align:middle line:0
初始化方法

00:18:53.934 --> 00:18:56.103 align:middle line:0
拉入内存并做好准备

00:18:56.170 --> 00:18:58.672 align:middle line:-1
然后训练图会调用load函数

00:18:59.139 --> 00:19:01.408 align:middle line:0
当purge函数被调用时

