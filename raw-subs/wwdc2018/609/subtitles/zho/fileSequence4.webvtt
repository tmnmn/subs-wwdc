WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.439 --> 00:04:00.507 align:middle line:-1
从0到9

00:04:01.608 --> 00:04:04.711 align:middle line:-2
这个例子中
图片被正确地归类为

00:04:04.778 --> 00:04:06.580 align:middle line:-1
数字7的图片

00:04:09.316 --> 00:04:13.120 align:middle line:0
推断时用已训练的参数
初始化网络

00:04:13.954 --> 00:04:16.557 align:middle line:0
已训练的参数添加权重

00:04:16.623 --> 00:04:19.293 align:middle line:0
到卷积和全连接原语

00:04:20.327 --> 00:04:23.730 align:middle line:0
训练算法的目的
是计算已训练的参数

00:04:23.797 --> 00:04:28.535 align:middle line:0
让网络可以用它们让输入数据
在推断时修正输出

00:04:30.370 --> 00:04:33.407 align:middle line:-2
训练进程开始的时候
没有任何权重

00:04:33.473 --> 00:04:34.608 align:middle line:-1
我们需要计算

00:04:35.075 --> 00:04:36.176 align:middle line:-1
所以第一步

00:04:36.543 --> 00:04:39.479 align:middle line:-2
初始化权重
用较小的随机的数字

00:04:40.013 --> 00:04:41.682 align:middle line:-2
现在可以开始
训练网络了

00:04:42.149 --> 00:04:45.319 align:middle line:-2
这里列出了
训练过程中的所有步骤

00:04:48.121 --> 00:04:49.957 align:middle line:-1
训练是一个迭代进程

00:04:50.023 --> 00:04:53.126 align:middle line:-2
每次训练的迭代
分为四步

00:04:53.994 --> 00:04:55.929 align:middle line:-1
第一步是正向传播

00:04:55.996 --> 00:04:59.166 align:middle line:-2
这时候将输入
传递给网络

00:04:59.233 --> 00:05:00.367 align:middle line:-1
产生输出

