WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.506 --> 00:09:00.674 align:middle line:0
用于计算损失

00:09:00.741 --> 00:09:03.277 align:middle line:0
这个例子里
我们有一批标签

00:09:03.343 --> 00:09:06.780 align:middle line:0
正确类的值为1
其他为0

00:09:09.550 --> 00:09:11.285 align:middle line:0
每个训练场景

00:09:11.351 --> 00:09:13.620 align:middle line:0
会使用不同的批图像

00:09:13.687 --> 00:09:16.056 align:middle line:0
和相应的一批标签

00:09:16.123 --> 00:09:18.859 align:middle line:0
现在就来运行
多次训练迭代

00:09:21.495 --> 00:09:23.630 align:middle line:0
对第一批图像

00:09:23.697 --> 00:09:25.032 align:middle line:0
做正向传播

00:09:25.098 --> 00:09:28.101 align:middle line:0
计算损失
然后梯度传播

00:09:28.936 --> 00:09:30.037 align:middle line:0
再更新权重

00:09:30.604 --> 00:09:32.372 align:middle line:0
那么第二批呢？

00:09:32.439 --> 00:09:34.208 align:middle line:0
完全一样的流程

00:09:34.274 --> 00:09:36.510 align:middle line:0
正向传播
然后计算损失

00:09:36.577 --> 00:09:38.679 align:middle line:0
梯度传播
再更新权重

00:09:40.080 --> 00:09:42.182 align:middle line:0
训练迭代过程中

00:09:43.016 --> 00:09:45.319 align:middle line:0
我们希望网络的损失

00:09:45.385 --> 00:09:46.320 align:middle line:0
能降低

00:09:46.653 --> 00:09:49.323 align:middle line:0
网络准确度能提高

00:09:49.590 --> 00:09:52.292 align:middle line:0
所以继续训练
直到损失降到

00:09:52.359 --> 00:09:53.827 align:middle line:0
某个阈值以下

00:09:54.228 --> 00:09:57.598 align:middle line:0
网络的准确度
就达到了理想水平

00:09:58.765 --> 00:10:00.834 align:middle line:0
这时我们就知道网络已训练

