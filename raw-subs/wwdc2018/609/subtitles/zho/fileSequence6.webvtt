WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.092 --> 00:06:00.627 align:middle line:0
网络的表现不是很好

00:06:01.795 --> 00:06:03.764 align:middle line:0
结果明显是错误的

00:06:03.830 --> 00:06:05.098 align:middle line:0
为何这么糟糕？

00:06:05.566 --> 00:06:06.767 align:middle line:0
其实也不意外

00:06:06.834 --> 00:06:09.770 align:middle line:0
因为初始权重
只是随机的数字

00:06:09.837 --> 00:06:12.039 align:middle line:0
网络还没有被训练
所以表现不好

00:06:13.941 --> 00:06:16.476 align:middle line:0
现在要用权重来量化

00:06:16.844 --> 00:06:19.646 align:middle line:0
网络表现的好坏程度

00:06:20.247 --> 00:06:21.849 align:middle line:0
我们可以用这个信息

00:06:22.349 --> 00:06:25.552 align:middle line:0
来提高权重
希望经过多次迭代

00:06:25.619 --> 00:06:28.055 align:middle line:0
能训练网络
输出更准确的结果

00:06:30.257 --> 00:06:32.426 align:middle line:0
为了衡量表现如何

00:06:32.492 --> 00:06:34.127 align:middle line:0
我们需要一个正确答案

00:06:34.795 --> 00:06:37.631 align:middle line:0
就是标准值
之后我会叫它标签

00:06:38.098 --> 00:06:41.502 align:middle line:0
它会与图像
一同输入网络

00:06:42.236 --> 00:06:44.505 align:middle line:0
这个例子中
向量为10个值

00:06:44.571 --> 00:06:46.940 align:middle line:0
正确类的值为1
类7

00:06:47.274 --> 00:06:49.009 align:middle line:0
其他类均为0

00:06:51.645 --> 00:06:54.548 align:middle line:0
网络的输出
就是这十个概率值

00:06:54.882 --> 00:06:55.849 align:middle line:0
每类给一个值

00:06:56.517 --> 00:06:59.052 align:middle line:0
在这个训练场景下

00:06:59.119 --> 00:07:02.923 align:middle line:0
网络输出一个很低的值
给正确答案7

