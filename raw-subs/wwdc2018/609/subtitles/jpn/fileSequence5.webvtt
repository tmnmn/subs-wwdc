WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:55.863 --> 00:05:00.601 align:start position:29% line:-2
入力をネットワークに渡し
出力を作ります

00:05:00.934 --> 00:05:02.836 align:start position:34% line:-1
推論に似ていますね

00:05:04.137 --> 00:05:06.206 align:start position:32% line:-1
次に損失を計算します

00:05:06.473 --> 00:05:11.411 align:start position:34% line:-2
損失とは出力と
正解データの差です

00:05:13.180 --> 00:05:16.717 align:start position:29% line:-2
訓練アルゴリズムの目的は
損失の最小化です

00:05:18.685 --> 00:05:21.054 align:start position:29% line:-1
次のステップは勾配のパス

00:05:21.388 --> 00:05:25.859 align:start position:34% line:-2
出力と正解の差を
ネットワークに戻し

00:05:25.959 --> 00:05:29.229 align:start position:30% line:-1
重みを更新することです

00:05:29.830 --> 00:05:35.135 align:start position:27% line:-2
訓練の継続でネットワークは
より訓練されるのです

00:05:35.235 --> 00:05:39.139 align:start position:34% line:-2
入力のマッピングで
出力を修正でき

00:05:39.673 --> 00:05:41.909 align:start position:29% line:-1
損失の最小化を促進します

00:05:43.177 --> 00:05:47.981 align:start position:21% line:-2
概要は以上です　次は各ステップを
詳細に見ていきます

00:05:50.317 --> 00:05:55.355 align:start position:27% line:-2
フォワードパスは
出力計算のための順伝播です

00:05:56.023 --> 00:06:00.961 align:start position:27% line:-2
訓練当初は ネットワークが
うまく機能しません

