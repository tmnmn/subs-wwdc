WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.016 --> 00:09:00.906 A:middle
所得到的 cgColor 也是静态的

00:09:00.906 --> 00:09:02.816 A:middle
它不会随外观而改变

00:09:03.806 --> 00:09:05.666 A:middle
因为我们在初始化程序段中

00:09:05.666 --> 00:09:08.076 A:middle
已经设置了图层

00:09:08.076 --> 00:09:09.206 A:middle
那么在外观改变时 

00:09:09.206 --> 00:09:11.396 A:middle
我们无法运行任何代码

00:09:11.946 --> 00:09:14.616 A:middle
重点就是

00:09:14.616 --> 00:09:15.686 A:middle
要把你随外观改变的内容

00:09:15.846 --> 00:09:19.086 A:middle
放到特定的区域

00:09:19.666 --> 00:09:21.576 A:middle
具体来说 就是使用 NSView 中的

00:09:21.576 --> 00:09:23.936 A:middle
updateConstraints() layout() draw() 

00:09:23.986 --> 00:09:26.336 A:middle
以及 updateLayer() 方法

00:09:27.616 --> 00:09:29.406 A:middle
这样的话 当外观改变时

00:09:29.486 --> 00:09:30.956 A:middle
如有需要 AppKit 就会自动

00:09:31.196 --> 00:09:32.446 A:middle
调用这些方法

00:09:32.996 --> 00:09:34.246 A:middle
如果你需要手动地

00:09:34.246 --> 00:09:36.586 A:middle
触发它们 你当然可以一直使用

00:09:36.966 --> 00:09:38.296 A:middle
needsUpdateConstraints

00:09:38.596 --> 00:09:39.926 A:middle
needsLayout

00:09:39.926 --> 00:09:42.026 A:middle
和 needsDisplay 这些属性

00:09:42.026 --> 00:09:45.806 A:middle
AppKit 会自动调用它们

00:09:46.146 --> 00:09:47.296 A:middle
好 现在回到我们的例子

00:09:48.616 --> 00:09:50.196 A:middle
与其重写 init

00:09:50.856 --> 00:09:53.666 A:middle
我们可以执行 updateLayer()

00:09:53.666 --> 00:09:56.726 A:middle
接着 就可以放心地通过

00:09:57.056 --> 00:09:59.346 A:middle
向我们的 NSColor 请求一个 cgColor

00:09:59.346 --> 00:10:00.796 A:middle
来填充我们的图层

