WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.025 --> 00:31:01.728 align:start position:30% line:-2
“食事はゆっくり
出してもらえますか？”

00:31:02.196 --> 00:31:04.598 align:start position:32% line:-1
別タスクの実行中に―

00:31:04.698 --> 00:31:09.570 align:start position:29% line:-2
特定のタスクを
優先させる場合も同様です

00:31:10.104 --> 00:31:12.439 align:start position:32% line:-1
実際に見てみましょう

00:31:15.609 --> 00:31:19.413 align:start position:27% line:-2
５つのQoSと
NSOperationが―

00:31:19.513 --> 00:31:23.050 align:start position:34% line:-2
関連しているのは
ご存じだと思います

00:31:23.617 --> 00:31:26.520 align:start position:27% line:-2
スケジューリングポリシーに
沿っています

00:31:27.521 --> 00:31:31.758 align:start position:29% line:-2
URLSessionは
“QoS-aware”で

00:31:31.859 --> 00:31:36.463 align:start position:18% line:-2
task.resumeを呼ぶキューで
QoSをキャプチャします

00:31:37.064 --> 00:31:42.002 align:start position:32% line:-2
送られるメッセージは
QoSを優先します

00:31:43.237 --> 00:31:44.638 align:start position:38% line:-1
例を見ましょう

00:31:45.272 --> 00:31:49.143 align:start position:34% line:-2
緊急でないデータを
取得する場合―

00:31:49.309 --> 00:31:53.947 align:start position:34% line:-2
バックグラウンドの
QoSが働きます

00:31:54.047 --> 00:31:57.351 align:start position:32% line:-2
優先度の高いタスクを
妨げないように―

00:31:57.451 --> 00:32:00.954 align:start position:32% line:-1
処理してくれるのです

