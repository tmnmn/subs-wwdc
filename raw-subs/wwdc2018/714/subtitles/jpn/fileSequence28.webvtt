WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.046 --> 00:28:02.549 align:start position:29% line:-2
また自明でない
メモリフットプリントを―

00:28:02.649 --> 00:28:07.087 align:start position:21% line:-2
URLSessionで作成すると
コストがかかります

00:28:07.988 --> 00:28:11.058 align:start position:23% line:-2
そのためURLSessionの
オブジェクトは―

00:28:11.158 --> 00:28:13.827 align:start position:30% line:-1
少ないほうが良いのです

00:28:15.729 --> 00:28:20.100 align:start position:29% line:-2
次は処理量の向上について
お話しします

00:28:21.668 --> 00:28:23.504 align:start position:38% line:-1
レストランで―

00:28:23.937 --> 00:28:25.739 align:start position:32% line:-1
こう注文したとします

00:28:25.839 --> 00:28:29.276 align:start position:30% line:-2
“グリルチキンと
トマトとタマネギに―”

00:28:29.376 --> 00:28:32.946 align:start position:34% line:-2
“バターたっぷりの
ソースを添えて”

00:28:33.881 --> 00:28:35.516 align:start position:36% line:-1
言いにくいですね

00:28:35.616 --> 00:28:38.886 align:start position:34% line:-2
“バターチキン”と
注文すれば十分です

00:28:39.920 --> 00:28:43.857 align:start position:32% line:-2
リソース取得時の
送信バイトを減らし―

00:28:43.957 --> 00:28:47.194 align:start position:30% line:-2
処理量を
向上させるのも同様です

00:28:47.294 --> 00:28:49.396 align:start position:34% line:-1
実際にお見せします

00:28:51.598 --> 00:28:54.968 align:start position:32% line:-2
リクエストのサイズを
減らす方法です

00:28:56.270 --> 00:28:59.039 align:start position:29% line:-2
HTTP cookieに
注目してください

00:28:59.139 --> 00:29:04.278 align:start position:29% line:-2
cookieは すべての
リクエストにおいて―

