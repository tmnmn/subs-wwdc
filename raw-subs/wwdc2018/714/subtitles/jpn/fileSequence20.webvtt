WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.066 --> 00:20:01.235 align:start position:32% line:-1
HTTP/1.1です

00:20:02.336 --> 00:20:05.606 align:start position:29% line:-2
アプリケーションが
HTTP非対応の場合は―

00:20:05.706 --> 00:20:08.041 align:start position:7% line:-1
URLSessionStreamTaskをどうぞ

00:20:08.308 --> 00:20:13.146 align:start position:32% line:-2
そうすれば
任意のプロトコルで―

00:20:13.247 --> 00:20:16.316 align:start position:27% line:-2
サーバへの
TCP接続が可能になります

00:20:17.484 --> 00:20:19.086 align:start position:34% line:-1
おさらいは以上です

00:20:19.620 --> 00:20:24.358 align:start position:30% line:-2
では 待機時間の削減の
トピックに移りましょう

00:20:25.292 --> 00:20:29.463 align:start position:34% line:-2
あなたは友人と
レストランを訪れ―

00:20:29.563 --> 00:20:32.232 align:start position:29% line:-1
店員に水を頼んだとします

00:20:32.666 --> 00:20:36.670 align:start position:29% line:-2
店員があなたに
水を持ってきたところで―

00:20:36.937 --> 00:20:39.973 align:start position:32% line:-1
友人も水を頼みました

00:20:40.073 --> 00:20:44.444 align:start position:29% line:-2
店員は再び歩きさり
友人に水を持ってきました

00:20:44.545 --> 00:20:47.681 align:start position:36% line:-2
店員が水を一度に
持ってくれば―

00:20:47.781 --> 00:20:49.950 align:start position:29% line:-1
往復時間が省けるはずです

00:20:50.751 --> 00:20:52.953 align:start position:32% line:-1
リソース取得までの―

00:20:53.453 --> 00:20:57.024 align:start position:30% line:-2
往復時間を減らす場合も
考え方は同様です

00:20:57.658 --> 00:20:59.626 align:start position:27% line:-1
アプリケーションの動きは？

