WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.016 --> 00:23:01.116 A:middle
必须等请求 2 的回应

00:23:01.356 --> 00:23:02.286 A:middle
被完全接收

00:23:03.436 --> 00:23:05.666 A:middle
这个问题被称为

00:23:05.666 --> 00:23:06.746 A:middle
HTTP 队头阻塞

00:23:08.096 --> 00:23:10.406 A:middle
现在来考虑 HTTP/2 

00:23:11.676 --> 00:23:14.126 A:middle
HTTP/2 使用单一连接

00:23:14.496 --> 00:23:16.166 A:middle
并且也解决了

00:23:16.166 --> 00:23:17.866 A:middle
HTTP 队头阻塞的问题

00:23:18.396 --> 00:23:21.956 A:middle
HTTP/2 在一条连接上

00:23:21.956 --> 00:23:24.156 A:middle
多路传输多条数据流

00:23:24.696 --> 00:23:29.136 A:middle
让你可以同时收到多个回应

00:23:29.666 --> 00:23:32.456 A:middle
我们再来仔细分析一下这个例子

00:23:32.456 --> 00:23:34.966 A:middle
看看 HTTP/2

00:23:35.026 --> 00:23:37.166 A:middle
是怎样比 HTTP/1.1 表现得更好的

00:23:39.456 --> 00:23:41.406 A:middle
注意以下这些时间节点

00:23:41.406 --> 00:23:42.656 A:middle
当你的 App 试图

00:23:42.656 --> 00:23:44.806 A:middle
获取资源的时候

00:23:44.806 --> 00:23:45.966 A:middle
当请求被发送出去的时候

00:23:47.206 --> 00:23:50.156 A:middle
如果使用 HTTP/1.1

00:23:50.156 --> 00:23:52.306 A:middle
从你的 App

00:23:52.306 --> 00:23:53.676 A:middle
需要资源起

00:23:53.676 --> 00:23:55.126 A:middle
到请求被发送之间

00:23:55.126 --> 00:23:56.106 A:middle
有明显的延迟

00:23:57.336 --> 00:24:00.336 A:middle
HTTP/2 能显著减少

