WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.426 --> 00:27:00.406 A:middle
到这里 我们完全可以

00:27:00.406 --> 00:27:01.486 A:middle
假定与我们对话的是同一个端点

00:27:01.486 --> 00:27:03.796 A:middle
那么当我们需要获取

00:27:03.796 --> 00:27:05.726 A:middle
第二个资源时可以重用连接 

00:27:05.726 --> 00:27:07.346 A:middle
而不是重新建立

00:27:07.346 --> 00:27:08.406 A:middle
一个新的连接 

00:27:09.126 --> 00:27:10.506 A:middle
这么做节省了时间

00:27:10.506 --> 00:27:11.936 A:middle
因为不需要建立一个新的连接

00:27:11.936 --> 00:27:13.316 A:middle
这会让加载速度快很多

00:27:13.896 --> 00:27:16.086 A:middle
这就是 HTTP/2 Connection Coalescing

00:27:16.086 --> 00:27:22.156 A:middle
在 iOS 12 和 macOS Mojave 中的新特性

00:27:23.416 --> 00:27:26.296 A:middle
现在让我们看一下

00:27:26.386 --> 00:27:28.716 A:middle
如何通过减少 URLSession 对象的使用

00:27:28.716 --> 00:27:29.826 A:middle
来减少延迟

00:27:30.356 --> 00:27:34.656 A:middle
在刚才的几页幻灯片中

00:27:34.656 --> 00:27:36.876 A:middle
我们讨论的所有

00:27:36.876 --> 00:27:38.876 A:middle
有关连接的好处

00:27:38.876 --> 00:27:41.306 A:middle
都只在你用同一个

00:27:41.306 --> 00:27:43.546 A:middle
URLSession 对象

00:27:43.546 --> 00:27:44.916 A:middle
创建任务的情况下生效

00:27:47.016 --> 00:27:48.876 A:middle
以下这点也同样重要

00:27:48.936 --> 00:27:51.586 A:middle
每个 URLSession 对象都有

00:27:51.586 --> 00:27:53.206 A:middle
一个连接池

00:27:53.206 --> 00:27:54.506 A:middle
当你创建多个

00:27:54.506 --> 00:27:56.106 A:middle
URLSession 对象

00:27:56.106 --> 00:27:57.606 A:middle
你无法得到任何有关

00:27:57.606 --> 00:27:58.026 A:middle
连接的好处

00:27:59.066 --> 00:28:01.306 A:middle
同时也需要说明的是

