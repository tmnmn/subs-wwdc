WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.926 --> 00:31:01.216 A:middle
我们不赶时间”

00:31:02.226 --> 00:31:03.646 A:middle
这里有一个同样的理念

00:31:03.646 --> 00:31:05.366 A:middle
可以被应用在响应度上

00:31:05.366 --> 00:31:06.866 A:middle
你根据你正在进行的

00:31:07.096 --> 00:31:09.166 A:middle
其它任务给你的任务标上优先级

00:31:10.106 --> 00:31:11.306 A:middle
我们来看看你的 App

00:31:11.306 --> 00:31:12.186 A:middle
可以如何从中获益

00:31:12.566 --> 00:31:16.936 A:middle
你也许很熟悉

00:31:16.936 --> 00:31:19.756 A:middle
跟派遣队列和 NSOperation

00:31:19.756 --> 00:31:22.026 A:middle
对象有关的

00:31:22.026 --> 00:31:22.666 A:middle
这五个 QoS 类

00:31:23.616 --> 00:31:24.976 A:middle
数据需要依靠

00:31:24.976 --> 00:31:26.096 A:middle
CPU 的调度策略

00:31:27.656 --> 00:31:31.156 A:middle
URLSession 是对 QoS 敏感的

00:31:31.156 --> 00:31:33.356 A:middle
意味着它可以在

00:31:33.426 --> 00:31:36.146 A:middle
你调用 task.resume 的队列中采集 QoS

00:31:37.156 --> 00:31:38.646 A:middle
它发给你的 Delegate 的

00:31:38.646 --> 00:31:41.086 A:middle
所有消息都会遵守这个 QoS

00:31:41.086 --> 00:31:44.196 A:middle
举个例子

00:31:45.246 --> 00:31:46.986 A:middle
如果你的 App 想要获取一些

00:31:46.986 --> 00:31:48.786 A:middle
与时间无关的数据

00:31:49.406 --> 00:31:51.476 A:middle
考虑在一个有后台 QoS 的队列上

00:31:51.476 --> 00:31:53.356 A:middle
继续这个任务

00:31:54.026 --> 00:31:56.056 A:middle
保证这个任务不会

00:31:56.056 --> 00:31:58.066 A:middle
与其他正在做的

00:31:58.066 --> 00:31:59.436 A:middle
更高优先级的工作

00:31:59.436 --> 00:32:04.016 A:middle
争夺 CPU 资源

