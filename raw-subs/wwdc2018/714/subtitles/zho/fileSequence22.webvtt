WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.346 --> 00:22:01.766 A:middle
然后 URLSession 会创建一个新的

00:22:01.766 --> 00:22:03.126 A:middle
连接以获取这个资源

00:22:03.126 --> 00:22:04.726 A:middle
因为它在连接池中

00:22:04.726 --> 00:22:06.676 A:middle
并没有空闲的连接

00:22:08.136 --> 00:22:09.336 A:middle
如果你的 App 又要

00:22:09.336 --> 00:22:10.576 A:middle
从同一服务器再获取

00:22:10.576 --> 00:22:12.616 A:middle
一项资源 你可以再创建

00:22:12.616 --> 00:22:14.726 A:middle
一个 URLSession 任务并调用 resume

00:22:15.126 --> 00:22:16.196 A:middle
然后为了获取资源

00:22:16.196 --> 00:22:17.856 A:middle
会再创建一个新的连接

00:22:18.376 --> 00:22:21.236 A:middle
在这个例子中

00:22:21.236 --> 00:22:24.236 A:middle
我们为了从同一个服务器获取资源

00:22:24.306 --> 00:22:26.356 A:middle
创建了 3 个不同的连接

00:22:27.726 --> 00:22:29.246 A:middle
你可能注意到了

00:22:29.246 --> 00:22:31.076 A:middle
我们花了很多时间创建新连接

00:22:31.606 --> 00:22:33.466 A:middle
我们再看看如果

00:22:33.466 --> 00:22:35.716 A:middle
你只用一个连接会怎样

00:22:38.416 --> 00:22:40.306 A:middle
这是单一连接的情况

00:22:41.006 --> 00:22:42.436 A:middle
因为没有不断创建新连接

00:22:42.436 --> 00:22:44.366 A:middle
我们省了很多时间

00:22:44.366 --> 00:22:45.456 A:middle
但这里有另一个问题

00:22:46.636 --> 00:22:48.406 A:middle
请求 2 也就是绿色的请求

00:22:48.406 --> 00:22:50.416 A:middle
必须要等待

00:22:50.586 --> 00:22:52.316 A:middle
请求 1 的回应

00:22:52.316 --> 00:22:53.056 A:middle
被完全接收

00:22:54.216 --> 00:22:57.196 A:middle
请求 3 也有同样的问题

00:22:57.196 --> 00:22:59.016 A:middle
也就是橘黄色的请求

00:22:59.016 --> 00:23:01.116 A:middle
必须等请求 2 的回应

