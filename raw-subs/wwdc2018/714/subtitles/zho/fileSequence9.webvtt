WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.286 --> 00:09:00.876 A:middle
进行原本就会做的

00:09:00.876 --> 00:09:03.476 A:middle
普通的 DNS 请求

00:09:04.576 --> 00:09:05.796 A:middle
如果请求到相同的结果

00:09:05.796 --> 00:09:07.636 A:middle
我们预计大多数时候都是如此

00:09:07.636 --> 00:09:09.586 A:middle
那么一切正常

00:09:09.586 --> 00:09:12.516 A:middle
你就省了一次往返时长

00:09:12.516 --> 00:09:13.766 A:middle
从而更快速地建立连接

00:09:14.426 --> 00:09:15.856 A:middle
如果请求到一个不同的地址

00:09:15.856 --> 00:09:18.156 A:middle
我们就会给你的

00:09:18.156 --> 00:09:19.356 A:middle
客户端发另一个异步的通知

00:09:19.356 --> 00:09:21.416 A:middle
来告诉它

00:09:21.416 --> 00:09:22.666 A:middle
这里有一个新的地址

00:09:22.696 --> 00:09:23.926 A:middle
也需要进行尝试

00:09:24.706 --> 00:09:26.096 A:middle
想要利用这个特性

00:09:26.096 --> 00:09:27.446 A:middle
你需要与 Happy Eyeballs 算法

00:09:27.446 --> 00:09:28.946 A:middle
一起使用

00:09:29.436 --> 00:09:30.996 A:middle
这意味着你需要

00:09:30.996 --> 00:09:32.126 A:middle
同期进行多个连接

00:09:32.996 --> 00:09:33.976 A:middle
你需要尝试 IPv4 IPv6

00:09:34.006 --> 00:09:36.886 A:middle
多个地址

00:09:36.886 --> 00:09:37.756 A:middle
多个接口

00:09:38.566 --> 00:09:39.846 A:middle
这听起来工作量很大

00:09:39.846 --> 00:09:41.356 A:middle
也很难正确完成

00:09:41.516 --> 00:09:42.606 A:middle
确实如此

00:09:42.606 --> 00:09:43.496 A:middle
确实有很多工作要做

00:09:44.096 --> 00:09:46.246 A:middle
中场休息后回来

00:09:46.246 --> 00:09:48.686 A:middle
我们会告诉你一些新的 API

00:09:48.966 --> 00:09:50.406 A:middle
可以让你在无需做

00:09:50.406 --> 00:09:52.346 A:middle
所有麻烦的工作的情况下 利用此特性

00:09:54.526 --> 00:09:56.056 A:middle
现在我们看一些指导信息

00:09:56.726 --> 00:09:58.836 A:middle
我们见到

00:09:59.246 --> 00:10:02.296 A:middle
很多开发者

