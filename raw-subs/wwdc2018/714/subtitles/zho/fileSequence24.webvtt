WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.336 --> 00:24:00.336 A:middle
HTTP/2 能显著减少

00:24:00.336 --> 00:24:02.916 A:middle
这个延迟

00:24:02.916 --> 00:24:04.636 A:middle
在每当 App 需要资源时

00:24:04.636 --> 00:24:06.866 A:middle
基本上立刻发送请求

00:24:07.306 --> 00:24:12.576 A:middle
再来看一下这些灰色的方块

00:24:13.446 --> 00:24:14.946 A:middle
如果你还记得

00:24:14.946 --> 00:24:17.016 A:middle
这是你的 App 没有做任何

00:24:17.016 --> 00:24:18.546 A:middle
跟网络相关的事时的空闲时间

00:24:18.836 --> 00:24:21.476 A:middle
只是在等待服务器的回应

00:24:22.736 --> 00:24:25.606 A:middle
HTTP/2 能显著减少

00:24:25.656 --> 00:24:27.876 A:middle
这样的网络闲时

00:24:27.876 --> 00:24:29.376 A:middle
允许你更充分地利用带宽

00:24:35.476 --> 00:24:37.236 A:middle
我们刚才讨论了

00:24:37.236 --> 00:24:40.186 A:middle
HTTP/2 相比 HTTP/1.1 的

00:24:40.636 --> 00:24:41.726 A:middle
许多优点

00:24:41.726 --> 00:24:41.926 A:middle
简单总结一下

00:24:43.166 --> 00:24:45.086 A:middle
HTTP/2 在 HTTP 层面

00:24:45.086 --> 00:24:47.146 A:middle
解决了队头阻塞问题

00:24:47.476 --> 00:24:49.696 A:middle
它同时允许你更充分地

00:24:49.696 --> 00:24:50.686 A:middle
利用带宽

00:24:52.286 --> 00:24:54.786 A:middle
如果你的 App 使用 URLSession

00:24:54.786 --> 00:24:55.826 A:middle
你不需要对客户端

00:24:55.826 --> 00:24:57.016 A:middle
做任何改动

00:24:57.926 --> 00:25:00.556 A:middle
仅需在服务器上启用 HTTP/2

