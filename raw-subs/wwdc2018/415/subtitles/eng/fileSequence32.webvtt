WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.726 --> 00:32:01.656 A:middle
Swift and how Swift uses Clang

00:32:01.656 --> 00:32:01.976 A:middle
modules.

00:32:02.516 --> 00:32:08.606 A:middle
[ Applause ]

00:32:09.106 --> 00:32:09.846 A:middle
&gt;&gt; Thanks, Jurgen.

00:32:10.406 --> 00:32:12.696 A:middle
We're now going to dive into the

00:32:12.696 --> 00:32:14.746 A:middle
details of how Swift and the

00:32:14.746 --> 00:32:17.216 A:middle
build system work together to

00:32:17.216 --> 00:32:18.906 A:middle
find declarations across your

00:32:18.966 --> 00:32:19.966 A:middle
project.

00:32:21.216 --> 00:32:22.946 A:middle
To recap some of what Jurgen

00:32:22.946 --> 00:32:24.936 A:middle
told you, Clang compiles each

00:32:24.936 --> 00:32:26.946 A:middle
Objective-C file separately.

00:32:27.856 --> 00:32:29.406 A:middle
This means if you want to refer

00:32:29.406 --> 00:32:31.156 A:middle
to a class to find in another

00:32:31.156 --> 00:32:33.476 A:middle
file, you have to import a

00:32:33.476 --> 00:32:37.406 A:middle
header that declares that class.

00:32:37.516 --> 00:32:39.396 A:middle
But Swift was designed to not

00:32:39.396 --> 00:32:41.006 A:middle
require you to write headers.

00:32:41.626 --> 00:32:42.606 A:middle
This makes it easier for

00:32:42.606 --> 00:32:43.916 A:middle
beginners to get started with

00:32:43.916 --> 00:32:44.526 A:middle
the language.

00:32:44.946 --> 00:32:46.606 A:middle
And avoids you having to repeat

00:32:46.686 --> 00:32:48.506 A:middle
a declaration in a separate

00:32:48.506 --> 00:32:48.856 A:middle
file.

00:32:50.116 --> 00:32:51.636 A:middle
However this does mean that the

00:32:51.636 --> 00:32:53.156 A:middle
compiler has to perform some

00:32:53.156 --> 00:32:54.196 A:middle
additional bookkeeping.

00:32:55.036 --> 00:32:56.196 A:middle
I'm going to tell you how that

00:32:56.236 --> 00:32:57.186 A:middle
bookkeeping works.

00:32:57.646 --> 00:33:01.066 A:middle
Let's return to our example,

