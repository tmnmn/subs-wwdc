WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.506 --> 00:15:03.306 A:middle
You promise somewhere else this

00:15:03.306 --> 00:15:04.536 A:middle
implementation exists.

00:15:04.876 --> 00:15:05.946 A:middle
And they usually match.

00:15:06.616 --> 00:15:08.586 A:middle
Of course if you update only the

00:15:08.656 --> 00:15:09.506 A:middle
header file-- only the

00:15:09.506 --> 00:15:11.436 A:middle
implementation file and forget

00:15:11.436 --> 00:15:13.036 A:middle
the header file, you broke your

00:15:13.846 --> 00:15:14.076 A:middle
promise.

00:15:14.446 --> 00:15:16.716 A:middle
Very often this doesn't break

00:15:16.716 --> 00:15:18.296 A:middle
the compile time because the

00:15:18.296 --> 00:15:19.626 A:middle
compiler trusts your promise.

00:15:20.496 --> 00:15:22.726 A:middle
Usually this breaks during link

00:15:22.756 --> 00:15:23.016 A:middle
time.

00:15:23.576 --> 00:15:25.986 A:middle
The compiler usually does

00:15:26.286 --> 00:15:27.566 A:middle
include more than one header

00:15:27.566 --> 00:15:30.586 A:middle
file, and this is done for all

00:15:30.586 --> 00:15:31.566 A:middle
compiler invocation.

00:15:32.376 --> 00:15:34.916 A:middle
So let's have a look at our

00:15:34.916 --> 00:15:37.076 A:middle
example application and see how

00:15:37.076 --> 00:15:38.166 A:middle
we deal with header files.

00:15:39.806 --> 00:15:42.506 A:middle
This is PetWall, it's a

00:15:42.616 --> 00:15:44.076 A:middle
mixed-language application.

00:15:44.956 --> 00:15:46.736 A:middle
The application itself is

00:15:46.736 --> 00:15:47.446 A:middle
written in Swift.

00:15:48.656 --> 00:15:51.256 A:middle
And it uses a framework that's

00:15:51.256 --> 00:15:52.706 A:middle
written in Objective-C.

00:15:52.706 --> 00:15:54.286 A:middle
And it has a support library

00:15:54.376 --> 00:15:56.376 A:middle
aesthetic archive that use--

00:15:56.376 --> 00:16:00.056 A:middle
that's written in C++.

