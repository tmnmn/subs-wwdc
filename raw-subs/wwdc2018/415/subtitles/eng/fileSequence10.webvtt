WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.116 --> 00:10:01.046 A:middle
that's on by default, by the

00:10:01.046 --> 00:10:02.416 A:middle
way, the build system will

00:10:02.416 --> 00:10:03.716 A:middle
establish an implicit dependency

00:10:03.716 --> 00:10:05.326 A:middle
on that target even if it's not

00:10:05.326 --> 00:10:06.626 A:middle
listed in target dependencies.

00:10:08.116 --> 00:10:09.766 A:middle
Next up are build phase

00:10:09.766 --> 00:10:10.376 A:middle
dependencies.

00:10:10.976 --> 00:10:12.136 A:middle
In the target editor, you'll

00:10:12.136 --> 00:10:13.046 A:middle
notice that there's a number of

00:10:13.046 --> 00:10:13.646 A:middle
build phases.

00:10:14.026 --> 00:10:16.406 A:middle
Copy headers, compile sources,

00:10:16.526 --> 00:10:18.446 A:middle
copy bundle resources and so on.

00:10:19.166 --> 00:10:20.466 A:middle
The tasks associated with each

00:10:20.466 --> 00:10:22.056 A:middle
of these phrases are usually

00:10:22.056 --> 00:10:23.156 A:middle
running groups according to the

00:10:23.156 --> 00:10:24.186 A:middle
order in which the phases are

00:10:24.186 --> 00:10:24.726 A:middle
listed.

00:10:25.086 --> 00:10:25.996 A:middle
But the build system might

00:10:26.076 --> 00:10:27.226 A:middle
ignore that order if it knows

00:10:27.256 --> 00:10:27.526 A:middle
better.

00:10:27.626 --> 00:10:28.916 A:middle
Like if you have a link library,

00:10:29.236 --> 00:10:30.716 A:middle
linked binary with library space

00:10:30.966 --> 00:10:32.456 A:middle
ordered before compile sources.

00:10:32.876 --> 00:10:34.016 A:middle
And note that there's cases

00:10:34.016 --> 00:10:34.866 A:middle
where having the wrong build

00:10:34.866 --> 00:10:36.186 A:middle
phase order can cause build

00:10:36.186 --> 00:10:37.656 A:middle
issues or failures, so make sure

00:10:37.656 --> 00:10:38.796 A:middle
to understand your dependencies

00:10:38.796 --> 00:10:39.956 A:middle
and verify that your build

00:10:39.956 --> 00:10:40.826 A:middle
phases are in the right

00:10:40.826 --> 00:10:41.386 A:middle
sequence.

00:10:42.696 --> 00:10:44.166 A:middle
There's also scheme order

00:10:44.166 --> 00:10:44.786 A:middle
dependencies.

00:10:45.406 --> 00:10:46.436 A:middle
If you have the parallelize

00:10:46.486 --> 00:10:47.666 A:middle
build check box enabled in your

00:10:47.666 --> 00:10:49.236 A:middle
scheme settings, you get better

00:10:49.236 --> 00:10:50.806 A:middle
build performance and the order

00:10:50.806 --> 00:10:51.916 A:middle
of your targets in your scheme

00:10:52.016 --> 00:10:52.546 A:middle
doesn't matter.

00:10:53.026 --> 00:10:54.726 A:middle
However, if you turn parallelize

00:10:54.776 --> 00:10:56.546 A:middle
build off, Xcode will attempt to

00:10:56.546 --> 00:10:58.186 A:middle
build their, your targets in the

00:10:58.186 --> 00:10:59.246 A:middle
order you listed them in the

00:10:59.246 --> 00:11:00.876 A:middle
build action of the scheme one

