WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.644 --> 00:28:00.414 align:middle line:-1
所以总能重复使用那个模块

00:28:02.883 --> 00:28:07.054 align:middle line:-2
所有模块要序列化
存到模块缓存区

00:28:09.323 --> 00:28:10.224 align:middle line:-1
我说过…

00:28:11.391 --> 00:28:15.128 align:middle line:-2
命令行实参会向后传递
在创建模块的时候

00:28:15.729 --> 00:28:16.597 align:middle line:-1
就是说…

00:28:17.364 --> 00:28:20.133 align:middle line:-1
这些实参会影响

00:28:20.601 --> 00:28:22.102 align:middle line:-1
模块的内容

00:28:22.636 --> 00:28:24.638 align:middle line:-1
所以我们要散列

00:28:25.038 --> 00:28:26.139 align:middle line:-1
这些实参

00:28:26.607 --> 00:28:30.644 align:middle line:-2
再保存这些
为特定编译器调用而创建的模块

00:28:30.811 --> 00:28:32.846 align:middle line:-1
到散列匹配的目录里

00:28:34.548 --> 00:28:37.284 align:middle line:-1
如果修改编译器实参

00:28:37.351 --> 00:28:38.752 align:middle line:-1
用不同的限制文件

00:28:39.186 --> 00:28:41.822 align:middle line:-2
比如写入
enable cat

00:28:42.823 --> 00:28:44.224 align:middle line:-1
这是不同的散列

00:28:44.491 --> 00:28:47.494 align:middle line:-1
要求Clang重新创建

00:28:47.628 --> 00:28:50.597 align:middle line:0
所有模块
且输入到那个目录

00:28:51.164 --> 00:28:52.132 align:middle line:0
匹配那个散列

00:28:53.300 --> 00:28:57.304 align:middle line:0
为了更多重复利用模块缓存

00:28:57.638 --> 00:29:02.209 align:middle line:0
你要保证实参的一致性
如果可能的话

