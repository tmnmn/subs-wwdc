WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:57.331 --> 00:10:00.033 align:middle line:-2
隐性依赖关系
由scheme编辑器生成

00:10:00.100 --> 00:10:01.502 align:middle line:-1
默认为开启

00:10:01.635 --> 00:10:04.571 align:middle line:-2
构建系统会为这个目标
建立隐性依赖关系

00:10:04.638 --> 00:10:06.840 align:middle line:-1
即便它不在目标依赖关系之列

00:10:08.442 --> 00:10:10.577 align:middle line:-1
接下来是构建阶段依赖

00:10:10.911 --> 00:10:11.812 align:middle line:-1
在目标编辑器里

00:10:11.879 --> 00:10:13.881 align:middle line:-1
你会看到几个构建阶段

00:10:14.014 --> 00:10:18.652 align:middle line:-2
复制头文件、编译源
复制资源包等等

00:10:19.086 --> 00:10:21.154 align:middle line:-1
这些任务与每个阶段相关

00:10:21.221 --> 00:10:22.489 align:middle line:-1
通常按组运行

00:10:22.556 --> 00:10:24.892 align:middle line:-1
根据阶段的排列顺序

00:10:25.025 --> 00:10:27.494 align:middle line:-2
构建系统也会忽略它
如果有更好的方法

00:10:27.561 --> 00:10:30.797 align:middle line:-1
比如第三方静态库阶段

00:10:30.864 --> 00:10:32.533 align:middle line:-1
在编译源之前

00:10:33.033 --> 00:10:35.435 align:middle line:-2
注意有的时候
构建阶段顺序不对

00:10:35.502 --> 00:10:37.137 align:middle line:-1
会导致问题或构建失败

00:10:37.204 --> 00:10:38.705 align:middle line:-1
因此为了解依赖关系

00:10:38.772 --> 00:10:41.575 align:middle line:-1
验证构建阶段的顺序

00:10:42.943 --> 00:10:45.112 align:middle line:-1
还有scheme顺序依赖

00:10:45.345 --> 00:10:47.347 align:middle line:-2
如果开启了
并行构建检查

00:10:47.414 --> 00:10:48.615 align:middle line:-1
在方案设置里

00:10:48.682 --> 00:10:50.250 align:middle line:-1
构建性能会更好

00:10:50.317 --> 00:10:52.886 align:middle line:-1
不用担心目标顺序

00:10:52.953 --> 00:10:55.489 align:middle line:-2
但如果关闭
并行构建

00:10:55.556 --> 00:10:59.026 align:middle line:-2
Xcode构建目标时
会按照你排列的

00:10:59.092 --> 00:11:01.461 align:middle line:-2
构建行动顺序
逐个构建

