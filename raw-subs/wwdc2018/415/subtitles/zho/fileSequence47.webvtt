WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.418 --> 00:47:00.654 align:middle line:-1
print f函数

00:47:01.321 --> 00:47:03.257 align:middle line:-1
就以符号代替代码

00:47:03.790 --> 00:47:06.426 align:middle line:-2
对于其他PetKit函数
一会儿会演示

00:47:06.827 --> 00:47:07.828 align:middle line:-1
也是一样

00:47:09.863 --> 00:47:12.299 align:middle line:-1
片段可能引用未定义符号

00:47:12.366 --> 00:47:14.701 align:middle line:-1
如果.o文件

00:47:15.802 --> 00:47:18.272 align:middle line:-2
引用另一个
.o文件的函数

00:47:18.639 --> 00:47:20.707 align:middle line:-1
这个.o文件就是未定义的

00:47:20.874 --> 00:47:24.144 align:middle line:-2
连接器会查找未定义符号
进行匹配

00:47:26.346 --> 00:47:27.181 align:middle line:-1
那么…

00:47:27.381 --> 00:47:30.551 align:middle line:-1
我说过目标文件是编译器的输出

00:47:30.617 --> 00:47:31.852 align:middle line:-1
什么是库？

00:47:32.486 --> 00:47:34.821 align:middle line:-1
库是定义符号的文件

00:47:34.888 --> 00:47:37.524 align:middle line:-1
但不属于构建的目标

00:47:38.392 --> 00:47:40.961 align:middle line:-1
我们有动态库

00:47:41.595 --> 00:47:42.496 align:middle line:-1
而且…

00:47:42.729 --> 00:47:46.567 align:middle line:-2
这些Mach-O文件
显示代码和数据片段

00:47:46.633 --> 00:47:48.702 align:middle line:-1
供可执行文件使用

00:47:49.536 --> 00:47:52.506 align:middle line:-1
它们是系统的一部分

00:47:52.573 --> 00:47:54.741 align:middle line:-2
这是我们用的框架
你们可能会用

00:47:54.808 --> 00:47:56.109 align:middle line:-1
自己的框架

00:47:58.212 --> 00:48:02.049 align:middle line:-2
还有TBD文件
基于文本的动态库文件

