WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.046 --> 00:08:00.447 align:middle line:-1
如果某个任务的签名

00:08:00.514 --> 00:08:03.350 align:middle line:-1
与上次构建时不同

00:08:03.417 --> 00:08:05.619 align:middle line:-1
它就会重新运行这个任务

00:08:06.019 --> 00:08:08.288 align:middle line:-1
如果相同就会跳过

00:08:08.922 --> 00:08:11.792 align:middle line:-1
这就是累加构建的概念

00:08:12.893 --> 00:08:14.595 align:middle line:-1
我们大概了解了

00:08:14.661 --> 00:08:17.164 align:middle line:-1
构建过程的定义和流程

00:08:17.431 --> 00:08:19.566 align:middle line:-1
如何利用构建系统呢？

00:08:21.134 --> 00:08:22.769 align:middle line:-1
先回顾下基本知识

00:08:23.036 --> 00:08:27.574 align:middle line:-2
构建系统按照一定顺序
执行一系列任务

00:08:27.641 --> 00:08:30.477 align:middle line:-2
但要记得
构建过程以定向图表示

00:08:31.879 --> 00:08:35.315 align:middle line:-2
我们不要担心
任务执行的顺序

00:08:35.381 --> 00:08:37.150 align:middle line:-1
这是构建系统的工作

00:08:37.717 --> 00:08:39.419 align:middle line:-1
作为开发者

00:08:39.486 --> 00:08:42.155 align:middle line:-2
我们要考虑的是
任务之间的依赖关系

00:08:42.389 --> 00:08:44.691 align:middle line:-2
让构建系统决定
最佳的执行方法

00:08:44.758 --> 00:08:46.360 align:middle line:-1
根据定向图结构

00:08:46.894 --> 00:08:49.329 align:middle line:-2
这样构建系统
可以正确地给任务排序

00:08:49.396 --> 00:08:50.931 align:middle line:-1
可能的时候并排运行

00:08:50.998 --> 00:08:53.800 align:middle line:-1
以完全利用多核硬件

00:08:54.968 --> 00:08:56.937 align:middle line:-1
依赖关系源自哪里呢？

00:08:57.271 --> 00:08:58.238 align:middle line:-1
对某些任务

00:08:58.305 --> 00:09:00.240 align:middle line:-1
依赖关系

