WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.332 --> 00:35:00.834 align:middle line:0
文件的编译可以并行

00:35:01.168 --> 00:35:04.438 align:middle line:0
但它强制编译器
重复解析每个文件

00:35:05.305 --> 00:35:07.875 align:middle line:0
解析一次
作为实现文件生成.o

00:35:08.242 --> 00:35:10.711 align:middle line:0
解析多次是作为接口

00:35:11.144 --> 00:35:12.646 align:middle line:0
查找声明

00:35:14.181 --> 00:35:16.817 align:middle line:0
Xcode 10减少了这种消耗

00:35:17.451 --> 00:35:20.554 align:middle line:0
通过将文件合并成组

00:35:20.821 --> 00:35:23.190 align:middle line:0
尽可能多得分担工作

00:35:24.858 --> 00:35:27.094 align:middle line:0
在依旧最大化并行的同时

00:35:27.861 --> 00:35:30.197 align:middle line:0
在组中重复利用解析

00:35:31.164 --> 00:35:33.834 align:middle line:0
只在跨组处理时重复

00:35:34.535 --> 00:35:37.971 align:middle line:0
由于组的数量相对较少

00:35:38.372 --> 00:35:42.709 align:middle line:0
就能大幅提升
增量调试构建的速度

00:35:46.146 --> 00:35:49.716 align:middle line:-2
Swift代码
不止调用其他Swift代码

00:35:50.083 --> 00:35:51.818 align:middle line:-1
还能调用Objective-C

00:35:53.587 --> 00:35:55.455 align:middle line:-1
回到PetWall样本app

00:35:55.522 --> 00:35:58.358 align:middle line:-1
我们看到它很重要

00:35:58.458 --> 00:35:59.993 align:middle line:-1
因为它是系统框架

