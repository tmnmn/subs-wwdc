WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.292 --> 00:06:01.161 align:middle line:-1
现在讲讲已知的依赖关系

00:06:01.495 --> 00:06:04.331 align:middle line:-1
由于你无法获取过多的依赖关系信息

00:06:04.531 --> 00:06:07.167 align:middle line:-1
构建系统可能会找到更多

00:06:07.234 --> 00:06:09.203 align:middle line:-1
在任务的执行过程中

00:06:09.703 --> 00:06:12.906 align:middle line:-2
比如Clang编译
Objective-C文件时

00:06:12.973 --> 00:06:15.209 align:middle line:-1
如你所料 会生成目标文件

00:06:15.576 --> 00:06:17.778 align:middle line:-1
但是它也会生成另一个文件

00:06:18.445 --> 00:06:19.646 align:middle line:-1
其中包含一个列表

00:06:19.713 --> 00:06:22.249 align:middle line:-1
列出源文件中的头文件

00:06:22.749 --> 00:06:24.351 align:middle line:-1
那么下次构建时

00:06:24.418 --> 00:06:27.020 align:middle line:-1
构建系统会使用这个文件中的信息

00:06:27.087 --> 00:06:29.323 align:middle line:-1
以保证再次编译源文件

00:06:29.389 --> 00:06:32.292 align:middle line:-1
如果你更改了其中任何头文件的话

00:06:32.559 --> 00:06:35.629 align:middle line:-2
这里的关系路径是
PetController.h

00:06:35.696 --> 00:06:39.066 align:middle line:-2
PetController.d
.n直到.o文件

00:06:40.300 --> 00:06:42.970 align:middle line:-1
我们已经讲了很多

00:06:43.170 --> 00:06:47.140 align:middle line:-1
构建系统的主要工作就是执行任务

00:06:47.908 --> 00:06:51.778 align:middle line:-1
当然项目越大 构建时间越长

00:06:52.012 --> 00:06:53.981 align:middle line:-1
你肯定不想把所有任务都运行一遍

00:06:54.047 --> 00:06:55.549 align:middle line:-1
在每次构建的时候

00:06:56.049 --> 00:06:58.418 align:middle line:-1
构建系统实际上可以只执行

00:06:58.485 --> 00:07:00.954 align:middle line:-1
定向图上的任务子集

