WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.705 --> 00:34:02.075 align:middle line:-2
编译器会查找
PetView的初始程序类型

00:34:02.609 --> 00:34:04.111 align:middle line:-1
以便检查调用

00:34:05.379 --> 00:34:06.947 align:middle line:-1
但在此之前

00:34:07.281 --> 00:34:09.650 align:middle line:-2
它要解析
PetView.swift

00:34:10.117 --> 00:34:11.217 align:middle line:-1
并验证

00:34:11.618 --> 00:34:14.922 align:middle line:-2
以保证初始程序的声明
是正常的

00:34:15.755 --> 00:34:17.824 align:middle line:-2
编译器很聪明
它知道

00:34:18.091 --> 00:34:21.360 align:middle line:-2
不需要检查
初始程序的主体

00:34:22.094 --> 00:34:23.931 align:middle line:-1
但它还要做些工作

00:34:23.996 --> 00:34:26.632 align:middle line:-1
处理文件的接口部分

00:34:29.803 --> 00:34:32.339 align:middle line:-1
这与Clang不同

00:34:32.840 --> 00:34:34.908 align:middle line:-1
编译一个Swift文件

00:34:35.576 --> 00:34:39.313 align:middle line:-2
编译器也要解析
目标中所有其他Swift文件

00:34:39.379 --> 00:34:42.815 align:middle line:-1
以检查与接口有关的部分

00:34:48.255 --> 00:34:51.190 align:middle line:0
在Xcode 9
这会导致重复工作

00:34:51.391 --> 00:34:53.960 align:middle line:0
在增量调试构建中

00:34:54.027 --> 00:34:57.564 align:middle line:0
因为编译器单独编译每个文件

00:34:58.332 --> 00:35:00.834 align:middle line:0
文件的编译可以并行

