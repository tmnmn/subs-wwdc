WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.621 --> 00:42:02.022 align:middle line:-1
导入模块时

00:42:02.089 --> 00:42:05.792 align:middle line:-2
编译器反序列化
一个特殊的Swift模块文件

00:42:06.360 --> 00:42:08.128 align:middle line:-2
在使用时
检查它的类型

00:42:09.129 --> 00:42:10.697 align:middle line:-1
例如在单元测试中

00:42:10.764 --> 00:42:13.333 align:middle line:-2
编译器加载
PetViewController

00:42:14.001 --> 00:42:15.736 align:middle line:-1
从PetWall Swift模块里

00:42:16.103 --> 00:42:18.672 align:middle line:-2
以保证控制器的创建
没有问题

00:42:19.773 --> 00:42:22.643 align:middle line:-1
这类似于编译器在目标里查找声明

00:42:22.843 --> 00:42:25.012 align:middle line:-1
我之前展示过的

00:42:25.913 --> 00:42:27.014 align:middle line:-1
除此之外

00:42:27.080 --> 00:42:29.917 align:middle line:-2
编译器会加载一个
总结模块的文件

00:42:30.384 --> 00:42:33.220 align:middle line:-1
而不是直接解析Swift文件

00:42:36.323 --> 00:42:38.759 align:middle line:-2
编译器生成的
Swift模块文件

00:42:38.959 --> 00:42:41.762 align:middle line:-2
很多就像
Objective-C头文件

00:42:42.296 --> 00:42:45.199 align:middle line:-2
但它不是文本模式
而是二进制形式

00:42:46.033 --> 00:42:48.202 align:middle line:-1
它包括内联函数的主体

00:42:48.535 --> 00:42:50.971 align:middle line:-2
很像Objective-C
静态内联函数

00:42:51.238 --> 00:42:53.974 align:middle line:-1
C++头文件实现

00:42:54.842 --> 00:42:55.676 align:middle line:-1
但是

00:42:55.742 --> 00:42:56.844 align:middle line:-1
要注意一点

00:42:56.910 --> 00:43:01.381 align:middle line:-2
就是它包含
私有声明的名称和类型

