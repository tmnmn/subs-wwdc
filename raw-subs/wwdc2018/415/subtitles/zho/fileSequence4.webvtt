WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.340 --> 00:04:01.942 align:middle line:-1
同样 连接器任务

00:04:02.009 --> 00:04:03.911 align:middle line:-1
需要几个目标文件

00:04:03.977 --> 00:04:06.146 align:middle line:-1
由编译器在上个任务中生成

00:04:06.380 --> 00:04:08.949 align:middle line:-1
再生成可执行或lib文件

00:04:09.016 --> 00:04:11.852 align:middle line:-2
比如PetWall运行文件
会存到.app资源文件包

00:04:12.219 --> 00:04:15.322 align:middle line:-1
希望大家已经看出些许端倪

00:04:15.989 --> 00:04:19.726 align:middle line:-2
你能看到信息的依赖关系
是顺着这个图形的走向

00:04:19.793 --> 00:04:22.529 align:middle line:-1
最终形成执行顺序

00:04:22.963 --> 00:04:25.933 align:middle line:-2
现在大家关注下
图形中的编译任务

00:04:25.999 --> 00:04:28.468 align:middle line:-1
很像川流不息的马路

00:04:28.569 --> 00:04:30.237 align:middle line:-1
你看得到编译任务

00:04:30.504 --> 00:04:34.474 align:middle line:-2
在各自的路上互不干涉
可以平行运行

00:04:35.375 --> 00:04:37.911 align:middle line:-2
因为连接器任务
需要所有其他的输入

00:04:38.011 --> 00:04:39.413 align:middle line:-1
它要在最后一位

00:04:41.348 --> 00:04:44.017 align:middle line:-1
构建系统通过依赖关系

00:04:44.084 --> 00:04:46.653 align:middle line:-1
决定任务执行的顺序

00:04:46.720 --> 00:04:49.089 align:middle line:-1
以及平行运行的任务

00:04:49.156 --> 00:04:51.091 align:middle line:-1
我们叫做依赖顺序

00:04:51.658 --> 00:04:53.861 align:middle line:-1
知道了构建过程的定义后

00:04:53.961 --> 00:04:57.097 align:middle line:-1
我们具体讲讲怎么操作

00:04:57.164 --> 00:04:59.700 align:middle line:-1
点击“构建”会发生什么？

