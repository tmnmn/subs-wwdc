WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.179 --> 00:03:00.948 align:middle line:-1
需要一组特定的实参

00:03:01.181 --> 00:03:02.616 align:middle line:-1
以特定的顺序

00:03:02.683 --> 00:03:05.018 align:middle line:-1
基于Xcode项目的配置

00:03:06.620 --> 00:03:08.188 align:middle line:-1
构建系统的用处

00:03:08.255 --> 00:03:11.258 align:middle line:-1
就是将任务的执行部署自动化

00:03:11.358 --> 00:03:12.926 align:middle line:-1
在每次构建的时候

00:03:13.460 --> 00:03:16.096 align:middle line:-1
由于任务数量成千上万

00:03:16.163 --> 00:03:18.232 align:middle line:-1
构建过程更是数不胜数

00:03:18.298 --> 00:03:20.534 align:middle line:-1
依赖关系十分复杂

00:03:20.701 --> 00:03:22.302 align:middle line:-1
你肯定不想手动输入

00:03:22.369 --> 00:03:24.304 align:middle line:-1
1天敲100遍命令

00:03:25.472 --> 00:03:27.508 align:middle line:-1
那就让构建系统来做

00:03:29.409 --> 00:03:32.079 align:middle line:-2
我说过
构建系统里的任务

00:03:32.145 --> 00:03:34.181 align:middle line:-1
按照特定的顺序进行

00:03:34.381 --> 00:03:37.718 align:middle line:-2
因此我们谈谈这个顺序
怎么决定及其重要性

00:03:38.785 --> 00:03:40.654 align:middle line:-1
构建任务的执行顺序

00:03:40.721 --> 00:03:43.223 align:middle line:-1
取决于信息的依赖关系

00:03:43.290 --> 00:03:44.424 align:middle line:-1
就是任务

00:03:44.725 --> 00:03:46.460 align:middle line:-1
任务需要的输入

00:03:46.693 --> 00:03:48.428 align:middle line:-1
和任务生成的输出

00:03:49.329 --> 00:03:51.164 align:middle line:-1
以编译任务为例

00:03:51.231 --> 00:03:55.402 align:middle line:-2
它需要输入源代码文件
比如PetController.m

00:03:55.469 --> 00:03:59.373 align:middle line:-2
然后输出目标文件
比如PetController.o

