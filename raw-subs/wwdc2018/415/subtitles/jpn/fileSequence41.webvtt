WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.893 --> 00:41:05.265 align:start position:25% line:-2
私自身はPWLと付けることで
競合を回避しています

00:41:05.599 --> 00:41:07.901 align:start position:20% line:-1
これでObjective-C側で―

00:41:08.001 --> 00:41:11.572 align:start position:23% line:-2
PWLPetCollarとして
クラスを参照できます

00:41:14.074 --> 00:41:17.411 align:start position:27% line:-2
他のSwiftターゲットが
参照できるように―

00:41:17.511 --> 00:41:19.413 align:start position:25% line:-2
同様の手法で
インターフェイスを生成します

00:41:21.215 --> 00:41:25.219 align:start position:20% line:-2
Swiftでのビルドは
Clangのモジュールと似ています

00:41:25.319 --> 00:41:27.087 align:start position:29% line:-1
ユルゲンが説明しましたね

00:41:27.287 --> 00:41:29.923 align:start position:34% line:-2
そして より深く
言語に溶け込みます

00:41:30.657 --> 00:41:34.728 align:start position:29% line:-2
Swiftのモジュールは
配信可能な宣言の集合です

00:41:34.828 --> 00:41:37.264 align:start position:32% line:-2
この宣言を
使用可能にするには―

00:41:37.364 --> 00:41:39.633 align:start position:32% line:-2
モジュールの
インポートが必要です

00:41:40.300 --> 00:41:44.771 align:start position:20% line:-2
この例ではObjective-Cの
XCTestをインポートしました

00:41:45.272 --> 00:41:49.810 align:start position:16% line:-2
XcodeではSwiftのターゲットは
独立したモジュールを作ります

00:41:50.043 --> 00:41:51.712 align:start position:30% line:-1
アプリケーションもです

00:41:52.446 --> 00:41:55.048 align:start position:30% line:-2
アプリケーション本体の
モジュールも―

00:41:55.148 --> 00:41:57.851 align:start position:29% line:-2
ユニットテストをするには
インポートが必要です

