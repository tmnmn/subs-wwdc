WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:56.917 --> 00:37:00.254 align:start position:18% line:-2
SwiftとObjective-Cが
混在するフレームワークでは―

00:37:00.420 --> 00:37:03.490 align:start position:27% line:-2
umbrellaヘッダ内で
宣言を見つけます

00:37:04.525 --> 00:37:07.427 align:start position:25% line:-2
パブリックインターフェイスを
定義するヘッダです

00:37:08.228 --> 00:37:10.864 align:start position:29% line:-2
これでフレームワーク内の
Swiftコードが―

00:37:10.964 --> 00:37:14.902 align:start position:12% line:-2
パブリックのObjective-Cコードを
呼び出せます

00:37:16.837 --> 00:37:19.339 align:start position:29% line:-2
最後にアプリケーションと
ユニットテスト内で―

00:37:19.439 --> 00:37:22.042 align:start position:21% line:-2
ターゲットのブリッジングヘッダに
importを付加します

00:37:22.142 --> 00:37:25.812 align:start position:30% line:-2
これで Swiftから
宣言が呼び出せますね

00:37:28.348 --> 00:37:29.016 align:start position:45% line:-1
さて…

00:37:29.616 --> 00:37:31.752 align:start position:34% line:-2
インポータが
取り込んだ宣言は―

00:37:31.852 --> 00:37:35.155 align:start position:29% line:-2
よりSwiftらしい形に
変換されます

00:37:35.556 --> 00:37:39.893 align:start position:18% line:-2
例えば NSErrorを使う
Objective-Cのメソッドが―

00:37:40.027 --> 00:37:44.998 align:start position:16% line:-2
throwを使用した Swiftらしい
エラー処理になります

00:37:47.801 --> 00:37:50.671 align:start position:27% line:-2
Objective-Cでは
タイプ名のパラメータが―

00:37:50.771 --> 00:37:52.906 align:start position:27% line:-1
動詞や前置詞の後に続きます

00:37:53.874 --> 00:37:56.643 align:start position:27% line:-2
例は drawPetと
atPointメソッドです

00:37:56.743 --> 00:37:58.345 align:start position:27% line:-1
Petという単語があります

00:37:58.545 --> 00:38:02.416 align:start position:25% line:-2
タイプのパラメータ Petが
動詞drawの後にあります

