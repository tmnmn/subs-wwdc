WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.896 --> 00:25:01.496 A:middle
应用两种风格后的图片00:25:01.496 --> 00:25:02.236 A:middle分别是这样的

00:25:02.586 --> 00:25:05.006 A:middle
使用风格转移模型 

00:25:05.196 --> 00:25:06.956 A:middle
我们可以将相同的风格

00:25:06.956 --> 00:25:08.296 A:middle
应用于更多照片

00:25:08.646 --> 00:25:10.246 A:middle
这里有一只猫和另一只狗的照片

00:25:10.916 --> 00:25:13.000 A:middle
这就是得到的效果

00:25:16.046 --> 00:25:17.566 A:middle
这是一个例子

00:25:17.566 --> 00:25:19.646 A:middle
这个 App 使用风格转移

00:25:19.816 --> 00:25:21.946 A:middle
为用户照片添加滤镜

00:25:24.556 --> 00:25:26.526 A:middle
创建风格转移模型的代码

00:25:26.526 --> 00:25:28.386 A:middle
同样遵循

00:25:28.516 --> 00:25:30.466 A:middle
五步方法 就像其他

00:25:30.466 --> 00:25:32.046 A:middle
Turi Create 高级任务一样

00:25:32.296 --> 00:25:33.956 A:middle
所以你可以从导入

00:25:33.956 --> 00:25:36.076 A:middle
Turi Create 开始

00:25:36.076 --> 00:25:38.166 A:middle
将数据加载为 SFrame 格式

00:25:38.166 --> 00:25:40.176 A:middle
并使用一个简单的高级 API 创建模型

00:25:41.326 --> 00:25:42.906 A:middle
然后做出预测

00:25:42.906 --> 00:25:44.166 A:middle
在本例中

00:25:44.166 --> 00:25:46.186 A:middle
使用 .stylize 函数

00:25:46.186 --> 00:25:47.536 A:middle
在图像上应用风格滤镜

00:25:48.166 --> 00:25:49.746 A:middle
最后 我们可以导出它

00:25:49.746 --> 00:25:51.576 A:middle
部署为 Core ML 格式 

00:25:51.576 --> 00:25:53.000 A:middle
就像 Turi Create 中的其他模型一样

00:25:56.266 --> 00:25:57.926 A:middle
我们来看看另一个演示

00:25:58.146 --> 00:26:00.106 A:middle
这一次 我们要构建

