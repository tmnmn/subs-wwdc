WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.906 --> 00:20:00.896 A:middle
为它赋值

00:20:01.756 --> 00:20:03.736 A:middle
我将向 draw_bounding_boxes 函数

00:20:03.736 --> 00:20:06.946 A:middle
传入测试的 image 列

00:20:07.016 --> 00:20:09.176 A:middle
也就是图像本身

00:20:09.176 --> 00:20:11.616 A:middle
并传入

00:20:11.616 --> 00:20:13.626 A:middle
刚刚从模型中得到的预测

00:20:13.766 --> 00:20:15.616 A:middle
这个函数会将

00:20:15.656 --> 00:20:17.316 A:middle
预测的边界框

00:20:17.316 --> 00:20:18.126 A:middle
画到每张图片上

00:20:18.656 --> 00:20:19.996 A:middle
现在我们来看看这个

00:20:19.996 --> 00:20:21.286 A:middle
2 号预测

00:20:21.566 --> 00:20:23.096 A:middle
这次是以图像形式

00:20:24.676 --> 00:20:25.586 A:middle
所以我输入

00:20:25.586 --> 00:20:28.396 A:middle
test[‘predicted_image’][2].show

00:20:28.836 --> 00:20:30.786 A:middle
Notebook 中就会显示结果

00:20:31.516 --> 00:20:38.016 A:middle
[ 掌声 ]

00:20:38.516 --> 00:20:39.946 A:middle
这样的抽样调查很棒

00:20:39.946 --> 00:20:41.596 A:middle
因为我们知道了

00:20:41.596 --> 00:20:43.146 A:middle
至少对这张图片来说 模型是正确的

00:20:43.616 --> 00:20:44.706 A:middle
但我们并不知道它对于接下来

00:20:44.706 --> 00:20:45.996 A:middle
可能传入的 50,000 张图片

00:20:45.996 --> 00:20:47.786 A:middle
能否得出正确结果

00:20:48.636 --> 00:20:50.916 A:middle
为此 我们将会对模型进行

00:20:50.976 --> 00:20:51.846 A:middle
量化评估

00:20:52.446 --> 00:20:53.966 A:middle
我在 Notebook 上

00:20:53.966 --> 00:20:55.106 A:middle
开始一个新节

00:20:55.106 --> 00:20:56.326 A:middle
称为 Evaluate the model

00:20:56.426 --> 00:20:58.286 A:middle
而我们要做的是

00:20:58.286 --> 00:21:01.226 A:middle
调用 model.evaluate

