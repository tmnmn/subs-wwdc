WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.545 --> 00:08:00.914 align:middle line:-2
我们的模型在准确性方面
所受到的影响越大

00:08:01.048 --> 00:08:02.683 align:middle line:-1
我们稍后还会谈到这一点

00:08:03.884 --> 00:08:05.619 align:middle line:-1
以上是对量化的概述

00:08:05.986 --> 00:08:08.755 align:middle line:-2
但问题依然存在
我们如何获得这种映射

00:08:09.489 --> 00:08:11.258 align:middle line:-1
有很多流行的算法

00:08:11.325 --> 00:08:13.694 align:middle line:-1
和技术能帮助你做到这一点

00:08:13.760 --> 00:08:16.530 align:middle line:-2
Core ML支持
其中两种最流行的

00:08:17.130 --> 00:08:19.700 align:middle line:-1
线性量化和查找表量化

00:08:20.634 --> 00:08:22.002 align:middle line:-1
让我们简要介绍一下

00:08:26.273 --> 00:08:28.008 align:middle line:-1
线性量化是一种

00:08:28.075 --> 00:08:31.778 align:middle line:-1
以均匀的方式映射参数的算法

00:08:32.880 --> 00:08:37.150 align:middle line:-2
这种量化是通过比例系数和偏差值
进行参数化的

00:08:37.217 --> 00:08:39.186 align:middle line:-1
这些值是通过计算得到的

00:08:39.553 --> 00:08:42.389 align:middle line:-1
该计算基于我们正在量化的层的参数

00:08:43.023 --> 00:08:46.393 align:middle line:-2
了解这种映射工作原理
的一种非常直观的方式

00:08:46.727 --> 00:08:48.195 align:middle line:-1
是我们退后一步

00:08:48.262 --> 00:08:50.497 align:middle line:-1
看看我们如何从位于底部的量化权重

00:08:50.564 --> 00:08:53.267 align:middle line:-1
恢复到原来的浮点数权重

00:08:53.834 --> 00:08:57.571 align:middle line:-2
在线性量化中
我们只需用量化权重

00:08:57.804 --> 00:08:59.973 align:middle line:-1
乘以比例系数再加上偏差

