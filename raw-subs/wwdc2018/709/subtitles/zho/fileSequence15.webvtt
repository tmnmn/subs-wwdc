WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.199 --> 00:15:00.767 align:middle line:-1
而我的量化模型也作出同样预测

00:15:01.034 --> 00:15:04.137 align:middle line:-2
这种情况发生在
数据集中94.8%的图片上

00:15:05.839 --> 00:15:08.275 align:middle line:-1
我可以在我的app中使用此模型

00:15:08.675 --> 00:15:09.943 align:middle line:-1
但我想看看

00:15:10.177 --> 00:15:12.779 align:middle line:-2
其他量化技术
是否在这个模型上效果更好

00:15:13.480 --> 00:15:16.917 align:middle line:-2
正如我所提到的
Core ML支持两种量化技术

00:15:17.084 --> 00:15:19.553 align:middle line:-1
线性量化和查找表量化

00:15:19.887 --> 00:15:21.188 align:middle line:-1
所以让我们继续尝试

00:15:21.488 --> 00:15:24.124 align:middle line:-1
使用查找表量化来量化此模型

00:15:30.931 --> 00:15:32.466 align:middle line:-1
我们再次传入原始模型

00:15:32.766 --> 00:15:35.102 align:middle line:-1
和我们想要量化模型的位数

00:15:35.669 --> 00:15:37.404 align:middle line:-1
以及我们的量化技术

00:15:39.306 --> 00:15:40.474 align:middle line:-1
哎呀 这里有个错误

00:15:48.916 --> 00:15:50.217 align:middle line:-1
让我们运行它

00:15:50.651 --> 00:15:53.720 align:middle line:-2
K-means是一种
简单的聚类算法

00:15:53.787 --> 00:15:56.356 align:middle line:-1
能够逼近我们的权重分布

00:15:56.657 --> 00:15:58.192 align:middle line:-1
使用这种分布

00:15:58.392 --> 00:16:02.062 align:middle line:-1
我们可以为我们的权重构建查找表

