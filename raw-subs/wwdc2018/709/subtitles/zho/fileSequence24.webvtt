WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:01.175 --> 00:24:02.342 align:middle line:-1
最近

00:24:02.943 --> 00:24:06.980 align:middle line:-2
我看到了一篇研究论文
它的题目是“空间变换网络”

00:24:07.548 --> 00:24:09.416 align:middle line:-1
它所做的事情是这样的

00:24:10.017 --> 00:24:13.687 align:middle line:-1
它在数字之后插入一个神经网络

00:24:14.154 --> 00:24:16.523 align:middle line:-1
用来定位数字的位置

00:24:17.291 --> 00:24:19.860 align:middle line:-1
然后将其传入一个网格采样器层

00:24:20.260 --> 00:24:22.229 align:middle line:-1
这会重新渲染这个数字

00:24:22.296 --> 00:24:25.265 align:middle line:-1
但这次它已经能够定位在数字本身上

00:24:25.566 --> 00:24:28.068 align:middle line:-1
然后你将它传递给你的旧分类方法

00:24:28.969 --> 00:24:32.339 align:middle line:-1
我们不关心这里的细节

00:24:32.406 --> 00:24:35.008 align:middle line:-1
但要注意的一点是

00:24:35.275 --> 00:24:36.944 align:middle line:-1
绿色部分是Core ML支持的

00:24:37.344 --> 00:24:40.581 align:middle line:-1
而红色部分是新的网格采样器层

00:24:40.948 --> 00:24:43.750 align:middle line:-1
是Core ML不支持的新实验层

00:24:44.418 --> 00:24:46.887 align:middle line:-1
我想通过这个特定模型的例子

00:24:47.354 --> 00:24:51.325 align:middle line:-2
来向你展示如何使用
Core ML Tools对其转换

00:24:51.959 --> 00:24:53.327 align:middle line:-1
现在我们来演示一下

