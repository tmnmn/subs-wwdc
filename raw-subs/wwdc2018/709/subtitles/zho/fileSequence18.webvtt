WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:04.117 --> 00:18:05.285 align:middle line:-1
如果你注意一下会发现

00:18:05.986 --> 00:18:10.858 align:middle line:-2
有关量化模型的所有细节
都与原始模型相同

00:18:11.225 --> 00:18:14.561 align:middle line:-2
它仍然需要一个图像输入
仍然有两个输出

00:18:15.229 --> 00:18:18.131 align:middle line:-2
若我有一个使用此模型的app
我可以做的是

00:18:18.198 --> 00:18:19.633 align:middle line:-1
如我们在演示中看到的那样

00:18:20.000 --> 00:18:22.536 align:middle line:-2
将这个量化模型直接
拖入我们的app

00:18:22.603 --> 00:18:23.937 align:middle line:-1
并开始使用它

00:18:24.137 --> 00:18:26.440 align:middle line:-2
只需这样 我们就缩减了
app的大小

00:18:32.379 --> 00:18:34.915 align:middle line:-2
这就是使用
Core ML Tools量化的过程

00:18:38.652 --> 00:18:43.590 align:middle line:-2
回顾一下 我们看到使用Core ML Tools
来量化我们的模型是多么容易

00:18:44.291 --> 00:18:48.328 align:middle line:-2
使用一个简单的API
传入我们的原始模型

00:18:48.795 --> 00:18:51.231 align:middle line:-1
我们想要量化模型的位数

00:18:51.498 --> 00:18:53.667 align:middle line:-1
和我们想要使用的量化算法

00:18:54.201 --> 00:18:56.436 align:middle line:-2
我们也看到Core ML Tools中
有一些实用工具

00:18:56.703 --> 00:18:59.039 align:middle line:-1
来帮助我们比较量化模型

00:18:59.373 --> 00:19:01.808 align:middle line:-2
从而了解它与我们的
原始模型相比较效果如何

