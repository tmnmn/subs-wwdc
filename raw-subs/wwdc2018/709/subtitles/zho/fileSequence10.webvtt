WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.365 --> 00:10:02.035 align:middle line:-2
如果我正在执行查找表量化
我该如何构建查找表呢？

00:10:03.036 --> 00:10:06.206 align:middle line:-2
我在这里告诉你
你不必关心这其中任何一点

00:10:06.940 --> 00:10:10.611 align:middle line:-2
你所要做的就是决定
你想要量化模型的位数

00:10:10.844 --> 00:10:12.746 align:middle line:-1
并决定要使用的算法

00:10:13.046 --> 00:10:15.215 align:middle line:-2
剩下的工作交给
Core ML Tools来完成

00:10:16.083 --> 00:10:16.984 align:middle line:-1
事实上…

00:10:17.985 --> 00:10:18.819 align:middle line:-1
谢谢大家

00:10:22.656 --> 00:10:26.994 align:middle line:-2
事实上 量化一个
Core ML模型是如此简单

00:10:27.394 --> 00:10:29.796 align:middle line:-2
以至于我们可在几行
Python代码中完成它

00:10:30.397 --> 00:10:33.400 align:middle line:-2
既然我们可以在这里演示
何必继续浪费口舌呢？

00:10:40.507 --> 00:10:42.676 align:middle line:-1
为了演示

00:10:42.743 --> 00:10:46.013 align:middle line:-2
我需要一个
Core ML模型格式的神经网络

00:10:46.580 --> 00:10:48.248 align:middle line:-1
正如我的同事Aseem所说

00:10:48.315 --> 00:10:51.752 align:middle line:-2
Core ML机器学习主页是一个
找到这些模型的好地方

00:10:52.052 --> 00:10:55.189 align:middle line:-2
我已经提前下载了该页面中的
一个模型

00:10:55.522 --> 00:10:58.358 align:middle line:-2
这个模型叫做SqueezeNet
让我们打开它

