WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.392 --> 00:16:02.062 align:middle line:-1
我们可以为我们的权重构建查找表

00:16:02.529 --> 00:16:04.097 align:middle line:-1
我们在这里做的是

00:16:04.164 --> 00:16:07.000 align:middle line:-1
我们遍历神经网络中的所有层

00:16:07.267 --> 00:16:09.736 align:middle line:-1
对其执行量化过程

00:16:09.970 --> 00:16:11.438 align:middle line:-1
并为那个特顶层计算查找表

00:16:12.206 --> 00:16:15.409 align:middle line:-2
如果你是一位专家
并且你了解你的模型

00:16:15.576 --> 00:16:16.944 align:middle line:-1
你也知道你的模型架构

00:16:17.211 --> 00:16:19.580 align:middle line:-2
而且你知道K-means
不是最合适你的算法

00:16:19.813 --> 00:16:22.049 align:middle line:-1
你可以灵活地传入

00:16:22.216 --> 00:16:23.483 align:middle line:-1
你自己的自定义函数

00:16:24.585 --> 00:16:26.954 align:middle line:-2
而不是这里的这个算法
这个工具将使用

00:16:27.020 --> 00:16:29.790 align:middle line:-1
你的自定义函数来为你构造查找表

00:16:30.824 --> 00:16:34.661 align:middle line:-2
我们使用查找表方法
再次完成了对这个模型的量化

00:16:35.062 --> 00:16:38.298 align:middle line:-2
现在让我们看看这个模型
与我们的原始模型比较效果如何

00:16:38.632 --> 00:16:41.468 align:middle line:-2
所以我们再次调用
compare_models API

00:16:42.236 --> 00:16:46.373 align:middle line:-2
我们传入原始模型
接着传入查找表模型

00:16:46.974 --> 00:16:48.909 align:middle line:-1
我们再次传入

00:16:50.511 --> 00:16:51.645 align:middle line:-1
示例数据文件夹

00:16:54.681 --> 00:16:58.619 align:middle line:-1
我们再次使用原始模型和量化模型

00:16:59.586 --> 00:17:01.388 align:middle line:-1
对所有图像进行推理

