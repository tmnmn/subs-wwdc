WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.546 --> 00:13:02.149 align:middle line:-1
然后是我们想要量化模型的位数

00:13:02.216 --> 00:13:03.550 align:middle line:-1
这里我们将其设为8

00:13:04.685 --> 00:13:06.887 align:middle line:-1
以及我们想要使用的量化算法

00:13:07.054 --> 00:13:08.689 align:middle line:-1
让我们试试线性量化

00:13:10.157 --> 00:13:11.158 align:middle line:-1
现在所发生的事情是

00:13:11.225 --> 00:13:14.995 align:middle line:-1
这些工具会遍历线性网络的所有层

00:13:15.062 --> 00:13:17.731 align:middle line:-1
并量化这些层中的所有权重

00:13:18.165 --> 00:13:19.099 align:middle line:-1
我们完成了

00:13:20.467 --> 00:13:22.269 align:middle line:-1
如果你还记得

00:13:22.603 --> 00:13:25.272 align:middle line:-1
几分钟前我提到量化我们的模型

00:13:25.339 --> 00:13:27.274 align:middle line:-1
会造成精确度上的损失

00:13:27.941 --> 00:13:31.345 align:middle line:-2
所以我们想知道我们的量化模型
与原始模型相比效果如何

00:13:32.179 --> 00:13:35.883 align:middle line:-2
这样做的最简单方法是
将一些数据传给它

00:13:36.383 --> 00:13:39.953 align:middle line:-1
并使用我们的原始模型推理该数据

00:13:40.554 --> 00:13:42.956 align:middle line:-1
再使用我们的量化模型

00:13:43.023 --> 00:13:46.426 align:middle line:-2
对相同的数据进行相同的推理
并比较这两者的预测

00:13:47.094 --> 00:13:48.595 align:middle line:-1
来看看它们的一致程度

00:13:49.029 --> 00:13:51.465 align:middle line:-2
Core ML Tools
有帮助你做到这一点的工具

00:13:51.532 --> 00:13:55.636 align:middle line:-2
我们可以通过调用这个
称为compare_models函数来达到目的

00:13:56.236 --> 00:13:57.971 align:middle line:-1
我们传入全精度模型

00:13:58.472 --> 00:14:01.141 align:middle line:-1
然后是我们刚刚量化过的模型

