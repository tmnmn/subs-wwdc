WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.725 --> 00:21:01.728 align:middle line:-2
它让我们能够跟上
机器学习领域的发展

00:21:02.329 --> 00:21:03.397 align:middle line:-1
大家都知道

00:21:04.064 --> 00:21:07.134 align:middle line:-1
机器学习领域正在迅速发展

00:21:07.768 --> 00:21:10.304 align:middle line:-2
因此 为你提供必要的软件工具
来解决这个问题

00:21:10.771 --> 00:21:14.374 align:middle line:-2
对于我们Core ML团队来说
非常重要

00:21:15.876 --> 00:21:17.077 align:middle line:-1
现在举一个例子

00:21:17.911 --> 00:21:20.781 align:middle line:-1
假设你正在尝试一个

00:21:20.848 --> 00:21:22.349 align:middle line:-1
Core ML尚不支持的新模型

00:21:22.649 --> 00:21:27.321 align:middle line:-2
或者假设你有一个
运行在Core ML上的神经网络

00:21:27.387 --> 00:21:31.792 align:middle line:-2
但是也许其中有一两层
Core ML暂时无法提供

00:21:32.893 --> 00:21:38.432 align:middle line:-2
在这种情况下 你希望仍然能够使用
Core ML的强大功能 对吗？

00:21:39.333 --> 00:21:41.134 align:middle line:-2
对这个问题的回答是
是的

00:21:41.668 --> 00:21:44.938 align:middle line:-1
自定义机制将帮助你达到这点

00:21:46.173 --> 00:21:47.274 align:middle line:-1
在接下来的几分钟内

00:21:47.474 --> 00:21:50.644 align:middle line:-1
我想重点关注当我们有一个

00:21:50.711 --> 00:21:53.514 align:middle line:-1
新的神经网络层的情况

00:21:53.881 --> 00:21:56.984 align:middle line:-2
然后向你展示
你将如何将它转换为Core ML

00:21:57.284 --> 00:21:59.486 align:middle line:-1
以及如何在你的app中实现它

