WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.579 --> 00:08:00.948 align:start position:27% line:-1
モデルの精度は損なわれます

00:08:01.048 --> 00:08:02.783 align:start position:36% line:-1
後ほど解説します

00:08:03.851 --> 00:08:05.752 align:start position:36% line:-1
これが量子化です

00:08:05.986 --> 00:08:09.056 align:start position:34% line:-2
では どうやって
マッピングするのか

00:08:09.456 --> 00:08:13.594 align:start position:27% line:-2
多くのアルゴリズムや
テクニックが知られています

00:08:13.694 --> 00:08:16.797 align:start position:32% line:-2
Core MLが
サポートしているのは

00:08:17.164 --> 00:08:20.000 align:start position:23% line:-2
直線量子化と
ルックアップテーブル量子化です

00:08:20.634 --> 00:08:22.436 align:start position:32% line:-1
簡単に説明しましょう

00:08:26.306 --> 00:08:27.908 align:start position:39% line:-1
直線量子化は

00:08:28.008 --> 00:08:32.078 align:start position:30% line:-2
すべてのパラメータを
均等にマッピングします

00:08:32.913 --> 00:08:37.083 align:start position:29% line:-2
スケールとバイアスで
パラメータ化する方法です

00:08:37.183 --> 00:08:42.655 align:start position:21% line:-2
その値は量子化するレイヤの
パラメータに基づいて計算されます

00:08:43.056 --> 00:08:46.627 align:start position:30% line:-2
マッピングの効果を
簡単にイメージするには

00:08:46.793 --> 00:08:51.565 align:start position:30% line:-2
量子化されたウェイトを
元の浮動小数点数に

00:08:51.665 --> 00:08:53.433 align:start position:34% line:-1
戻せばいいだけです

00:08:53.834 --> 00:08:57.704 align:start position:29% line:-2
直線量子化では
スケールにバイアスを加え

00:08:57.805 --> 00:09:00.307 align:start position:27% line:-1
単純にウェイトを増やします

