WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.145 --> 00:33:02.816 align:start position:36% line:-2
レイヤが実行する
数学関数の実装は

00:33:02.916 --> 00:33:04.718 align:start position:36% line:-1
ここでなされます

00:33:05.185 --> 00:33:08.055 align:start position:27% line:-1
出力もしくは入力シェイプは

00:33:08.155 --> 00:33:12.426 align:start position:30% line:-2
レイヤが生成する
出力サイズを指定します

00:33:12.526 --> 00:33:16.663 align:start position:29% line:-2
アプリケーションが
効率的に実行されるように

00:33:16.930 --> 00:33:20.100 align:start position:27% line:-1
バッファサイズを分配します

00:33:21.902 --> 00:33:26.940 align:start position:29% line:-2
ここまで 新しいレイヤの
対処法を解説しました

00:33:27.474 --> 00:33:32.679 align:start position:27% line:-2
カスタムレイヤに概念が似た
カスタムモデルです

00:33:33.280 --> 00:33:37.084 align:start position:34% line:-2
考え方は同じですが
より一般的な方法で

00:33:37.184 --> 00:33:41.655 align:start position:30% line:-2
どんなネットワークにも
対応できます

00:33:41.755 --> 00:33:45.125 align:start position:29% line:-2
ニューラルネットワークに
限りません

00:33:45.559 --> 00:33:48.996 align:start position:34% line:-2
より柔軟性があると
言えるでしょう

00:33:50.531 --> 00:33:52.065 align:start position:38% line:-1
まとめましょう

00:33:52.332 --> 00:33:54.368 align:start position:34% line:-1
このセッションでは

00:33:54.468 --> 00:33:59.006 align:start position:25% line:-2
Core ML Toolsの
エコシステムを確認しました

00:33:59.106 --> 00:34:03.977 align:start position:29% line:-2
Core MLモデルには
様々な入手先があります

