WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.556 --> 00:23:00.756 A:middle
Look. The training has started.

00:23:02.406 --> 00:23:03.656 A:middle
As you can see on the bottom

00:23:03.656 --> 00:23:05.166 A:middle
there, there is some progress

00:23:05.166 --> 00:23:06.726 A:middle
report for you to check.

00:23:06.926 --> 00:23:08.746 A:middle
Looks like training has

00:23:10.056 --> 00:23:10.276 A:middle
finished.

00:23:10.406 --> 00:23:12.566 A:middle
Now you can check some basic

00:23:12.566 --> 00:23:13.696 A:middle
performance numbers on this

00:23:13.696 --> 00:23:14.256 A:middle
model.

00:23:14.496 --> 00:23:15.096 A:middle
For example,

00:23:15.966 --> 00:23:19.226 A:middle
model.trainingMetrics that shows

00:23:19.226 --> 00:23:20.516 A:middle
you this model has been trained

00:23:20.516 --> 00:23:23.226 A:middle
on over 2000 examples and

00:23:23.226 --> 00:23:24.786 A:middle
accuracy is 100%.

00:23:25.286 --> 00:23:29.796 A:middle
But how does it perform on some

00:23:29.846 --> 00:23:30.556 A:middle
unseen data?

00:23:31.446 --> 00:23:33.336 A:middle
So I'm going to do the same to

00:23:33.366 --> 00:23:37.126 A:middle
define test data and then

00:23:38.376 --> 00:23:42.086 A:middle
evaluate that model on the test

00:23:43.316 --> 00:23:43.456 A:middle
data.

00:23:43.626 --> 00:23:46.336 A:middle
As you can see, we have 77 test

00:23:46.516 --> 00:23:49.036 A:middle
examples, and we are achieving

00:23:49.446 --> 00:23:52.966 A:middle
over 94% accuracy, which is very

00:23:52.966 --> 00:23:53.616 A:middle
good.

00:23:54.556 --> 00:23:56.076 A:middle
I'm sure you want to iterate on

00:23:56.076 --> 00:23:57.296 A:middle
that if you want to see like

00:23:57.296 --> 00:23:59.906 A:middle
even a higher number, but this

00:23:59.906 --> 00:24:01.936 A:middle
number is pretty good enough for

