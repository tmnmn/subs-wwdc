WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.006 --> 00:08:00.796 A:middle
提醒我并且给我发出相关

00:08:00.796 --> 00:08:01.436 A:middle
信息的时候

00:08:01.926 --> 00:08:04.086 A:middle
这样一来 我可以在

00:08:04.086 --> 00:08:07.026 A:middle
UI 上更新下载进度  

00:08:07.726 --> 00:08:10.266 A:middle
之后当下载完成时

00:08:10.266 --> 00:08:12.316 A:middle
我当然可以

00:08:12.316 --> 00:08:13.686 A:middle
操作文件 我也许

00:08:13.686 --> 00:08:15.426 A:middle
想要发送一个通知

00:08:15.426 --> 00:08:17.156 A:middle
提醒用户

00:08:17.156 --> 00:08:18.246 A:middle
文件已经准备好播放了  

00:08:18.766 --> 00:08:21.976 A:middle
当然了 我的程序

00:08:21.976 --> 00:08:22.936 A:middle
也会调用 didCompleteWithError   

00:08:22.936 --> 00:08:24.946 A:middle
用于适当地清理

00:08:24.946 --> 00:08:26.266 A:middle
并处理该点

00:08:26.496 --> 00:08:28.066 A:middle
任何存在的

00:08:28.066 --> 00:08:28.916 A:middle
任何错误

00:08:29.946 --> 00:08:31.466 A:middle
这非常棒  

00:08:31.466 --> 00:08:32.976 A:middle
使用 URLSession 我们可以

00:08:32.976 --> 00:08:34.265 A:middle
直接把数据下载到手表上 

00:08:34.816 --> 00:08:36.416 A:middle
但有时 iPhone

00:08:36.416 --> 00:08:38.056 A:middle
上已经有了数据了

00:08:39.106 --> 00:08:40.576 A:middle
这样的话我们可以用

00:08:40.576 --> 00:08:44.416 A:middle
WatchConnectivity 直接传送

00:08:42.135 --> 00:08:44.416 A:middle
文件到手表上

00:08:48.536 --> 00:08:50.336 A:middle
为了完成这个 我们可以使用

00:08:50.336 --> 00:08:51.426 A:middle
transfer file 的 API  

00:08:51.426 --> 00:08:53.946 A:middle
watchOS 5 有个可以

00:08:53.946 --> 00:08:56.256 A:middle
获取传输进度的新功能  

00:08:57.376 --> 00:08:58.306 A:middle
让我们来看一眼  

00:08:58.956 --> 00:09:00.546 A:middle
在代码里 我们可以看到

