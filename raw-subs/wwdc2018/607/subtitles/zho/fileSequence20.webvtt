WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.886 --> 00:20:01.526 A:middle
你会删除所有的冗余状态

00:20:01.526 --> 00:20:03.036 A:middle
最终的结果是

00:20:03.036 --> 00:20:05.196 A:middle
一组精简而高效的 GPU 命令

00:20:06.226 --> 00:20:08.876 A:middle
现在 一旦 ICB 被编码

00:20:08.876 --> 00:20:10.416 A:middle
和优化 就可以安排它进行

00:20:10.416 --> 00:20:11.286 A:middle
执行操作了

00:20:11.776 --> 00:20:12.986 A:middle
你会注意到

00:20:12.986 --> 00:20:14.996 A:middle
在这里你实际上可以

00:20:14.996 --> 00:20:16.396 A:middle
指定你执行的命令的确切范围

00:20:17.316 --> 00:20:18.736 A:middle
同样在这个例子中

00:20:18.736 --> 00:20:20.666 A:middle
我们使用了一个间接缓冲区

00:20:21.076 --> 00:20:22.476 A:middle
它本身就可以用 GPU 编码

00:20:25.586 --> 00:20:28.066 A:middle
所以一旦 ICB 完成编码

00:20:28.066 --> 00:20:29.746 A:middle
它就可以被一次又一次地

00:20:29.746 --> 00:20:31.526 A:middle
重复使用 并且开销是完全

00:20:31.526 --> 00:20:32.146 A:middle
可以被忽略不计的

00:20:32.856 --> 00:20:33.966 A:middle
我非常兴奋

00:20:33.966 --> 00:20:35.236 A:middle
但我们还要接着往下走

00:20:35.236 --> 00:20:36.686 A:middle
我们将一个例子与代码放在一起

00:20:36.686 --> 00:20:37.206 A:middle
以便你们可以看一下

00:20:39.216 --> 00:20:41.066 A:middle
在屏幕上

00:20:41.066 --> 00:20:42.756 A:middle
你可以看到一些城市中的校车

00:20:43.996 --> 00:20:46.766 A:middle
每辆校车由 500,000

00:20:46.766 --> 00:20:50.326 A:middle
个多边形和 2000 个独立部分组成

00:20:50.866 --> 00:20:53.446 A:middle
每个部分都需要

00:20:53.446 --> 00:20:55.116 A:middle
一个单独的绘图调用 它自己的

00:20:55.116 --> 00:20:56.836 A:middle
材质参数缓冲区 索引缓冲区

00:20:56.836 --> 00:20:57.636 A:middle
和顶点缓冲区

00:20:58.606 --> 00:21:00.006 A:middle
正如你想象的那样

