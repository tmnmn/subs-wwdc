WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.736 --> 00:17:03.076 A:middle
可见对象列表和 LOD 开始

00:17:03.796 --> 00:17:05.165 A:middle
另外 请记住

00:17:05.165 --> 00:17:07.066 A:middle
我们正在使用参数缓冲区的能力

00:17:07.896 --> 00:17:09.866 A:middle
所以在这种情况下

00:17:10.266 --> 00:17:12.816 A:middle
每个元素都有一个

00:17:12.816 --> 00:17:14.165 A:middle
指向实际属性的指针 所以

00:17:14.165 --> 00:17:15.496 A:middle
我们不需要将所有内容都存储在

00:17:15.496 --> 00:17:15.896 A:middle
同一个缓冲区内

00:17:17.736 --> 00:17:20.136 A:middle
这种方式为我们

00:17:20.136 --> 00:17:21.906 A:middle
节省了大量的内存和性能

00:17:22.116 --> 00:17:23.726 A:middle
这是因为我们只构建了

00:17:23.726 --> 00:17:25.126 A:middle
一小部分信息

00:17:25.896 --> 00:17:27.026 A:middle
实际参数缓冲区

00:17:27.026 --> 00:17:29.866 A:middle
包含几个级别的几何细节

00:17:30.936 --> 00:17:33.726 A:middle
它们包括位置

00:17:33.726 --> 00:17:35.406 A:middle
顶点缓冲区 索引缓冲区

00:17:35.406 --> 00:17:36.626 A:middle
和材质参数缓冲区

00:17:37.256 --> 00:17:39.486 A:middle
关于渲染 我们只选择每个对象的

00:17:39.876 --> 00:17:41.206 A:middle
多个 LOD 中的一个

00:17:41.836 --> 00:17:45.026 A:middle
实际的编码发生在

00:17:45.026 --> 00:17:47.126 A:middle
一个计算内核中 我们把它

00:17:47.126 --> 00:17:48.716 A:middle
编码成一个间接命令缓冲区

00:17:49.826 --> 00:17:51.716 A:middle
计算内核的每个

00:17:51.716 --> 00:17:53.756 A:middle
线程都编码一个绘制调用

00:17:54.226 --> 00:17:55.976 A:middle
所以我们读取对象

00:17:55.976 --> 00:17:58.756 A:middle
具有的所有属性 并将它们编码

00:17:58.756 --> 00:18:00.526 A:middle
到 ICB 中

