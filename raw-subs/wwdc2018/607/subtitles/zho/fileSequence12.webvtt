WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.486 --> 00:12:03.486 A:middle
最后 资源是可以替换的

00:12:03.486 --> 00:12:05.046 A:middle
这样我们就可以重新使用它来

00:12:05.046 --> 00:12:06.456 A:middle
进行其他操作

00:12:06.456 --> 00:12:07.816 A:middle
节省数百兆字节

00:12:08.916 --> 00:12:09.886 A:middle
现在我们已经讨论了

00:12:09.886 --> 00:12:11.866 A:middle
如何通过明确的控制

00:12:11.906 --> 00:12:13.196 A:middle
来进行并行化和优化性能

00:12:13.196 --> 00:12:16.126 A:middle
这非常棒 但是

00:12:16.126 --> 00:12:18.696 A:middle
如果你想让 GPU 更多地进入

00:12:18.696 --> 00:12:19.526 A:middle
参与这个过程呢

00:12:20.936 --> 00:12:25.566 A:middle
那么接下来我们来讨论一下 GPU 驱动的管线

00:12:25.626 --> 00:12:27.356 A:middle
你们的游戏正在将越来

00:12:27.356 --> 00:12:29.816 A:middle
越多的决策逻辑

00:12:30.356 --> 00:12:32.556 A:middle
转移到 GPU 上 尤其是当在

00:12:32.556 --> 00:12:34.036 A:middle
处理包含数千个

00:12:34.036 --> 00:12:36.046 A:middle
对象的超大型数据集

00:12:36.046 --> 00:12:37.556 A:middle
或场景图时

00:12:38.666 --> 00:12:41.376 A:middle
Metal 二代技术使

00:12:41.496 --> 00:12:43.226 A:middle
我们在 GPU 驱动管线

00:12:43.226 --> 00:12:45.236 A:middle
方面又迈出了重要一步

00:12:46.236 --> 00:12:47.506 A:middle
去年 我们引入了

00:12:47.606 --> 00:12:49.086 A:middle
间接参数缓冲区

00:12:49.516 --> 00:12:51.386 A:middle
这可以进一步降低

00:12:51.386 --> 00:12:53.336 A:middle
CPU 使用率 并将大部分

00:12:53.336 --> 00:12:55.166 A:middle
工作量转移到 GPU 上

00:12:56.046 --> 00:12:57.056 A:middle
今年 我们再一次引入了

00:12:57.056 --> 00:12:59.346 A:middle
间接命令缓冲区

00:12:59.346 --> 00:13:02.566 A:middle
这将允许你将

