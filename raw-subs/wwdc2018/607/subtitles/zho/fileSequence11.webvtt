WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.906 --> 00:11:00.856 A:middle
在这个例子中 G 缓冲（G-buffer） 

00:11:00.856 --> 00:11:02.576 A:middle
更新了栅栏 并且

00:11:02.576 --> 00:11:03.766 A:middle
延迟着色等待着它的结果

00:11:04.686 --> 00:11:08.266 A:middle
所以现在 让我们来看一看

00:11:08.266 --> 00:11:09.406 A:middle
如何在你的代码中应用

00:11:09.406 --> 00:11:10.966 A:middle
这些基本概念

00:11:12.856 --> 00:11:15.206 A:middle
我们要做的第一件事

00:11:15.206 --> 00:11:16.006 A:middle
就是将这个

00:11:16.006 --> 00:11:17.456 A:middle
应用到我们的 G 缓冲（G-buffer）和

00:11:17.456 --> 00:11:18.676 A:middle
延迟着色示例中

00:11:19.966 --> 00:11:21.356 A:middle
首先 我们将

00:11:21.356 --> 00:11:23.046 A:middle
从堆中分配我们的

00:11:23.046 --> 00:11:23.436 A:middle
临时渲染目标

00:11:23.806 --> 00:11:24.866 A:middle
这看起来非常像

00:11:24.866 --> 00:11:26.046 A:middle
今天在分配纹理时可能

00:11:26.046 --> 00:11:28.706 A:middle
已经做的事情

00:11:28.846 --> 00:11:31.056 A:middle
接下来 我们将渲染

00:11:31.056 --> 00:11:32.246 A:middle
该临时渲染目标

00:11:33.166 --> 00:11:35.646 A:middle
最后 在分段阶段

00:11:36.316 --> 00:11:38.216 A:middle
完成后更新栅栏

00:11:38.386 --> 00:11:39.526 A:middle
这将确保所有数据

00:11:39.526 --> 00:11:41.656 A:middle
在下一个通道使用它

00:11:41.656 --> 00:11:42.956 A:middle
之前生成

00:11:43.706 --> 00:11:45.876 A:middle
现在 让我们切换到

00:11:45.876 --> 00:11:47.356 A:middle
延迟着色过程

00:11:48.156 --> 00:11:49.936 A:middle
我们将使用

00:11:49.936 --> 00:11:51.346 A:middle
这个临时渲染目标来

00:11:51.346 --> 00:11:52.606 A:middle
计算材质的明暗

00:11:54.836 --> 00:11:56.196 A:middle
然后 我们将等待栅栏

00:11:56.196 --> 00:11:57.986 A:middle
来确保它在我们使用

00:11:58.046 --> 00:11:59.566 A:middle
之前已经生产完成了

