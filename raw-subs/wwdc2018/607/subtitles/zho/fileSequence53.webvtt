WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:59.846 --> 00:53:01.266 A:middle
离线编译你的函数

00:53:01.266 --> 00:53:03.426 A:middle
离线构建你的函数库

00:53:03.476 --> 00:53:04.566 A:middle
并将所有函数提取到

00:53:04.566 --> 00:53:05.326 A:middle
单个函数库中

00:53:05.846 --> 00:53:07.056 A:middle
但是你实在是想

00:53:07.056 --> 00:53:08.656 A:middle
确保在加载时创建所有

00:53:08.656 --> 00:53:09.146 A:middle
管线状态对象

00:53:09.556 --> 00:53:11.346 A:middle
但是如果你不能这样做 你会怎么办

00:53:11.786 --> 00:53:12.966 A:middle
所以对于我们来说

00:53:12.966 --> 00:53:14.086 A:middle
置换矩阵只是一个疯狂的行为

00:53:14.136 --> 00:53:15.516 A:middle
对于我们来说

00:53:15.516 --> 00:53:18.016 A:middle
在加载时 实际创建的方式太多了

00:53:18.076 --> 00:53:20.586 A:middle
我们有多个开发者创作的着色器

00:53:20.586 --> 00:53:22.286 A:middle
数千个着色器

00:53:22.846 --> 00:53:24.306 A:middle
基于阴影级联数量

00:53:24.306 --> 00:53:26.356 A:middle
的多个照明场景等

00:53:26.356 --> 00:53:28.926 A:middle
不同渲染目标格式

00:53:28.926 --> 00:53:30.546 A:middle
MSAA

00:53:30.776 --> 00:53:31.516 A:middle
名单有很长

00:53:32.726 --> 00:53:33.576 A:middle
我们尽可能减少

00:53:33.576 --> 00:53:35.116 A:middle
排列组合的数量

00:53:35.116 --> 00:53:35.776 A:middle
这确实有帮助

00:53:35.776 --> 00:53:37.136 A:middle
有时候动态分支比

00:53:37.136 --> 00:53:38.626 A:middle
创建静态排列表现

00:53:38.626 --> 00:53:42.356 A:middle
更好 但有时候就不行

00:53:42.736 --> 00:53:44.716 A:middle
我们必须要做的是

00:53:44.716 --> 00:53:45.966 A:middle
决定可能需要的

00:53:45.966 --> 00:53:47.186 A:middle
最常见的子集

00:53:47.186 --> 00:53:49.196 A:middle
并且在载入时创建这些子集

00:53:49.566 --> 00:53:50.856 A:middle
我们不试图创造一切

00:53:51.306 --> 00:53:52.576 A:middle
我们实现这一目标

00:53:52.576 --> 00:53:54.116 A:middle
的方式是创建了一个自动化的管线

00:53:54.116 --> 00:53:55.296 A:middle
我们基本上是在环境中

00:53:55.296 --> 00:53:56.716 A:middle
安装了一台摄像机

00:53:56.716 --> 00:53:58.116 A:middle
并记录了所有的

00:53:58.116 --> 00:53:59.286 A:middle
需要实际渲染环境的

00:53:59.286 --> 00:53:59.876 A:middle
管线状态对象

