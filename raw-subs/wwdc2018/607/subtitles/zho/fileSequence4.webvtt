WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.526 --> 00:04:00.036 A:middle
自动进行并行的

00:04:00.036 --> 00:04:01.346 A:middle
作为本节的结尾

00:04:02.606 --> 00:04:04.426 A:middle
我们来举一个典型的

00:04:04.466 --> 00:04:05.726 A:middle
游戏架构的例子

00:04:06.816 --> 00:04:08.486 A:middle
使用经典的单线程

00:04:08.486 --> 00:04:10.026 A:middle
渲染 [ 音质不清晰 ]

00:04:10.156 --> 00:04:13.146 A:middle
你会将图形处理器（GPU）命令和

00:04:13.146 --> 00:04:14.826 A:middle
图形处理器（GPU）执行依次在单个

00:04:14.826 --> 00:04:15.446 A:middle
命令缓冲区内构建

00:04:16.446 --> 00:04:17.596 A:middle
通常情况下 你将会把这个时间

00:04:17.596 --> 00:04:18.995 A:middle
匹配到适合你的

00:04:18.995 --> 00:04:20.266 A:middle
帧时间当中

00:04:21.016 --> 00:04:22.766 A:middle
而且当然 你将得到

00:04:22.766 --> 00:04:24.486 A:middle
最长的延迟时间

00:04:24.486 --> 00:04:26.096 A:middle
由于整个命令缓冲区必须在

00:04:26.096 --> 00:04:28.036 A:middle
图形处理器（GPU）可以使用之前

00:04:28.036 --> 00:04:29.086 A:middle
进行编码

00:04:29.436 --> 00:04:30.586 A:middle
显然 有更好的方法可以来

00:04:30.586 --> 00:04:32.366 A:middle
做到这一点 

00:04:32.366 --> 00:04:34.346 A:middle
所以我们要做的就是

00:04:34.346 --> 00:04:35.976 A:middle
和中央处理器（CPU）一起

00:04:36.056 --> 00:04:36.546 A:middle
进行并行构建

00:04:37.036 --> 00:04:41.766 A:middle
渲染和计算传递

00:04:41.766 --> 00:04:43.156 A:middle
是 Metal 技术中多线程操作

00:04:43.156 --> 00:04:44.146 A:middle
的基本粒度

00:04:45.046 --> 00:04:46.376 A:middle
所有你需要做的

00:04:46.376 --> 00:04:48.616 A:middle
就是创建多个命令缓冲区

00:04:48.616 --> 00:04:50.326 A:middle
并在单独的线程上

00:04:50.326 --> 00:04:51.806 A:middle
分别对不同的通道进行编码

00:04:52.356 --> 00:04:55.226 A:middle
你可以按照任何你希望的顺序

00:04:55.226 --> 00:04:55.806 A:middle
对它们进行编码

00:04:56.236 --> 00:04:57.856 A:middle
最终的执行顺序

00:04:57.856 --> 00:04:59.156 A:middle
取决于它们添加到

00:04:59.156 --> 00:05:00.216 A:middle
命令队列的先后

