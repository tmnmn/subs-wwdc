WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.646 --> 00:25:00.136 A:middle
变换并弯曲成屏幕对齐

00:25:00.526 --> 00:25:01.796 A:middle
的平铺顶点缓冲区

00:25:02.416 --> 00:25:03.766 A:middle
然后这些平铺的

00:25:03.766 --> 00:25:04.886 A:middle
顶点缓冲区 将会存储在系统内存中

00:25:07.606 --> 00:25:08.876 A:middle
现在 每个平铺的顶点缓冲区

00:25:08.876 --> 00:25:10.876 A:middle
将作为碎片阶段的一部分

00:25:10.976 --> 00:25:12.476 A:middle
在传输时完全处理完

00:25:13.606 --> 00:25:15.026 A:middle
这种平铺架构可

00:25:15.026 --> 00:25:16.586 A:middle
以让你的游戏免费获得

00:25:16.586 --> 00:25:18.436 A:middle
2 个主要优化

00:25:19.596 --> 00:25:22.156 A:middle
首先 GPU 在使用快速的

00:25:22.156 --> 00:25:23.306 A:middle
用于传输的内存对任何像素

00:25:23.306 --> 00:25:25.476 A:middle
进行着色之前 对所有图元进行

00:25:25.476 --> 00:25:26.176 A:middle
光栅化处理

00:25:26.846 --> 00:25:28.606 A:middle
这消除了内存的透支

00:25:28.606 --> 00:25:30.386 A:middle
从而提高了性能并

00:25:30.386 --> 00:25:30.756 A:middle
降低了功耗

00:25:32.436 --> 00:25:36.886 A:middle
其次 用更大 更灵活的 Tile 内存

00:25:36.886 --> 00:25:37.726 A:middle
来存储着色片段

00:25:38.366 --> 00:25:39.766 A:middle
混合操作速度很快

00:25:39.766 --> 00:25:40.796 A:middle
这是是由于所有数据都

00:25:40.796 --> 00:25:42.416 A:middle
存储在着色核心旁边用于

00:25:42.416 --> 00:25:42.806 A:middle
传输的内存上

00:25:43.326 --> 00:25:46.096 A:middle
现在 在所有 Tile 内存被

00:25:46.096 --> 00:25:48.266 A:middle
着色之后 每个

00:25:48.266 --> 00:25:50.476 A:middle
Tile 内存仅被写入系统内存一次

00:25:51.216 --> 00:25:52.946 A:middle
这会降低带宽

00:25:52.946 --> 00:25:54.256 A:middle
这同时也会提升你的性能

00:25:54.296 --> 00:25:56.696 A:middle
并降低功耗

00:25:56.826 --> 00:25:59.896 A:middle
现在 这些优化发生在一切之下

