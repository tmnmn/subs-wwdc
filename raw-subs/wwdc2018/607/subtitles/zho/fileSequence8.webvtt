WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.936 --> 00:08:00.166 A:middle
图形处理器（GPU）上获得免费的并

00:08:00.166 --> 00:08:00.786 A:middle
行和异步计算

00:08:01.256 --> 00:08:02.436 A:middle
它是免费的原因是

00:08:02.436 --> 00:08:03.446 A:middle
Metal 技术不需要你

00:08:03.446 --> 00:08:04.486 A:middle
做任何特别的事情

00:08:04.486 --> 00:08:07.366 A:middle
我认为我们都喜欢

00:08:07.366 --> 00:08:09.096 A:middle
在图形处理器（GPU）上获得免费优化

00:08:09.726 --> 00:08:10.896 A:middle
但有时候作为一名

00:08:10.896 --> 00:08:13.346 A:middle
开发人员 你可能需要走得

00:08:13.346 --> 00:08:14.136 A:middle
更远一点

00:08:14.786 --> 00:08:16.506 A:middle
所以对于你代码中最关键的部分

00:08:16.506 --> 00:08:18.286 A:middle
Metal 技术允许你

00:08:18.316 --> 00:08:20.646 A:middle
逐步控制一些更深层次的内容

00:08:21.126 --> 00:08:23.546 A:middle
例如 你可以禁用

00:08:23.546 --> 00:08:25.056 A:middle
自动引用计数并

00:08:25.056 --> 00:08:27.286 A:middle
自己执行以节省中央处理器（CPU）时间

00:08:28.116 --> 00:08:30.266 A:middle
你也可以使用 Metal 堆

00:08:30.626 --> 00:08:33.466 A:middle
来真正低消耗地严格控制分配

00:08:33.956 --> 00:08:36.616 A:middle
并且 Metal 堆可以

00:08:36.616 --> 00:08:39.025 A:middle
由栅栏和事件补充 这可以让你

00:08:39.025 --> 00:08:41.126 A:middle
明确控制图形处理器（GPU）

00:08:41.126 --> 00:08:42.316 A:middle
的并行操作

00:08:44.376 --> 00:08:46.736 A:middle
许多游戏使用

00:08:46.736 --> 00:08:48.906 A:middle
大量的资源 这可能需要花费高昂的代价

00:08:49.476 --> 00:08:51.526 A:middle
分配需要不断和 OS

00:08:51.526 --> 00:08:54.076 A:middle
进行双向沟通 OS 系统必须映射

00:08:54.076 --> 00:08:56.096 A:middle
并初始化每个请求的内存

00:08:56.876 --> 00:08:58.066 A:middle
如果你的游戏使用临时

00:08:58.066 --> 00:08:59.606 A:middle
渲染目标 这些

00:08:59.606 --> 00:09:00.796 A:middle
分配可能发生在

