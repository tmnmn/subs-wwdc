WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.906 --> 00:19:00.286 A:middle
我们设置了一个具有管线状态的着色器

00:19:00.286 --> 00:19:03.396 A:middle
然后为几何和材质设置了

00:19:03.396 --> 00:19:04.976 A:middle
单独的缓冲区

00:19:05.886 --> 00:19:07.646 A:middle
最后 这是你编码一个绘图调用

00:19:07.646 --> 00:19:08.566 A:middle
一个绘图调用的方式

00:19:09.096 --> 00:19:10.126 A:middle
由于 Metal 着色语言

00:19:10.126 --> 00:19:11.826 A:middle
在 GPU 上编码真的变得

00:19:11.996 --> 00:19:13.136 A:middle
非常 非常简单

00:19:13.906 --> 00:19:15.486 A:middle
即使是在计算着色器中

00:19:15.486 --> 00:19:17.146 A:middle
这看起来就像

00:19:17.146 --> 00:19:18.786 A:middle
就像你今天在可能在 CPU 上所做的事一样

00:19:18.786 --> 00:19:21.636 A:middle
现在 我们再看另一个例子

00:19:23.116 --> 00:19:24.336 A:middle
这些是创建 编码和

00:19:24.946 --> 00:19:26.706 A:middle
执行 ICB 所需做的

00:19:26.896 --> 00:19:28.746 A:middle
一些基本工作

00:19:29.956 --> 00:19:32.576 A:middle
你首先填写一个状态描述来创建它

00:19:33.016 --> 00:19:34.646 A:middle
状态描述包含

00:19:34.646 --> 00:19:38.136 A:middle
绘制类型 继承

00:19:38.136 --> 00:19:40.346 A:middle
属性和每层的绑定计数等内容

00:19:40.596 --> 00:19:42.306 A:middle
这描述了间接缓冲区的

00:19:42.306 --> 00:19:43.446 A:middle
行为方式

00:19:44.116 --> 00:19:47.726 A:middle
在对 ICB 进行编码时

00:19:47.726 --> 00:19:49.506 A:middle
你只需创建

00:19:49.506 --> 00:19:50.996 A:middle
计算编码器和调用调度

00:19:50.996 --> 00:19:52.276 A:middle
就像你已经在做的一样

00:19:54.046 --> 00:19:55.786 A:middle
一旦 ICB 被编码

00:19:55.786 --> 00:19:58.116 A:middle
你可以选择是否要优化它

00:19:58.486 --> 00:19:59.786 A:middle
当你决定优化它

00:19:59.886 --> 00:20:01.526 A:middle
你会删除所有的冗余状态

