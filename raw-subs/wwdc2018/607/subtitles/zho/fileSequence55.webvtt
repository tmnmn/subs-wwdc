WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:58.656 --> 00:55:00.606 A:middle
当你有很多

00:55:00.606 --> 00:55:02.746 A:middle
可移动的对象时

00:55:02.866 --> 00:55:05.026 A:middle
有些操作是无法避免的

00:55:05.646 --> 00:55:09.636 A:middle
所以我们对缓冲区所做的

00:55:09.806 --> 00:55:11.276 A:middle
只是使用缓冲区子分配 

00:55:11.276 --> 00:55:13.006 A:middle
基本上是一种不直接分配的策略

00:55:13.346 --> 00:55:14.476 A:middle
首先 我们分配一个大缓冲区

00:55:14.476 --> 00:55:15.996 A:middle
然后我们将大缓冲区

00:55:16.606 --> 00:55:19.146 A:middle
分成小块并重新分配回引擎

00:55:19.146 --> 00:55:20.906 A:middle
以回避始终向 Metal

00:55:20.906 --> 00:55:22.776 A:middle
请求新的缓冲区的操作

00:55:23.056 --> 00:55:24.446 A:middle
而这最终起到了很大的作用

00:55:25.976 --> 00:55:27.636 A:middle
我们还利用可编程混合

00:55:27.636 --> 00:55:30.186 A:middle
来减少解析

00:55:30.186 --> 00:55:31.906 A:middle
和恢复次数

00:55:31.906 --> 00:55:33.786 A:middle
以及我们使用的内存带宽量

00:55:34.356 --> 00:55:36.596 A:middle
具体来说 我们对此的

00:55:36.596 --> 00:55:38.536 A:middle
主要使用场景是任何我们

00:55:38.536 --> 00:55:40.336 A:middle
需要访问场景深度的地方

00:55:40.336 --> 00:55:41.416 A:middle
例如软粒子混合

00:55:41.416 --> 00:55:43.286 A:middle
或投影贴图

00:55:43.286 --> 00:55:45.036 A:middle
我们所做的是在

00:55:45.036 --> 00:55:46.586 A:middle
正向传递期间将线性深度

00:55:46.586 --> 00:55:47.546 A:middle
写入 Alpha 通道

00:55:47.946 --> 00:55:49.126 A:middle
然后 在我们

00:55:49.126 --> 00:55:50.546 A:middle
的贴图和半透明化的过程中

00:55:50.546 --> 00:55:52.246 A:middle
我们需要做的就是

00:55:52.246 --> 00:55:53.266 A:middle
使用可编程混合来

00:55:53.266 --> 00:55:55.146 A:middle
读取该 Alpha 通道

00:55:55.146 --> 00:55:57.796 A:middle
并且可以使用深度信息

00:55:57.916 --> 00:56:00.186 A:middle
而不必将深度缓冲区解析到主内存

