WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.606 --> 00:21:00.006 A:middle
正如你想象的那样

00:21:00.006 --> 00:21:01.966 A:middle
这将会有很多 CPU 上的 API 调用

00:21:02.036 --> 00:21:04.116 A:middle
但是我们在这里使用了

00:21:04.116 --> 00:21:05.106 A:middle
间接命令缓冲区

00:21:05.156 --> 00:21:07.356 A:middle
所以一切都将在 GPU 上编码

00:21:09.276 --> 00:21:10.786 A:middle
我们也会选择

00:21:10.926 --> 00:21:12.926 A:middle
合适的的细节级别

00:21:12.926 --> 00:21:13.906 A:middle
因此 我们可以在

00:21:13.906 --> 00:21:16.676 A:middle
呈现多个对象的同时

00:21:16.676 --> 00:21:19.046 A:middle
也不会增加 CPU 或 GPU 上的花费

00:21:19.736 --> 00:21:20.966 A:middle
在屏幕左边 你可以看到

00:21:20.966 --> 00:21:22.486 A:middle
常规相机的视图

00:21:22.776 --> 00:21:23.906 A:middle
而在屏幕右侧

00:21:23.906 --> 00:21:25.786 A:middle
我们放大了一辆校车

00:21:25.786 --> 00:21:27.916 A:middle
你可以看到细节级别在变化

00:21:29.126 --> 00:21:31.346 A:middle
ICB 使我们能够

00:21:31.346 --> 00:21:32.936 A:middle
推出另一个令人难以置信的

00:21:32.936 --> 00:21:33.746 A:middle
优化方式

00:21:35.886 --> 00:21:37.456 A:middle
我们能够将几何体

00:21:37.456 --> 00:21:39.036 A:middle
分成由几百个

00:21:39.036 --> 00:21:40.356 A:middle
三角形组成的块 并在单独的

00:21:40.356 --> 00:21:42.126 A:middle
计算内核中分析这些块

00:21:43.366 --> 00:21:44.466 A:middle
你可以在屏幕上看到

00:21:44.466 --> 00:21:45.706 A:middle
不同颜色的色块

00:21:47.106 --> 00:21:48.236 A:middle
内核的每个线程都会

00:21:48.236 --> 00:21:49.796 A:middle
确定三角形是否

00:21:49.796 --> 00:21:51.456 A:middle
背对着相机 或者它们

00:21:51.456 --> 00:21:52.696 A:middle
是否被场景中的

00:21:52.696 --> 00:21:54.906 A:middle
其他对象或几何体遮挡

00:21:55.756 --> 00:21:57.566 A:middle
这是真的非常快

00:21:57.566 --> 00:21:58.386 A:middle
因为我们只对一个块

00:21:58.386 --> 00:22:00.526 A:middle
进行计算 而不是每个

