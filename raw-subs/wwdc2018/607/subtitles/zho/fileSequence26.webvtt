WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.456 --> 00:26:01.736 A:middle
你只需在 iOS 上使用 Metal 技术即可

00:26:01.736 --> 00:26:02.306 A:middle
得到它们

00:26:03.106 --> 00:26:04.866 A:middle
但 Metal 技术还可以

00:26:04.866 --> 00:26:06.036 A:middle
通过明确控制 A11 的

00:26:06.036 --> 00:26:07.796 A:middle
Tile 的内存来优化

00:26:07.796 --> 00:26:08.596 A:middle
渲染技术

00:26:09.186 --> 00:26:12.166 A:middle
现在 在 A11 GPU 的

00:26:12.166 --> 00:26:13.866 A:middle
开发过程中 Apple 的硬件

00:26:13.866 --> 00:26:15.346 A:middle
和软件团队分析了

00:26:15.346 --> 00:26:16.946 A:middle
许多重要的现代

00:26:16.946 --> 00:26:17.846 A:middle
渲染技术

00:26:18.696 --> 00:26:20.406 A:middle
我们加速了内存

00:26:20.406 --> 00:26:22.166 A:middle
我们注意到了很多共同的主题

00:26:22.166 --> 00:26:23.476 A:middle
并且我们发现显式控制我们的

00:26:23.476 --> 00:26:26.906 A:middle
Tile 内存 可以为所有的这些内存加速

00:26:27.026 --> 00:26:28.036 A:middle
接下来 我们围绕

00:26:28.036 --> 00:26:29.656 A:middle
这种显式控制的想法

00:26:29.656 --> 00:26:31.416 A:middle
开发了硬件和软件功能

00:26:32.656 --> 00:26:34.976 A:middle
那么现在让我们来谈谈这些功能

00:26:41.656 --> 00:26:42.796 A:middle
可编程的混合让你

00:26:42.796 --> 00:26:43.676 A:middle
可以在着色器中编写

00:26:43.676 --> 00:26:44.976 A:middle
自定义的混合操作

00:26:45.386 --> 00:26:46.686 A:middle
它也是一个可以用来

00:26:46.686 --> 00:26:48.146 A:middle
合并渲染通道的

00:26:48.406 --> 00:26:49.396 A:middle
强大工具 实际上它可以

00:26:49.396 --> 00:26:51.446 A:middle
用于所有的 iOS 的 GPU

00:26:52.136 --> 00:26:53.726 A:middle
图像块（Imageblocks）是 A11 的新增功能

00:26:53.996 --> 00:26:55.046 A:middle
它们通过直接用

00:26:55.046 --> 00:26:56.756 A:middle
着色语言控制

00:26:56.756 --> 00:26:58.116 A:middle
像素布局 可以让你最大限度地

00:26:58.116 --> 00:26:58.936 A:middle
利用 Tile 的内存

00:26:59.466 --> 00:27:02.076 A:middle
Tile 的着色是我们

