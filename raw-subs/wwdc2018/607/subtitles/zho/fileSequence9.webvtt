WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.606 --> 00:09:00.796 A:middle
分配可能发生在

00:09:00.796 --> 00:09:02.866 A:middle
你的框架中间 造成卡顿

00:09:03.726 --> 00:09:05.156 A:middle
资源堆是解决

00:09:05.256 --> 00:09:06.396 A:middle
这个问题的好方法

00:09:07.556 --> 00:09:08.786 A:middle
堆也可以让你提前从

00:09:09.386 --> 00:09:12.196 A:middle
系统中分配大量内存

00:09:12.456 --> 00:09:13.566 A:middle
然后 你就可以在

00:09:13.606 --> 00:09:14.966 A:middle
这些内存上添加或删除纹理

00:09:14.966 --> 00:09:16.546 A:middle
和缓冲区 而无需进行

00:09:16.546 --> 00:09:18.286 A:middle
任何昂贵的双向沟通

00:09:18.836 --> 00:09:20.836 A:middle
因此 从分配

00:09:20.836 --> 00:09:22.996 A:middle
3 种常规纹理的情况开始

00:09:23.866 --> 00:09:25.406 A:middle
Metal 技术通常将这些放到

00:09:25.406 --> 00:09:27.876 A:middle
3 个单独的分配中 但是

00:09:27.986 --> 00:09:29.776 A:middle
将这些全部分配到

00:09:29.776 --> 00:09:31.976 A:middle
单个堆中可以让你

00:09:31.976 --> 00:09:34.396 A:middle
提前在堆创建时执行

00:09:34.396 --> 00:09:35.286 A:middle
所有的内存分配

00:09:35.696 --> 00:09:37.456 A:middle
那么创建纹理

00:09:37.456 --> 00:09:39.296 A:middle
将会变得非常低耗

00:09:40.506 --> 00:09:42.956 A:middle
另外 堆有时可以

00:09:42.956 --> 00:09:44.836 A:middle
通过使分配更紧密

00:09:45.206 --> 00:09:47.286 A:middle
来更有效地使用空间

00:09:48.396 --> 00:09:50.696 A:middle
因此在使用传统模型时

00:09:50.696 --> 00:09:51.886 A:middle
你将取消分配纹理

00:09:52.736 --> 00:09:53.836 A:middle
将页释放回系统

00:09:53.836 --> 00:09:55.836 A:middle
然后重新分配

00:09:56.536 --> 00:09:57.796 A:middle
重新分配将再一次分配

00:09:57.796 --> 00:09:58.976 A:middle
一组新的纹理

00:09:59.476 --> 00:10:02.006 A:middle
通过使用堆 你可以取消分配和

