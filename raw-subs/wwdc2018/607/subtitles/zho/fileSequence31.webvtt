WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.096 --> 00:31:01.016 A:middle
现在 直接控制

00:31:01.016 --> 00:31:02.176 A:middle
像素布局意味着

00:31:02.176 --> 00:31:03.666 A:middle
你现在可以在通道内

00:31:03.666 --> 00:31:04.186 A:middle
更改布局

00:31:04.796 --> 00:31:06.136 A:middle
这使你可以将渲染过程

00:31:06.136 --> 00:31:07.336 A:middle
组合起来 从而消除

00:31:07.336 --> 00:31:08.796 A:middle
系统内存带宽

00:31:08.796 --> 00:31:09.766 A:middle
而这种方式仅凭

00:31:09.766 --> 00:31:11.656 A:middle
可编程混合是无法实现的

00:31:11.656 --> 00:31:12.666 A:middle
让我们来看一个例子

00:31:15.156 --> 00:31:16.966 A:middle
在我们之前的例子中

00:31:16.966 --> 00:31:18.056 A:middle
我们使用可编程混合

00:31:18.056 --> 00:31:19.846 A:middle
来实现单通延迟着色

00:31:20.836 --> 00:31:21.756 A:middle
你也可以使用

00:31:21.756 --> 00:31:23.906 A:middle
图像块实现单通道延迟着色

00:31:25.346 --> 00:31:26.726 A:middle
图像块只存在于 Tile 内存中

00:31:26.726 --> 00:31:27.816 A:middle
所以没有渲染通道附件

00:31:27.816 --> 00:31:28.966 A:middle
需要处理

00:31:29.716 --> 00:31:31.066 A:middle
这不仅是一种

00:31:31.066 --> 00:31:32.406 A:middle
更加自然的表达算法的方式

00:31:32.716 --> 00:31:34.386 A:middle
而且现在你也可以在

00:31:34.386 --> 00:31:35.926 A:middle
完成照明后读取

00:31:35.926 --> 00:31:37.756 A:middle
G 缓冲 然后再重新使用 Tile 的内存

00:31:38.786 --> 00:31:39.996 A:middle
让我们继续

00:31:39.996 --> 00:31:41.396 A:middle
让我们重复使用

00:31:41.396 --> 00:31:43.006 A:middle
Tile 的内存来添加

00:31:43.196 --> 00:31:44.856 A:middle
一个称为多层 Alpha 混合的顺序无关的

00:31:44.896 --> 00:31:46.236 A:middle
透明度技术

00:31:51.466 --> 00:31:52.816 A:middle
多层 Alpha 混合（MLAB）

00:31:52.816 --> 00:31:55.676 A:middle
可维护每个像素

00:31:55.676 --> 00:31:57.896 A:middle
固定大小的半透明片段数组

00:31:58.556 --> 00:32:00.136 A:middle
每个传入的片段按

