WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.487 --> 00:12:05.959 align:start position:27% line:-2
このフェンスは 他の処理に
再利用が可能なので

00:12:06.059 --> 00:12:08.095 align:start position:32% line:-1
メモリを節約できます

00:12:08.829 --> 00:12:14.034 align:start position:30% line:-2
並列処理による最適化の
方法をお話ししました

00:12:15.102 --> 00:12:19.873 align:start position:30% line:-2
しかし GPUをもっと
活用する方法があります

00:12:21.008 --> 00:12:23.844 align:start position:30% line:-1
GPUパイプラインです

00:12:25.546 --> 00:12:30.117 align:start position:27% line:-2
昨今のゲームは
複雑なロジックで動作します

00:12:31.652 --> 00:12:37.958 align:start position:29% line:-2
大量のオブジェクトを扱う
場合はなおさらです

00:12:38.926 --> 00:12:42.963 align:start position:30% line:-2
Metal 2では
新しい重要な一歩として

00:12:43.063 --> 00:12:45.732 align:start position:32% line:-2
GPUパイプラインに
着目しました

00:12:46.099 --> 00:12:49.369 align:start position:25% line:-2
昨年 紹介した
間接アーギュメントバッファは

00:12:49.469 --> 00:12:55.509 align:start position:29% line:-2
CPUの使用率を下げ
GPUの負担も軽減します

00:12:55.943 --> 00:13:00.180 align:start position:29% line:-2
今年 紹介するのは
間接コマンドバッファです

