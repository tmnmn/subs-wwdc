WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.399 --> 00:10:05.973 align:start position:25% line:-2
ヒープなら OSを往復せずに
再割り当てが可能になります

00:10:08.408 --> 00:10:12.713 align:start position:30% line:-2
また 各メモリ領域に
別名を割り当てられます

00:10:14.047 --> 00:10:18.519 align:start position:32% line:-2
レンダーターゲットが
多いときに有用です

00:10:18.619 --> 00:10:22.055 align:start position:32% line:-2
メモリの無用な占有を
防ぐことで

00:10:22.156 --> 00:10:25.826 align:start position:36% line:-2
数百メガバイトを
節約できます

00:10:26.994 --> 00:10:29.730 align:start position:30% line:-2
高速なアロケーションは
利点ですが

00:10:29.830 --> 00:10:33.300 align:start position:36% line:-2
従属性の把握には
計算が必要です

00:10:33.400 --> 00:10:36.670 align:start position:34% line:-2
フレームを見ながら
説明します

00:10:38.672 --> 00:10:43.410 align:start position:23% line:-2
Metalは 個々のリソースを
把握しません

00:10:43.510 --> 00:10:47.014 align:start position:29% line:-2
よって Ｇバッファなどの
パス間の従属性を

00:10:47.114 --> 00:10:50.317 align:start position:29% line:-1
自動で読み書きできません

00:10:51.552 --> 00:10:56.356 align:start position:29% line:-2
そこで フェンスを用いて
データを生成するパスと

00:10:56.456 --> 00:10:58.692 align:start position:29% line:-1
消費するパスを明示します

00:10:58.792 --> 00:11:03.997 align:start position:29% line:-2
この例では Ｇバッファと
遅延シェーディングです

