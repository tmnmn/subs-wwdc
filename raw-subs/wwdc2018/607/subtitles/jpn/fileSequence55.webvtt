WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:59.933 --> 00:55:03.570 align:start position:29% line:-2
移動できるオブジェクトが
多くある場合もあります

00:55:03.670 --> 00:55:05.339 align:start position:29% line:-1
その時は仕方がありません

00:55:05.506 --> 00:55:11.078 align:start position:32% line:-2
そこでバッファの
細分割り当てをします

00:55:11.178 --> 00:55:13.146 align:start position:30% line:-1
割り当て戦略の変更です

00:55:13.247 --> 00:55:16.183 align:start position:27% line:-2
前もって バッファの領域を
多く割り当てておき

00:55:16.283 --> 00:55:18.919 align:start position:27% line:-2
それを細分化してエンジンに
割り当てます

00:55:19.019 --> 00:55:22.256 align:start position:25% line:-2
毎回 Metalにバッファの
リクエストをしないためです

00:55:22.923 --> 00:55:24.758 align:start position:41% line:-1
効率的です

00:55:26.160 --> 00:55:29.129 align:start position:30% line:-2
プログラマブル
ブレンディングを利用し

00:55:29.229 --> 00:55:34.167 align:start position:25% line:-2
リゾルブ リストア コストを
減らすことができます

00:55:34.435 --> 00:55:39.973 align:start position:27% line:-2
特に深度にアクセスする際に
有用です

00:55:40.073 --> 00:55:43.610 align:start position:30% line:-2
ソフトパーティクルの
ブレンディングなどです

00:55:43.844 --> 00:55:46.080 align:start position:29% line:-2
前方パスで
アルファチャンネルに対し

00:55:46.180 --> 00:55:47.781 align:start position:29% line:-1
リニア深度を書き込みます

00:55:47.881 --> 00:55:50.951 align:start position:29% line:-2
転写と透過パスでするのが
アルファチャンネルを

00:55:51.051 --> 00:55:54.087 align:start position:27% line:-2
再び読み込むプログラマブル
ブレンディングです

00:55:54.188 --> 00:55:57.157 align:start position:32% line:-2
メインメモリに対する
深度バッファを

00:55:57.257 --> 00:56:00.460 align:start position:30% line:-2
分割したことがなくても
深度を利用できます

