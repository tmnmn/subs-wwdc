WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:56.163 --> 00:05:00.501 align:start position:32% line:-2
最後に追加した命令は
最後に実行されます

00:05:01.468 --> 00:05:04.605 align:start position:27% line:-1
コードも極めてシンプルです

00:05:07.541 --> 00:05:09.910 align:start position:27% line:-1
ご覧の通り 短いコードです

00:05:10.010 --> 00:05:15.449 align:start position:27% line:-2
最初に コマンドバッファを
キューから取り出します

00:05:16.250 --> 00:05:23.156 align:start position:29% line:-2
次に GPUの実行命令を
キューに入れて定義します

00:05:23.257 --> 00:05:29.163 align:start position:27% line:-2
コマンドバッファの符号化を
待つ必要はありません

00:05:30.330 --> 00:05:35.802 align:start position:27% line:-2
最後に 各スレッドと
呼び出し元関数を作成します

00:05:35.903 --> 00:05:38.372 align:start position:34% line:-1
これだけで完了です

00:05:38.472 --> 00:05:41.642 align:start position:27% line:-1
非常に高速かつシンプルです

00:05:42.209 --> 00:05:46.180 align:start position:34% line:-2
先ほどの図で
別の例を見てみます

00:05:48.148 --> 00:05:52.719 align:start position:29% line:-2
CPUを用いた並列処理は
効果的でしたが

00:05:53.387 --> 00:05:57.124 align:start position:29% line:-2
長いレンダリングパスが
ある場合はどうでしょうか

00:05:58.692 --> 00:06:03.897 align:start position:21% line:-2
Metalは この場合に特化した
並列符号化により

