WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.959 --> 00:31:01.395 align:start position:29% line:-1
ピクセル配列を変更すれば

00:31:01.495 --> 00:31:04.498 align:start position:32% line:-2
パス上のレイアウトも
変わります

00:31:04.865 --> 00:31:07.935 align:start position:30% line:-2
レンダーパスを統合して
バンド幅を減らす方法は

00:31:08.035 --> 00:31:11.038 align:start position:25% line:-2
プログラマブルブレンディング
だけでは不可能でした

00:31:11.538 --> 00:31:13.040 align:start position:38% line:-1
例を見ましょう

00:31:15.609 --> 00:31:18.145 align:start position:30% line:-2
先ほどはプログラマブル
ブレンディングで

00:31:18.245 --> 00:31:20.414 align:start position:32% line:-2
遅延シェーディングを
１パスで実行しました

00:31:20.714 --> 00:31:24.184 align:start position:29% line:-2
これをイメージブロックを
使用して行います

00:31:25.319 --> 00:31:29.223 align:start position:32% line:-2
イメージブロックには
リソースがありません

00:31:29.923 --> 00:31:32.693 align:start position:34% line:-2
アルゴリズムを
そのまま書ける上に

00:31:32.826 --> 00:31:38.098 align:start position:27% line:-2
Ｇバッファを反映したタイル
メモリを再利用できます

00:31:38.699 --> 00:31:44.304 align:start position:30% line:-2
タイルメモリを再利用し
透明処理技術を加えます

00:31:44.404 --> 00:31:46.440 align:start position:27% line:-2
マルチレイヤー
アルファブレンディングです

00:31:51.311 --> 00:31:53.781 align:start position:25% line:-1
この方法はMLABとも呼ばれ

00:31:54.148 --> 00:31:58.218 align:start position:30% line:-2
画素ごとの固定長配列で
透過を行います

00:31:58.519 --> 00:32:01.655 align:start position:27% line:-2
フラグメントは配列の深度で
ソートされます

