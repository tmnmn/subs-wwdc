WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.506 --> 00:28:00.456 A:middle
many-light technique

00:28:00.456 --> 00:28:01.666 A:middle
traditionally implemented using

00:28:01.666 --> 00:28:02.446 A:middle
2 passes.

00:28:03.046 --> 00:28:04.916 A:middle
In the first pass, multiple

00:28:04.916 --> 00:28:05.866 A:middle
attachments are filled with

00:28:05.906 --> 00:28:07.366 A:middle
geometry attributes visible at

00:28:07.366 --> 00:28:09.426 A:middle
each pixel, such as normal,

00:28:09.886 --> 00:28:11.316 A:middle
albedo, and roughness.

00:28:12.136 --> 00:28:13.296 A:middle
And in the second pass,

00:28:13.296 --> 00:28:14.776 A:middle
fragments are shaded by sampling

00:28:14.776 --> 00:28:15.856 A:middle
those G-buffer attachments.

00:28:16.456 --> 00:28:20.396 A:middle
Now, the G-buffers are stored in

00:28:20.396 --> 00:28:21.766 A:middle
the system memory before being

00:28:21.766 --> 00:28:23.146 A:middle
read again in the lighting pass,

00:28:23.686 --> 00:28:24.976 A:middle
and this round trip from tile

00:28:24.976 --> 00:28:26.516 A:middle
memory to system memory and back

00:28:26.516 --> 00:28:28.046 A:middle
again can really bottleneck your

00:28:28.046 --> 00:28:29.546 A:middle
game because the G-buffer track

00:28:29.546 --> 00:28:30.566 A:middle
consumes a large amount of

00:28:30.566 --> 00:28:30.986 A:middle
bandwidth.

00:28:31.566 --> 00:28:33.626 A:middle
Now, programmable blending

00:28:33.626 --> 00:28:35.206 A:middle
instead lets you skip that round

00:28:35.206 --> 00:28:36.646 A:middle
trip to memory by reading the

00:28:36.646 --> 00:28:38.636 A:middle
current pixel's data directly

00:28:38.636 --> 00:28:40.916 A:middle
from tile memory.

00:28:42.586 --> 00:28:43.506 A:middle
This also means that we no

00:28:43.506 --> 00:28:44.666 A:middle
longer need 2 passes.

00:28:44.966 --> 00:28:46.486 A:middle
Our G-buffer fill and lighting

00:28:46.486 --> 00:28:48.096 A:middle
steps are now encoded and

00:28:48.096 --> 00:28:49.796 A:middle
executed in a single render

00:28:49.796 --> 00:28:50.226 A:middle
pass.

00:28:51.536 --> 00:28:52.896 A:middle
It also means that we no longer

00:28:52.896 --> 00:28:54.206 A:middle
need a copy of the G-buffer

00:28:54.206 --> 00:28:55.856 A:middle
attachments in system memory.

00:28:56.376 --> 00:28:59.166 A:middle
And with memory, Metal's

00:28:59.166 --> 00:29:00.216 A:middle
memoryless render target

