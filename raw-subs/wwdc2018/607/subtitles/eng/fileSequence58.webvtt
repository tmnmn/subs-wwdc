WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:59.946 --> 00:58:01.516 A:middle
will get rid of those hitches.

00:58:01.516 --> 00:58:05.016 A:middle
For us, we just, it's, the work

00:58:05.016 --> 00:58:05.976 A:middle
we have in front of us to make

00:58:05.976 --> 00:58:08.226 A:middle
that possible is setting up

00:58:08.276 --> 00:58:09.486 A:middle
precise fencing between the

00:58:09.486 --> 00:58:10.636 A:middle
different passes, right.

00:58:10.986 --> 00:58:13.266 A:middle
So we need to know explicitly if

00:58:13.266 --> 00:58:14.786 A:middle
a resource is being read or

00:58:14.786 --> 00:58:16.146 A:middle
written by a vertex or pixel

00:58:16.146 --> 00:58:18.266 A:middle
shader across different passes,

00:58:18.266 --> 00:58:19.776 A:middle
and it requires some reworking

00:58:19.776 --> 00:58:21.866 A:middle
of some of our renderer to make

00:58:21.866 --> 00:58:22.406 A:middle
that happen.

00:58:22.936 --> 00:58:25.236 A:middle
And of course, continue to push

00:58:25.236 --> 00:58:26.616 A:middle
the high end of graphics on iOS.

00:58:27.456 --> 00:58:29.686 A:middle
Last year at WWDC, we showed

00:58:29.736 --> 00:58:31.106 A:middle
what was possible by bringing

00:58:31.106 --> 00:58:32.436 A:middle
our desktop-class forward

00:58:32.436 --> 00:58:33.966 A:middle
renderer to high-end iOS

00:58:33.966 --> 00:58:35.916 A:middle
devices, and we continue, we

00:58:35.916 --> 00:58:37.126 A:middle
want to continue pushing that

00:58:37.126 --> 00:58:39.656 A:middle
bar on iOS, continuing to bring

00:58:39.656 --> 00:58:43.016 A:middle
desktop-class features to iOS

00:58:43.936 --> 00:58:47.026 A:middle
and looking for opportunities to

00:58:47.026 --> 00:58:49.756 A:middle
unify our desktop renderer with

00:58:49.896 --> 00:58:51.506 A:middle
the iOS renderer.

00:58:52.046 --> 00:58:55.396 A:middle
And with that, I'll hand it back

00:58:55.466 --> 00:58:55.846 A:middle
to Michael.

00:58:57.516 --> 00:58:59.716 A:middle
[ Applause ]

