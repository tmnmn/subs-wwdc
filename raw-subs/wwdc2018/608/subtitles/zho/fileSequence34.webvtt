WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.236 --> 00:34:01.806 A:middle
那么让我们来弄清楚原因

00:34:02.326 --> 00:34:06.696 A:middle
只要根据性能数字

00:34:06.696 --> 00:34:08.456 A:middle
我们来到了这一行

00:34:08.456 --> 00:34:11.196 A:middle
在这儿 我们花了超过一半的

00:34:11.196 --> 00:34:13.235 A:middle
在着色器内时间

00:34:14.016 --> 00:34:15.176 A:middle
再次看看

00:34:15.176 --> 00:34:17.275 A:middle
指令类型

00:34:17.275 --> 00:34:18.755 A:middle
我们能看到同步

00:34:18.755 --> 00:34:21.286 A:middle
花费了很长时间

00:34:21.866 --> 00:34:22.346 A:middle
但是为什么

00:34:26.176 --> 00:34:28.166 A:middle
这儿我们使用了

00:34:28.936 --> 00:34:30.255 A:middle
靠偏移量从色彩纹理中

00:34:30.255 --> 00:34:32.766 A:middle
读取的色彩值

00:34:34.356 --> 00:34:36.045 A:middle
这个偏移量是从这里的

00:34:36.045 --> 00:34:37.085 A:middle
噪声纹理中读取的

00:34:37.406 --> 00:34:39.786 A:middle
那么我们读取了一个相依纹理

00:34:39.906 --> 00:34:42.545 A:middle
直到获得纹理读取后的

00:34:42.545 --> 00:34:44.706 A:middle
数据 GPU 才能处理

00:34:45.106 --> 00:34:47.396 A:middle
那么我们对此可以做些什么呢

00:34:47.846 --> 00:34:50.596 A:middle
好吧 不从噪声纹理中读取

00:34:50.596 --> 00:34:52.536 A:middle
我们反而可以在 GPU 中

00:34:52.536 --> 00:34:55.025 A:middle
直接计算噪声值

00:34:55.886 --> 00:34:59.136 A:middle
我来演示一下

00:34:59.266 --> 00:35:01.226 A:middle
现在更新我的着色器

