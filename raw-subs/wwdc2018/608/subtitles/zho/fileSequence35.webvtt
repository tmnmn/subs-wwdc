WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.266 --> 00:35:01.226 A:middle
现在更新我的着色器

00:35:02.126 --> 00:35:03.806 A:middle
着色器现在被送到

00:35:03.806 --> 00:35:06.286 A:middle
我们编写的设备中了

00:35:06.286 --> 00:35:09.106 A:middle
然后整帧将重新运行

00:35:09.106 --> 00:35:11.106 A:middle
并重新进行性能分析 因为只要改变

00:35:11.106 --> 00:35:12.896 A:middle
一个着色器或一个线程就有可能

00:35:12.896 --> 00:35:15.006 A:middle
影响你整个 GPU 时序

00:35:16.496 --> 00:35:18.926 A:middle
一旦完成 我们来看一下

00:35:20.336 --> 00:35:22.606 A:middle
我们看到 现在在着色器中

00:35:22.796 --> 00:35:24.376 A:middle
只花了 3 毫秒

00:35:24.376 --> 00:35:26.166 A:middle
而原先需要 20 多毫秒

00:35:26.846 --> 00:35:29.866 A:middle
但我们再看看指令类型

00:35:30.586 --> 00:35:35.496 A:middle
这儿能看到我们几乎

00:35:35.496 --> 00:35:37.206 A:middle
完全消除了同步时间

00:35:37.206 --> 00:35:39.116 A:middle
并且保持 GPU

00:35:39.116 --> 00:35:41.256 A:middle
高速运转

00:35:42.526 --> 00:35:44.396 A:middle
总而言之

00:35:44.396 --> 00:35:45.506 A:middle
当你在着色器中发现了瓶颈

00:35:45.506 --> 00:35:47.516 A:middle
每行定时信息会

00:35:47.516 --> 00:35:49.706 A:middle
明确告诉你

00:35:49.706 --> 00:35:51.226 A:middle
问题所在

00:35:51.226 --> 00:35:53.396 A:middle
指令类型帮助你

00:35:53.396 --> 00:35:54.516 A:middle
发现原因

00:35:55.316 --> 00:35:56.146 A:middle
这就是我要介绍的部分

00:35:56.626 --> 00:35:57.576 A:middle
将舞台交还给我的同事 Alp

00:35:58.516 --> 00:36:04.216 A:middle
[ 掌声 ]

