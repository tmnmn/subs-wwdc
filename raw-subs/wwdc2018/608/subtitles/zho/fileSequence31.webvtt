WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.366 --> 00:31:00.136 A:middle
使用健康 溢出

00:31:00.186 --> 00:31:02.026 A:middle
很可能极大增加你的

00:31:02.346 --> 00:31:03.296 A:middle
GPU 预算

00:31:03.526 --> 00:31:07.596 A:middle
你能看到的

00:31:07.596 --> 00:31:08.786 A:middle
另外一个类型是同步

00:31:08.886 --> 00:31:10.786 A:middle
这个类型

00:31:10.786 --> 00:31:12.006 A:middle
很重要

00:31:12.006 --> 00:31:13.696 A:middle
因为你希望着色器

00:31:13.696 --> 00:31:16.246 A:middle
核心忙于运转 而不是

00:31:16.246 --> 00:31:17.396 A:middle
等待同步

00:31:18.266 --> 00:31:20.776 A:middle
在你的着色器代码中

00:31:20.776 --> 00:31:21.826 A:middle
如果正在从纹理 缓冲区中读取数据

00:31:21.826 --> 00:31:24.616 A:middle
或者正在用原子或栅栏

00:31:24.616 --> 00:31:26.886 A:middle
你可能需要暂停

00:31:27.046 --> 00:31:28.286 A:middle
等待同步

00:31:29.576 --> 00:31:32.196 A:middle
我们还能让你看到

00:31:32.196 --> 00:31:36.396 A:middle
内联函数的成本 从着色器中调用

00:31:36.946 --> 00:31:39.286 A:middle
这样你能直接

00:31:39.286 --> 00:31:40.646 A:middle
导向成本最高的

00:31:40.646 --> 00:31:42.706 A:middle
函数 并且开始

00:31:46.326 --> 00:31:47.000 A:middle
优化它 [ 掌声 ]

00:31:48.886 --> 00:31:51.166 A:middle
&gt;&gt; 欢迎来到 Apple 设计的

00:31:51.166 --> 00:31:52.566 A:middle
A11 仿生芯片

00:31:53.056 --> 00:31:54.786 A:middle
我们能提供比以往更好的

00:31:54.786 --> 00:31:55.666 A:middle
性能分析数据

00:31:56.346 --> 00:31:58.256 A:middle
今年我们将介绍

00:31:58.256 --> 00:32:00.456 A:middle
即使在内联函数中

