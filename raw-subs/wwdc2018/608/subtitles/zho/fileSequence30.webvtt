WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.586 --> 00:30:00.676 A:middle
通过一个控制流

00:30:00.676 --> 00:30:02.166 A:middle
并且当我知道你究竟能不能优化

00:30:02.166 --> 00:30:06.196 A:middle
那么这是一个极好的工作流

00:30:06.196 --> 00:30:08.906 A:middle
因此着色器性能分析器能

00:30:08.906 --> 00:30:10.596 A:middle
极大地帮助你优化着色器

00:30:10.596 --> 00:30:13.336 A:middle
但现在我们将它在 A11 做得

00:30:13.336 --> 00:30:17.330 A:middle
更优秀

00:30:18.096 --> 00:30:19.286 A:middle
现在所有的二进制芯片

00:30:19.606 --> 00:30:21.366 A:middle
A11 被完全设计为

00:30:21.366 --> 00:30:23.486 A:middle
GPU 现在我们有硬件支持

00:30:23.486 --> 00:30:24.826 A:middle
让你能够更深入

00:30:24.826 --> 00:30:26.366 A:middle
了解你的着色器

00:30:27.696 --> 00:30:27.816 A:middle
正在做什么

00:30:28.046 --> 00:30:30.126 A:middle
现在有了 A11 你就能通过

00:30:30.126 --> 00:30:32.596 A:middle
图表 看到每行

00:30:32.686 --> 00:30:34.496 A:middle
被执行的成本分析

00:30:35.096 --> 00:30:37.106 A:middle
那么着色器包含不同的

00:30:37.106 --> 00:30:39.706 A:middle
执行单元 如果你重度使用

00:30:39.706 --> 00:30:41.526 A:middle
它们中的一个 很可能

00:30:41.526 --> 00:30:42.716 A:middle
会因此碰上瓶颈

00:30:43.936 --> 00:30:46.096 A:middle
算术逻辑单元和内存

00:30:46.096 --> 00:30:48.456 A:middle
分析能让你看到

00:30:48.926 --> 00:30:50.776 A:middle
在不同执行单元

00:30:50.776 --> 00:30:51.996 A:middle
花费的时间

00:30:53.516 --> 00:30:56.516 A:middle
为了确保精确指令在 A11 中更高效

00:30:56.516 --> 00:30:57.876 A:middle
我们做了很多工作

00:30:58.366 --> 00:31:00.136 A:middle
使用健康 溢出

