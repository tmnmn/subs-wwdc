WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:17:58.306 --> 01:18:00.106 A:middle
非常简单易用的包中

01:18:00.106 --> 01:18:01.336 A:middle
获得高达 10 倍的性能提升

01:18:01.336 --> 01:18:03.336 A:middle
且一切都已针对 iOS

01:18:03.516 --> 01:18:05.376 A:middle
和 macOS 的 GPU 进行了预先优化

01:18:06.186 --> 01:18:07.956 A:middle
只需简单的几行代码

01:18:07.956 --> 01:18:09.216 A:middle
只需简单的几行代码

01:18:09.216 --> 01:18:12.216 A:middle
和许多 GPU 计算操作一样

01:18:12.216 --> 01:18:13.896 A:middle
射线跟踪是一种

01:18:13.896 --> 01:18:15.086 A:middle
能够有效地根据

01:18:15.086 --> 01:18:16.376 A:middle
GPU 的可用性能

01:18:16.376 --> 01:18:18.356 A:middle
达到不同水平效果的操作

01:18:18.356 --> 01:18:20.066 A:middle
所以我们可以借助

01:18:20.066 --> 01:18:21.936 A:middle
Metal 2 对外部 GPU 的支持

01:18:21.936 --> 01:18:23.216 A:middle
来获得更多的性能

01:18:23.216 --> 01:18:25.806 A:middle
你们一定要看一下它的效果

01:18:25.976 --> 01:18:27.076 A:middle
我想邀请 Rav

01:18:27.076 --> 01:18:29.406 A:middle
来做一个快速的演示 Rav

01:18:30.516 --> 01:18:34.016 A:middle
[ 掌声 ]

01:18:34.516 --> 01:18:35.106 A:middle
&gt;&gt; 谢谢 Jeremy

01:18:35.806 --> 01:18:37.716 A:middle
好的 让我们打开这个

01:18:37.716 --> 01:18:39.296 A:middle
Amazon Lumberyard 的小酒馆场景

01:18:39.476 --> 01:18:41.316 A:middle
的射线跟踪渲染

01:18:41.626 --> 01:18:43.536 A:middle
并使用 CPU

01:18:43.536 --> 01:18:44.956 A:middle
来执行相交计算

01:18:45.516 --> 01:18:47.186 A:middle
这个执行在优化后

01:18:47.316 --> 01:18:49.496 A:middle
可以在 iMac Pro 的

01:18:49.496 --> 01:18:50.686 A:middle
所有 10 个内核上运行

01:18:51.776 --> 01:18:52.786 A:middle
我们还添加了一个小的基准测试

01:18:52.786 --> 01:18:54.296 A:middle
对射线跟踪算法

01:18:54.296 --> 01:18:56.116 A:middle
进行 80 次迭代的过程

01:18:56.116 --> 01:18:58.116 A:middle
进行计时

01:18:59.016 --> 01:19:01.016 A:middle
对于这种环境来说

