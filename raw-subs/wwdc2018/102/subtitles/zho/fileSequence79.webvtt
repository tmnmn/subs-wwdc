WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:18:59.016 --> 01:19:01.016 A:middle
对于这种环境来说

01:19:01.016 --> 01:19:03.206 A:middle
这需要进行超过 60 亿次的

01:19:03.206 --> 01:19:04.066 A:middle
相交测试

01:19:04.736 --> 01:19:05.676 A:middle
你们可以看到

01:19:05.676 --> 01:19:09.566 A:middle
我们需要大约 12 秒才能在 CPU 上完成

01:19:09.626 --> 01:19:12.556 A:middle
现在我们使用 iMac Pro 中内置的 GPU 上的

01:19:12.556 --> 01:19:14.286 A:middle
新 Metal 射线-三角形求交器

01:19:14.286 --> 01:19:15.796 A:middle
并将所需的时间

01:19:15.796 --> 01:19:17.506 A:middle
与之前进行比较

01:19:17.686 --> 01:19:19.816 A:middle
你们可以马上看到

01:19:19.816 --> 01:19:21.546 A:middle
速度快了很多

01:19:21.546 --> 01:19:23.926 A:middle
我们只需要 1.3 秒

01:19:23.926 --> 01:19:24.606 A:middle
就能完成同样的工作量

01:19:24.986 --> 01:19:26.256 A:middle
太棒了 我再来做一次

01:19:26.256 --> 01:19:26.646 A:middle
开始

01:19:28.436 --> 01:19:29.266 A:middle
完成了

01:19:30.046 --> 01:19:32.306 A:middle
获得了近乎 10 倍的性能提升

01:19:32.336 --> 01:19:34.836 A:middle
简直令人惊叹

01:19:35.356 --> 01:19:36.816 A:middle
当然 我们并没有就此停止

01:19:36.816 --> 01:19:39.296 A:middle
正如 Jeremy 提到的

01:19:39.296 --> 01:19:40.916 A:middle
射线跟踪非常适合

01:19:40.916 --> 01:19:43.336 A:middle
跨多个 GPU 的并行处理

01:19:43.336 --> 01:19:44.976 A:middle
因此我可以启用一个

01:19:44.976 --> 01:19:46.556 A:middle
已经连接到 iMac Pro 上的外部 GPU

01:19:46.626 --> 01:19:50.006 A:middle
并将渲染时间缩短一半

01:19:50.176 --> 01:19:52.316 A:middle
你们可能注意到我们添加了一条绿线

01:19:52.316 --> 01:19:53.676 A:middle
这是为了能够直观地观察

01:19:53.796 --> 01:19:55.106 A:middle
我们如何在两个

01:19:55.106 --> 01:19:56.326 A:middle
GPU 之间分配工作负载

01:19:56.326 --> 01:19:59.026 A:middle
在这种情况下

01:19:59.026 --> 01:20:00.776 A:middle
每个 GPU 渲染一半的帧

