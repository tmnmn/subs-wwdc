WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:14:58.606 --> 01:15:00.856 A:middle
我今天将着重介绍其中的三个

01:15:01.526 --> 01:15:03.096 A:middle
“GPU-Driven Command Encoding”

01:15:03.416 --> 01:15:04.556 A:middle
“Machine Learning Training Acceleration”

01:15:04.556 --> 01:15:06.576 A:middle
以及 “Ray Tracing”

01:15:07.496 --> 01:15:09.466 A:middle
首先是 GPU 驱动的命令编码

01:15:09.676 --> 01:15:11.606 A:middle
在之前 你们的 App 会使用 CPU

01:15:11.606 --> 01:15:13.536 A:middle
对 GPU 命令进行编码

01:15:13.536 --> 01:15:14.936 A:middle
然后在 GPU 上

01:15:14.936 --> 01:15:16.686 A:middle
执行这些命令

01:15:17.086 --> 01:15:18.196 A:middle
虽然 Metal 可以使

01:15:18.196 --> 01:15:20.326 A:middle
这种编码非常快

01:15:20.326 --> 01:15:21.426 A:middle
但是它仍然会因为

01:15:21.456 --> 01:15:23.086 A:middle
CPU 和 GPU 之间同步的瓶颈

01:15:23.086 --> 01:15:24.246 A:middle
而受到影响

01:15:24.746 --> 01:15:26.506 A:middle
在 iOS 12 和 macOS Mojave 中

01:15:26.506 --> 01:15:28.026 A:middle
你们可以直接在 GPU 上

01:15:28.026 --> 01:15:29.836 A:middle
对这些命令进行编码

01:15:29.836 --> 01:15:32.046 A:middle
从而节省宝贵的 CPU 时间

01:15:32.046 --> 01:15:34.806 A:middle
以供游戏和 App 使用

01:15:35.276 --> 01:15:36.746 A:middle
由于你们使用的是

01:15:36.746 --> 01:15:38.476 A:middle
一个计算着色器

01:15:38.476 --> 01:15:39.886 A:middle
来在 GPU 上处理这些命令

01:15:39.886 --> 01:15:41.016 A:middle
所以你们也可以

01:15:41.016 --> 01:15:42.386 A:middle
并行地构造

01:15:42.386 --> 01:15:44.076 A:middle
大量的命令

01:15:44.076 --> 01:15:47.976 A:middle
从而获得更佳的渲染性能和复杂性

01:15:48.966 --> 01:15:50.876 A:middle
接下来 我想分享

01:15:50.876 --> 01:15:52.526 A:middle
关于 Metal 对机器学习的支持

01:15:52.716 --> 01:15:54.036 A:middle
的最新进展

01:15:54.396 --> 01:15:57.186 A:middle
在 iOS 12 和 macOS Mojave 中

01:15:57.186 --> 01:15:59.936 A:middle
我们为现有的 Metal 性能着色库

01:15:59.936 --> 01:16:01.876 A:middle
增加了大量

