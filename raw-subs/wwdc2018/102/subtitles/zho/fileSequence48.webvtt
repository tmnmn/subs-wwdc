WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.796 --> 00:48:00.846 A:middle
你们可能会问 具体有多棒呢

00:48:01.266 --> 00:48:02.776 A:middle
好吧 我们来看看另一个演示

00:48:03.506 --> 00:48:07.896 A:middle
我们将再次回到我们的太阳系项目

00:48:08.956 --> 00:48:11.986 A:middle
这里我们看到了

00:48:12.056 --> 00:48:13.826 A:middle
我们之前运行的 Mac 测试的测试日志

00:48:14.406 --> 00:48:15.866 A:middle
耗时大约 14 秒

00:48:16.986 --> 00:48:18.016 A:middle
现在让我们用并行测试

00:48:18.016 --> 00:48:19.206 A:middle
来运行它

00:48:19.416 --> 00:48:20.276 A:middle
我将点按并按住工具栏

00:48:20.276 --> 00:48:22.416 A:middle
选择 “Test...(测试)”操作

00:48:23.016 --> 00:48:24.216 A:middle
然后会跳出方案列表

00:48:25.696 --> 00:48:27.266 A:middle
在选项中 我将点按

00:48:27.316 --> 00:48:29.246 A:middle
“Execute in parallel（以并行方式执行）”

00:48:29.246 --> 00:48:31.236 A:middle
点按 “Test（测试）”

00:48:31.236 --> 00:48:32.386 A:middle
然后我们将构建并行测试

00:48:32.386 --> 00:48:33.676 A:middle
如果你们看看

00:48:33.676 --> 00:48:35.246 A:middle
右下角的文件

00:48:35.246 --> 00:48:37.076 A:middle
会发现我们已经启动了测试

00:48:37.076 --> 00:48:38.596 A:middle
我们现在启动了许多不同的进程

00:48:38.596 --> 00:48:39.786 A:middle
每一个都对应一个我们的测试套件

00:48:39.866 --> 00:48:41.746 A:middle
然后收集结果

00:48:42.996 --> 00:48:44.116 A:middle
如果我们看一下测试日志

00:48:44.116 --> 00:48:45.966 A:middle
它的完成速度几乎是

00:48:45.966 --> 00:48:46.646 A:middle
原来的四倍

00:48:47.516 --> 00:48:53.676 A:middle
[ 掌声 ]

00:48:54.176 --> 00:48:55.376 A:middle
由于并行测试对单元测试

00:48:55.376 --> 00:48:57.376 A:middle
非常有效

00:48:57.486 --> 00:48:58.546 A:middle
它对 UI 测试也会非常有效

00:48:59.786 --> 00:49:01.986 A:middle
我将选择 App 的

