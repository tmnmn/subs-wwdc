WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

01:16:58.036 --> 01:17:00.636 A:middle
在物体上反射穿过场景

01:17:00.636 --> 01:17:02.676 A:middle
朝向屏幕

01:17:02.676 --> 01:17:03.686 A:middle
并进入你们的眼睛的过程

01:17:04.326 --> 01:17:05.756 A:middle
并且为了获得越来越高的分辨率

01:17:05.756 --> 01:17:07.126 A:middle
你们需要添加

01:17:07.126 --> 01:17:09.796 A:middle
越来越多的射线

01:17:10.866 --> 01:17:14.206 A:middle
直到达到理想的分辨率

01:17:14.206 --> 01:17:15.486 A:middle
直到达到理想的分辨率

01:17:15.486 --> 01:17:17.626 A:middle
这个简单的 1000 * 1000 的图形

01:17:17.626 --> 01:17:19.776 A:middle
就需要接近 600 万束射线才能生成

01:17:20.756 --> 01:17:22.066 A:middle
每一束射线都必须

01:17:22.066 --> 01:17:23.256 A:middle
经过至少两组

01:17:23.256 --> 01:17:25.726 A:middle
昂贵的数学计算处理

01:17:26.136 --> 01:17:27.496 A:middle
首先 你们需要确定

01:17:27.496 --> 01:17:28.606 A:middle
一条给定的射线是否

01:17:28.606 --> 01:17:30.226 A:middle
与场景中一个特定的三角形相交

01:17:30.576 --> 01:17:31.966 A:middle
其次 你们需要应用

01:17:31.966 --> 01:17:33.266 A:middle
一个依据材料特定的着色器

01:17:33.266 --> 01:17:35.106 A:middle
来生成像素

01:17:35.986 --> 01:17:38.716 A:middle
最初 这两个操作

01:17:38.716 --> 01:17:39.696 A:middle
都是由 CPU 执行的

01:17:39.936 --> 01:17:41.656 A:middle
然而 虽然 GPU 可以

01:17:41.656 --> 01:17:43.336 A:middle
轻松地处理像素阴影

01:17:43.336 --> 01:17:45.036 A:middle
可对 CPU 来说

01:17:45.036 --> 01:17:46.506 A:middle
光线与三角形的相交

01:17:46.506 --> 01:17:47.716 A:middle
本身就是一个很大的瓶颈

01:17:47.716 --> 01:17:49.026 A:middle
并且 要将其有效地移动到 GPU 上

01:17:49.026 --> 01:17:50.386 A:middle
也是一个难题

01:17:51.546 --> 01:17:52.876 A:middle
但是新的 Metal 射线-三角形求交器

01:17:52.876 --> 01:17:55.016 A:middle
为你们解决了这个问题

01:17:55.276 --> 01:17:56.726 A:middle
有了这个新的 API

01:17:56.726 --> 01:17:58.306 A:middle
你们可以在一个

01:17:58.306 --> 01:18:00.106 A:middle
非常简单易用的包中

