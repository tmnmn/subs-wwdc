WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:00.006 --> 00:50:01.116 A:middle
除了更高的可靠性

00:50:01.116 --> 00:50:03.656 A:middle
和稳定性之外

00:50:03.656 --> 00:50:05.916 A:middle
我们还关注总体的构建性能

00:50:06.796 --> 00:50:07.936 A:middle
你们将发现 构建系统现在可以

00:50:07.936 --> 00:50:09.906 A:middle
更快地进行重新构建

00:50:10.136 --> 00:50:11.976 A:middle
更好地处理并行任务 并且使用更少的内存

00:50:11.976 --> 00:50:14.436 A:middle
构建系统现在包含

00:50:14.436 --> 00:50:16.476 A:middle
新的更丰富的诊断信息

00:50:16.646 --> 00:50:17.946 A:middle
以帮助你们调整项目配置

00:50:17.986 --> 00:50:19.516 A:middle
从而实现最佳的

00:50:19.516 --> 00:50:21.026 A:middle
构建性能

00:50:21.446 --> 00:50:23.746 A:middle
让我们继续构建性能的话题

00:50:23.746 --> 00:50:24.956 A:middle
我想谈谈

00:50:24.956 --> 00:50:26.466 A:middle
最新版本的另一个核心组件

00:50:26.466 --> 00:50:29.396 A:middle
Swift 4.2

00:50:29.766 --> 00:50:31.156 A:middle
在过去的一年里

00:50:31.156 --> 00:50:33.016 A:middle
我们对 Swift 项目的编译时间

00:50:33.086 --> 00:50:34.786 A:middle
进行了稳步的改进

00:50:35.936 --> 00:50:37.126 A:middle
我们对一些开放源代码的

00:50:37.126 --> 00:50:39.526 A:middle
iOS App 进行了采样

00:50:39.526 --> 00:50:40.666 A:middle
与旧版本相比

00:50:40.666 --> 00:50:42.776 A:middle
使用 Xcode 10 调试构建版本的性能

00:50:42.776 --> 00:50:46.996 A:middle
通常是之前的两倍

00:50:46.996 --> 00:50:49.566 A:middle
至于发布的构建版本

00:50:49.566 --> 00:50:52.316 A:middle
通过使用新的尺寸优化

00:50:52.316 --> 00:50:54.306 A:middle
代码大小可以最多减少 30%

00:50:54.306 --> 00:50:55.906 A:middle
这对于蜂窝网络下载来说

00:50:55.906 --> 00:50:56.436 A:middle
是一个很好的消息

00:50:57.976 --> 00:51:00.056 A:middle
除此之外

