WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:58.526 --> 00:56:00.196 A:middle
打包在一起

00:56:00.196 --> 00:56:02.566 A:middle
并利用 CPU 和 GPU 的

00:56:02.696 --> 00:56:04.066 A:middle
全部性能进行处理

00:56:05.076 --> 00:56:06.486 A:middle
通过这种技术

00:56:06.486 --> 00:56:07.866 A:middle
以及对其下的

00:56:07.866 --> 00:56:09.036 A:middle
Metal 性能着色器的增强

00:56:09.756 --> 00:56:11.866 A:middle
我们可以在像 Resnet

00:56:11.866 --> 00:56:13.596 A:middle
这样的大型网络上

00:56:13.596 --> 00:56:14.846 A:middle
获得高达 30% 的性能改进

00:56:15.536 --> 00:56:16.826 A:middle
但是如果你们使用的是小型网络

00:56:16.826 --> 00:56:17.806 A:middle
就像在 iOS 上使用的那种

00:56:17.806 --> 00:56:20.316 A:middle
我们观察到的结果是

00:56:20.316 --> 00:56:21.796 A:middle
当使用 MobileNet 运行时

00:56:21.876 --> 00:56:22.906 A:middle
API 会有高达 4 倍的性能改进

00:56:23.646 --> 00:56:25.536 A:middle
我们并没有就此止步

00:56:26.566 --> 00:56:27.806 A:middle
我们想要让模型更小

00:56:27.806 --> 00:56:30.386 A:middle
所以我们现在支持量化

00:56:30.886 --> 00:56:32.806 A:middle
我们使用一个

00:56:32.806 --> 00:56:35.856 A:middle
以 FP32 制式发布的模型

00:56:36.626 --> 00:56:37.866 A:middle
比如这个来自 MobileNet 的例子

00:56:37.866 --> 00:56:40.216 A:middle
将它调整到 Int 8 制式

00:56:40.216 --> 00:56:42.756 A:middle
然后它的大小将成功从 17MB

00:56:42.756 --> 00:56:44.566 A:middle
减少到小于 5MB

00:56:45.546 --> 00:56:46.926 A:middle
这对于与 App 绑定的模型来说

00:56:46.926 --> 00:56:48.636 A:middle
是一个不少的节省

00:56:48.636 --> 00:56:53.676 A:middle
你们可以通过

00:56:54.066 --> 00:56:55.566 A:middle
“Lookup tabel quantization” 等功能

00:56:55.566 --> 00:56:56.646 A:middle
进行进一步的简化

00:56:56.726 --> 00:56:58.616 A:middle
我们还支持许多其他功能

00:56:58.616 --> 00:57:01.146 A:middle
包括对“Custom models（自定义模型）”的支持

