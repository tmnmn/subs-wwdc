WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.185 --> 00:22:01.321 align:start position:25% line:-1
しかし バッチ処理の問題点は

00:22:01.488 --> 00:22:05.926 align:start position:25% line:-2
保存通知を作らないため
扱うのが難しいということです

00:22:06.293 --> 00:22:08.529 align:start position:25% line:-2
再びヒストリートラッキングの
出番です

00:22:08.929 --> 00:22:13.100 align:start position:23% line:-2
永続ヒストリートラッキングでは
バッチ処理を行う際に

00:22:13.200 --> 00:22:16.803 align:start position:21% line:-2
トランザクションを
データベースからフェッチできます

00:22:16.904 --> 00:22:19.239 align:start position:9% line:-1
objectIDNotificationを使い

00:22:19.339 --> 00:22:23.177 align:start position:16% line:-2
保存通知と同機能の
Notificationを生成できます

00:22:23.277 --> 00:22:27.915 align:start position:23% line:-2
こうして アプリケーション内の
フェッチ結果コントローラなどは

00:22:28.115 --> 00:22:30.984 align:start position:27% line:-2
それらの通知を
徐々にアップデートできます

00:22:33.620 --> 00:22:37.925 align:start position:23% line:-2
以上がCore Dataによる
増加するデータの管理方法です

00:22:38.759 --> 00:22:40.761 align:start position:27% line:-1
では実際のワークフローは？

00:22:40.861 --> 00:22:44.932 align:start position:23% line:-2
アプリケーションをビルドしたり
テストしたりする上で

00:22:45.032 --> 00:22:48.001 align:start position:30% line:-2
Core Dataは
どう役立つのでしょう？

00:22:49.136 --> 00:22:52.639 align:start position:30% line:-2
必ず今日から
あなたの助けになります

00:22:53.740 --> 00:22:56.643 align:start position:9% line:-1
NSKeyedArchiverは変化しています

00:22:56.944 --> 00:23:00.914 align:start position:23% line:-2
セキュアコーディングは
プラットフォーム全体に導入され

