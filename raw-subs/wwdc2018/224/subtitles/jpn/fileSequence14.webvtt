WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:01.675 --> 00:14:05.078 align:start position:23% line:-2
しかしアプリケーションによって
その過程は異なり

00:14:05.312 --> 00:14:11.151 align:start position:27% line:-2
顧客体験や作り手の意図とも
密接に関わってきます

00:14:11.952 --> 00:14:15.088 align:start position:29% line:-2
アプリケーションの構造が
複雑になるほど

00:14:15.189 --> 00:14:18.826 align:start position:21% line:-1
カオスを招く危険性が高くなります

00:14:19.259 --> 00:14:25.199 align:start position:20% line:-2
Core Dataで このカオスを
うまくコントロールしましょう

00:14:25.432 --> 00:14:28.101 align:start position:30% line:-1
予測可能な動作を設定し

00:14:28.469 --> 00:14:33.507 align:start position:27% line:-2
顧客体験に応じた
柔軟なコンテナを作るのです

00:14:36.443 --> 00:14:37.644 align:start position:39% line:-1
具体的には？

00:14:38.145 --> 00:14:43.183 align:start position:23% line:-2
メトリクスに関しては
いくつかの切り口が考えられます

00:14:43.283 --> 00:14:46.019 align:start position:27% line:-2
１つ目は
顧客に応じたものであること

00:14:46.253 --> 00:14:49.389 align:start position:27% line:-2
通常は顧客が体験することを
指します

00:14:49.490 --> 00:14:54.128 align:start position:23% line:-2
一貫したインターフェイスや
レスポンシブなスクロールビュー

00:14:56.029 --> 00:14:58.265 align:start position:32% line:-1
楽しさとも関係します

00:14:59.833 --> 00:15:02.803 align:start position:30% line:-2
これらはエンジニアには
捉えにくいため―

