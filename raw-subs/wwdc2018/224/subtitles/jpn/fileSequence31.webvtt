WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.027 --> 00:31:03.831 align:start position:21% line:-2
データ量次第ではテストスイートの
メモリを増大させてしまいます

00:31:07.835 --> 00:31:10.938 align:start position:25% line:-2
ストアファイルをディスク上に
具現化するテストは

00:31:11.038 --> 00:31:13.841 align:start position:23% line:-1
少なくとも１回は実行すべきです

00:31:14.274 --> 00:31:17.344 align:start position:27% line:-2
皆さんがテストスイート用の
ストアを開けない場合

00:31:17.444 --> 00:31:19.746 align:start position:25% line:-2
顧客もそれを開けない可能性が
高いからです

00:31:20.948 --> 00:31:23.851 align:start position:23% line:-2
アプリケーションデリゲート内に
永続コンテナがあるのなら

00:31:23.951 --> 00:31:26.553 align:start position:25% line:-2
コンテナを取り上げ ストアに
直接書き込める―

00:31:26.653 --> 00:31:28.789 align:start position:25% line:-1
テストベースクラスを持てます

00:31:29.189 --> 00:31:32.559 align:start position:23% line:-2
しかしその場合 皆さんが
書き込んでいるストアファイルは

00:31:32.659 --> 00:31:36.797 align:start position:21% line:-2
アプリケーションによって
使用されているため注意が必要です

00:31:36.897 --> 00:31:39.466 align:start position:30% line:-2
もし 個人のデバイスで
テストを実行するなら

00:31:39.566 --> 00:31:43.437 align:start position:23% line:-2
次にアプリケーションを開いた時
その効果が分かるでしょう

00:31:47.441 --> 00:31:51.545 align:start position:20% line:-2
10万件のレコードを７行のコードで
挿入できるとしたら？

00:31:53.747 --> 00:31:57.684 align:start position:23% line:-2
これは練習問題として
あとに取っておくつもりでしたが

00:31:57.785 --> 00:32:00.854 align:start position:21% line:-2
こうしたスキャフォールディングが
可能にするのは

