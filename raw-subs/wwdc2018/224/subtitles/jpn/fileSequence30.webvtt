WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:55.229 --> 00:30:00.234 align:start position:18% line:-2
また Core Dataの機能に関し
仮説を検証する上でも有効です

00:30:00.334 --> 00:30:03.971 align:start position:29% line:-2
よりよい顧客体験のための
手助けとなるのです

00:30:04.271 --> 00:30:08.642 align:start position:16% line:-2
R-treeインデックスは たとえ
インメモリでB-treeをソートしても

00:30:08.742 --> 00:30:12.446 align:start position:34% line:-2
パフォーマンスに
恩恵をもたらします

00:30:14.481 --> 00:30:18.652 align:start position:30% line:-2
テストは動作環境を
把握する上でも大切です

00:30:18.752 --> 00:30:22.589 align:start position:27% line:-2
皆さんが何を求めているかが
分かるからです

00:30:22.689 --> 00:30:26.460 align:start position:25% line:-2
皆さんが顧客のために
どんな動作を望んでいるのかは

00:30:26.560 --> 00:30:28.862 align:start position:29% line:-1
テストで明らかにできます

00:30:29.596 --> 00:30:33.233 align:start position:25% line:-2
これを自力で簡単に行うために
重要なものがあります

00:30:33.700 --> 00:30:37.571 align:start position:25% line:-2
例えば永続コンテナを生成する
ベースクラスなどです

00:30:38.338 --> 00:30:39.706 align:start position:30% line:-1
こちらのベースクラスは

00:30:39.807 --> 00:30:44.044 align:start position:14% line:-2
たまたま永続ストア用の
/dev/nullのURLを使っています

00:30:44.144 --> 00:30:48.015 align:start position:25% line:-2
これによりテストは 小さな
管理オブジェクトのセット上で

00:30:48.115 --> 00:30:50.017 align:start position:30% line:-1
非常に素早く行われます

00:30:50.117 --> 00:30:52.386 align:start position:36% line:-2
全てメモリの中で
行われるからです

00:30:52.653 --> 00:30:57.057 align:start position:23% line:-2
この時 SQLiteは
インメモリストアを実現させます

00:30:57.157 --> 00:30:59.927 align:start position:34% line:-2
非常に効率的ですが
インメモリなので

