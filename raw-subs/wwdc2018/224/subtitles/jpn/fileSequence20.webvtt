WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:56.130 --> 00:20:00.767 align:start position:27% line:-2
ここではポストコンテンツを
少し使っているだけです

00:20:01.135 --> 00:20:04.238 align:start position:27% line:-2
具体的には
たった２つのプロパティです

00:20:04.338 --> 00:20:06.206 align:start position:27% line:-1
imageとtitleです

00:20:07.307 --> 00:20:10.244 align:start position:32% line:-2
エンティティによる
フィルタにとどまらず

00:20:10.344 --> 00:20:14.815 align:start position:9% line:-2
ヒストリーの変更を使い
updatedPropertiesでもフィルタ

00:20:14.915 --> 00:20:19.286 align:start position:29% line:-2
ユーザからも視認できて
ユーザ体験に的を絞った―

00:20:19.386 --> 00:20:22.256 align:start position:23% line:-1
アップデートを実現できるのです

00:20:25.759 --> 00:20:30.797 align:start position:23% line:-2
新たなインタラクションにも
Core Dataは役立ちます

00:20:31.231 --> 00:20:34.735 align:start position:30% line:-2
編集作業の中には
データ量が増えるほどに

00:20:34.835 --> 00:20:37.738 align:start position:32% line:-2
より多くのコストが
かかるものもあります

00:20:38.071 --> 00:20:40.807 align:start position:27% line:-2
シンプルなフォトブラウザを
例に取ります

00:20:41.108 --> 00:20:43.710 align:start position:29% line:-2
アプリケーションの規模が
大きくなるにつれ

00:20:43.811 --> 00:20:48.382 align:start position:23% line:-2
繰り返しのタスクを
より簡単に行いたくなるものです

00:20:48.482 --> 00:20:50.417 align:start position:30% line:-1
例えば複数選択などです

00:20:51.685 --> 00:20:55.189 align:start position:21% line:-2
Core Dataはバッチ処理で
これをサポートできます

00:20:55.889 --> 00:21:02.463 align:start position:23% line:-2
ほんの数行のコードで
写真を選別できるようになります

