WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:55.889 --> 00:21:02.463 align:start position:23% line:-2
ほんの数行のコードで
写真を選別できるようになります

00:21:03.831 --> 00:21:05.866 align:start position:29% line:-1
また コードを１行書けば

00:21:05.966 --> 00:21:09.937 align:start position:27% line:-2
データベースのレコードを
パージもしくは削除できます

00:21:10.571 --> 00:21:13.340 align:start position:29% line:-2
オブジェクトをメモリ上で
フォールトするよりも

00:21:13.440 --> 00:21:15.442 align:start position:27% line:-1
はるかにうまくいく処理です

00:21:15.809 --> 00:21:17.844 align:start position:36% line:-1
例えば削除する際

00:21:17.945 --> 00:21:21.315 align:start position:2% line:-2
NSManagedObject.deleteを呼び出す
従来の方法は

00:21:21.415 --> 00:21:24.718 align:start position:25% line:-2
データベースのレコードの
サイズに合わせて用いられます

00:21:24.818 --> 00:21:28.288 align:start position:27% line:-2
オブジェクトを削除し
メモリがフォールトされると

00:21:28.388 --> 00:21:32.392 align:start position:25% line:-2
コストは増え データベースも
大きくなっていきます

00:21:32.626 --> 00:21:35.929 align:start position:30% line:-2
しかし バッチ処理なら
わずかなメモリの中で

00:21:36.029 --> 00:21:38.065 align:start position:30% line:-1
同じ変化をもたらせます

00:21:38.265 --> 00:21:42.402 align:start position:29% line:-2
そしてデータが増加する時
望む曲線が得られます

00:21:42.503 --> 00:21:46.240 align:start position:29% line:-2
データが大きくなるほど
メモリは少なく済むのです

00:21:46.340 --> 00:21:51.378 align:start position:25% line:-2
1000万行で 従来の
削除時のメモリの７％程度です

00:21:52.446 --> 00:21:56.717 align:start position:30% line:-2
これはリソースの節約に
非常に役立つ手段です

00:21:58.185 --> 00:22:01.321 align:start position:25% line:-1
しかし バッチ処理の問題点は

