WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.212 --> 00:28:02.883 align:start position:12% line:-2
latitudeやlongitudeの中で
機能するインデックスです

00:28:04.718 --> 00:28:08.589 align:start position:23% line:-2
R-treeを選択して
ボックス内のクエリタイプを変更

00:28:09.823 --> 00:28:12.860 align:start position:27% line:-2
するとフェッチ要求上に
述語を加えることができます

00:28:13.126 --> 00:28:16.897 align:start position:30% line:-2
“中国大陸内で起こる
全てのポストを得よ”と

00:28:18.332 --> 00:28:22.336 align:start position:25% line:-2
この述語は セレクト文の中で
関数を使っているため

00:28:22.436 --> 00:28:25.272 align:start position:25% line:-1
少し高度なものになっています

00:28:25.372 --> 00:28:28.976 align:start position:21% line:-2
管理オブジェクトモデル内の
インデックスをヒットするためです

00:28:31.778 --> 00:28:36.016 align:start position:21% line:-2
この述語やインデックスなしに
アプリケーションを実行する場合も

00:28:36.116 --> 00:28:38.519 align:start position:25% line:-1
同じ結果を見ることができます

00:28:38.619 --> 00:28:42.089 align:start position:21% line:-2
そこではタイムスタンプの
インデックスだけがヒットされます

00:28:43.423 --> 00:28:46.527 align:start position:21% line:-2
一方 実行に
新しいインデックスと述語を使う時

00:28:46.627 --> 00:28:49.730 align:start position:16% line:-2
SQLiteは そのインデックスを使い
間にあるコードに対し

00:28:49.830 --> 00:28:53.267 align:start position:29% line:-1
より速い結果を生成します

00:28:54.902 --> 00:28:57.604 align:start position:30% line:-2
ただ タイムスタンプの
インデックスは

00:28:57.704 --> 00:28:59.773 align:start position:34% line:-2
境界を作る述語を
１つも持たないため

00:28:59.873 --> 00:29:02.242 align:start position:32% line:-2
SQLiteはそれを
ソートに使えません

