WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.785 --> 00:32:00.854 align:start position:21% line:-2
こうしたスキャフォールディングが
可能にするのは

00:32:00.954 --> 00:32:04.358 align:start position:25% line:-2
データ回りの不変性を評価する
テストスイートの構築です

00:32:04.958 --> 00:32:08.095 align:start position:25% line:-2
これらのメソッドを
前もってビルドしておくことで

00:32:08.195 --> 00:32:12.966 align:start position:27% line:-2
例えばデータが変化した際も
繰り返し使うことができます

00:32:13.066 --> 00:32:16.470 align:start position:21% line:-2
オブジェクトグラフ用の仕組みや
新しいエッジクラスをビルドしたり

00:32:16.570 --> 00:32:20.174 align:start position:23% line:-2
パフォーマンスなど
バックグラウンドの特定の動作を

00:32:20.607 --> 00:32:22.142 align:start position:30% line:-1
評価したりするためです

00:32:23.710 --> 00:32:28.749 align:start position:16% line:-2
R-treeクエリの性能テストで使った
単体テストのスキャフォールドです

00:32:29.083 --> 00:32:30.651 align:start position:27% line:-1
フェッチのパフォーマンスは

00:32:30.751 --> 00:32:34.188 align:start position:32% line:-2
数行のコードで
確実なものにできます

00:32:34.721 --> 00:32:38.759 align:start position:20% line:-2
Core Dataの特徴や機能間の
トレードオフを評価する上で

00:32:38.859 --> 00:32:41.795 align:start position:21% line:-1
こうしたテストは非常に役立ちます

00:32:45.232 --> 00:32:48.302 align:start position:23% line:-2
この３行のコードが生成するのは
テストで使うための

00:32:48.402 --> 00:32:51.205 align:start position:25% line:-2
新しい管理オブジェクト
コンテキストと コンテナです

00:32:51.638 --> 00:32:54.041 align:start position:32% line:-1
これは極めて重要です

00:32:54.141 --> 00:32:56.910 align:start position:25% line:-2
テストにおけるセットアップと
テアダウンのロジックは

00:32:57.010 --> 00:32:59.413 align:start position:29% line:-2
時にそのパフォーマンスに
影響を及ぼすからです

00:32:59.580 --> 00:33:02.449 align:start position:25% line:-1
自分が今 テストしているのは

