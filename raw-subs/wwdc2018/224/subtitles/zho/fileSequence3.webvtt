WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.946 --> 00:03:00.736 A:middle
只需要按名称引用模型

00:03:00.736 --> 00:03:03.486 A:middle
然后持久化容器将

00:03:03.486 --> 00:03:05.046 A:middle
从主束中加载它 并将它

00:03:05.046 --> 00:03:06.766 A:middle
储存在持久化的位置

00:03:07.306 --> 00:03:10.386 A:middle
这种持久化容器类型

00:03:10.386 --> 00:03:11.926 A:middle
囊括了一整个堆栈以及

00:03:11.926 --> 00:03:13.526 A:middle
共享主队列视图上下文的

00:03:13.526 --> 00:03:15.256 A:middle
便利构造函数和

00:03:15.806 --> 00:03:17.926 A:middle
用于生成

00:03:18.246 --> 00:03:20.286 A:middle
背景语上下文的工厂方法

00:03:20.286 --> 00:03:21.676 A:middle
以及执行后台工作

00:03:22.426 --> 00:03:23.796 A:middle
在我们的 App 扩展的同时

00:03:23.796 --> 00:03:25.366 A:middle
它同样易于操作

00:03:25.776 --> 00:03:27.706 A:middle
举个例子 要将我们的

00:03:27.706 --> 00:03:29.956 A:middle
模型层纳入到它自己的框架中

00:03:30.836 --> 00:03:31.856 A:middle
我们可以通过在 Xcode 里

00:03:31.856 --> 00:03:33.166 A:middle
创建一个新的框架目标然后将

00:03:33.166 --> 00:03:34.116 A:middle
我们的代码移动进去

00:03:34.446 --> 00:03:36.166 A:middle
这都非常简单 但是当我们将

00:03:36.166 --> 00:03:37.116 A:middle
我们的模型移动到新的目标时 

00:03:37.116 --> 00:03:38.836 A:middle
在已构建的产品中

00:03:38.836 --> 00:03:40.836 A:middle
目标从 App 移动到了新的框架

00:03:40.836 --> 00:03:42.736 A:middle
本应如此

00:03:42.736 --> 00:03:43.806 A:middle
但是现在

00:03:43.806 --> 00:03:45.246 A:middle
NSPersistentContainer 不知道 

00:03:45.436 --> 00:03:46.896 A:middle
在哪才能找到我们的模型

00:03:47.476 --> 00:03:48.566 A:middle
这是因为 默认下

00:03:48.566 --> 00:03:49.846 A:middle
它只会检查主束

00:03:50.416 --> 00:03:51.056 A:middle
为什么停在那里呢

00:03:51.806 --> 00:03:53.296 A:middle
因为检索 App 里所有束

00:03:53.296 --> 00:03:54.826 A:middle
会非常缓慢

00:03:54.826 --> 00:03:56.526 A:middle
你不会希望每次

00:03:56.526 --> 00:03:57.816 A:middle
加速堆栈的时候

00:03:57.816 --> 00:03:58.866 A:middle
都花好长时间

