WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.946 --> 00:32:01.306 A:middle
可以帮助你构建一个

00:32:01.306 --> 00:32:02.556 A:middle
测试套件

00:32:02.556 --> 00:32:04.016 A:middle
来评估你的数据的不变性

00:32:04.976 --> 00:32:06.386 A:middle
通过提前构建这些方法

00:32:06.386 --> 00:32:08.496 A:middle
当你的数据变化 或者你意识到 

00:32:08.496 --> 00:32:09.876 A:middle
你的 App 的新用例时

00:32:09.876 --> 00:32:11.626 A:middle
你可以通过迭代

00:32:11.626 --> 00:32:13.486 A:middle
来构建新的边界情况

00:32:13.486 --> 00:32:14.756 A:middle
来为对象图

00:32:14.756 --> 00:32:15.826 A:middle
构建新的结构

00:32:15.826 --> 00:32:17.946 A:middle
或者在内部

00:32:17.946 --> 00:32:19.186 A:middle
评估一些特定功能的行为

00:32:19.186 --> 00:32:21.776 A:middle
例如性能

00:32:22.146 --> 00:32:25.606 A:middle
这是我用来为

00:32:25.606 --> 00:32:26.566 A:middle
R 树查询

00:32:26.566 --> 00:32:28.466 A:middle
构建性能测试的单元测试支架

00:32:29.176 --> 00:32:30.496 A:middle
仅仅在几行代码中

00:32:30.496 --> 00:32:32.456 A:middle
我们可以对 

00:32:32.456 --> 00:32:33.886 A:middle
读取性能很有信心

00:32:34.836 --> 00:32:36.286 A:middle
这些类型的测试

00:32:36.286 --> 00:32:37.466 A:middle
信息量很大

00:32:37.466 --> 00:32:38.996 A:middle
当你尝试去评估

00:32:38.996 --> 00:32:40.386 A:middle
核心数据里

00:32:40.386 --> 00:32:44.896 A:middle
不一样的功能之间的权衡

00:32:45.316 --> 00:32:46.576 A:middle
这三行代码

00:32:46.576 --> 00:32:47.936 A:middle
生成了新的托管对象上下文

00:32:47.936 --> 00:32:49.976 A:middle
以及一个容器

00:32:49.976 --> 00:32:50.946 A:middle
供我们的测试使用

00:32:51.756 --> 00:32:54.206 A:middle
现在这点很重要

00:32:54.206 --> 00:32:55.606 A:middle
主要是因为在测试中

00:32:55.606 --> 00:32:57.786 A:middle
setup 和 teardown 方法的逻辑可以

00:32:57.786 --> 00:32:59.066 A:middle
对性能表现产生影响

00:32:59.696 --> 00:33:01.196 A:middle
所以需要注意分析

