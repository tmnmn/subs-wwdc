WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.506 --> 00:26:00.456 A:middle
几个运行记录

00:26:00.456 --> 00:26:01.356 A:middle
它们象征着

00:26:01.356 --> 00:26:02.526 A:middle
断言函数能够

00:26:02.526 --> 00:26:03.366 A:middle
正确运行

00:26:04.636 --> 00:26:06.076 A:middle
当我们使用 SQL debugging 时

00:26:06.076 --> 00:26:07.456 A:middle
你将可以看到例如

00:26:07.456 --> 00:26:08.656 A:middle
读取请求的选择语句

00:26:08.656 --> 00:26:10.866 A:middle
以及它需要花费多长时间

00:26:11.706 --> 00:26:13.016 A:middle
如果你被设置为第四级

00:26:13.016 --> 00:26:14.766 A:middle
你甚至会得到 explain

00:26:15.026 --> 00:26:16.056 A:middle
向你展示

00:26:16.056 --> 00:26:17.836 A:middle
给定的选择语句的

00:26:18.186 --> 00:26:19.016 A:middle
查询计划

00:26:19.586 --> 00:26:20.936 A:middle
在这里我们能看到

00:26:20.936 --> 00:26:23.786 A:middle
我们的表格视图通过 

00:26:23.786 --> 00:26:25.856 A:middle
表扫描进行筛选

00:26:25.856 --> 00:26:27.866 A:middle
然后按照时间戳的顺序

00:26:27.866 --> 00:26:29.646 A:middle
使用内存中的 B 树

00:26:30.536 --> 00:26:31.876 A:middle
这是个潜在的性能问题

00:26:31.876 --> 00:26:33.766 A:middle
当你在运行你的 App 时

00:26:33.766 --> 00:26:35.006 A:middle
你可以使用这样的

00:26:35.006 --> 00:26:37.116 A:middle
信息来看

00:26:37.116 --> 00:26:38.506 A:middle
你是否做了比你所需要的做的

00:26:38.506 --> 00:26:39.086 A:middle
更多的工作

00:26:40.346 --> 00:26:41.496 A:middle
所以 我们该怎么修正它

00:26:42.946 --> 00:26:45.816 A:middle
事实上我们发现 

00:26:45.816 --> 00:26:46.776 A:middle
SQLite3 可以告诉我们

00:26:47.476 --> 00:26:49.166 A:middle
如果我们打开一个数据库

00:26:49.166 --> 00:26:50.696 A:middle
将我们的 SQL 日志里的选择查询传递给它

00:26:50.696 --> 00:26:52.926 A:middle
我们就能够启动一个

00:26:52.926 --> 00:26:54.616 A:middle
成为 Expert 的模式

00:26:54.616 --> 00:26:56.396 A:middle
它能够对队列进行分析

00:26:56.436 --> 00:26:58.616 A:middle
然后通过创建覆盖索引

00:26:58.616 --> 00:27:00.366 A:middle
给出合适的优化方案

