WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.366 --> 00:11:00.236 A:middle
更多的关于 NSExpression 的内容

00:11:00.266 --> 00:11:01.306 A:middle
你可以去了解一下

00:11:01.306 --> 00:11:03.286 A:middle
功能列表的资料

00:11:03.356 --> 00:11:04.366 A:middle
在核心数据里

00:11:04.366 --> 00:11:07.336 A:middle
很多都受到读取请求的支持

00:11:08.366 --> 00:11:10.586 A:middle
所以通过使用表达式

00:11:10.586 --> 00:11:12.566 A:middle
读取请求可以完成很多事

00:11:12.566 --> 00:11:14.606 A:middle
但是 SQLite 仍旧会在

00:11:14.606 --> 00:11:16.286 A:middle
处理图表时

00:11:16.286 --> 00:11:18.636 A:middle
读取每一个帖子

00:11:19.126 --> 00:11:20.976 A:middle
用图表展示

00:11:20.976 --> 00:11:23.566 A:middle
一个人的发帖数量时运行良好

00:11:23.566 --> 00:11:24.586 A:middle
但是如果我们希望

00:11:24.586 --> 00:11:25.796 A:middle
为更庞大的数据

00:11:25.796 --> 00:11:26.746 A:middle
制作图表呢

00:11:27.086 --> 00:11:28.676 A:middle
如果我们想展示一整年的数据

00:11:28.676 --> 00:11:30.536 A:middle
或者我们的 App 

00:11:30.536 --> 00:11:32.136 A:middle
要开始处理

00:11:32.136 --> 00:11:33.386 A:middle
更大数量级的数据呢

00:11:34.706 --> 00:11:35.686 A:middle
现在 读取请求至少可以

00:11:35.686 --> 00:11:37.566 A:middle
一个一个地

00:11:37.566 --> 00:11:39.226 A:middle
计算 50,000 个帖子

00:11:39.226 --> 00:11:41.956 A:middle
只为显示 30 个点 这不够快

00:11:42.436 --> 00:11:44.076 A:middle
视图与模型之间的不协调

00:11:44.076 --> 00:11:45.436 A:middle
已经到了需要我们

00:11:45.436 --> 00:11:47.596 A:middle
做一些 denormalization 了

00:11:50.226 --> 00:11:52.266 A:middle
denormalization 是当我们

00:11:52.266 --> 00:11:53.596 A:middle
增加冗余的数据副本

00:11:53.596 --> 00:11:55.266 A:middle
或者元数据时

00:11:55.266 --> 00:11:56.556 A:middle
以增加簿记为代价

00:11:56.556 --> 00:11:57.576 A:middle
来提升读取性能

00:11:58.156 --> 00:11:59.546 A:middle
数据库索引就是一个

00:11:59.546 --> 00:12:00.466 A:middle
很好的例子

