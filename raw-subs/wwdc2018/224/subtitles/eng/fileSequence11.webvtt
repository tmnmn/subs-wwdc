WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.366 --> 00:11:00.236 A:middle
what you can do with

00:11:00.266 --> 00:11:01.306 A:middle
NSExpression, check out the

00:11:01.306 --> 00:11:02.626 A:middle
documentation for its list of

00:11:02.626 --> 00:11:03.286 A:middle
functions.

00:11:03.356 --> 00:11:04.366 A:middle
Many of them are supported by

00:11:04.366 --> 00:11:07.336 A:middle
fetch requests in Core Data.

00:11:08.366 --> 00:11:10.586 A:middle
OK. So, fetch requests can

00:11:10.586 --> 00:11:12.566 A:middle
accomplish a lot through the use

00:11:12.566 --> 00:11:14.606 A:middle
of expressions, but SQLite still

00:11:14.606 --> 00:11:16.286 A:middle
reads every one of our posts

00:11:16.286 --> 00:11:17.406 A:middle
through memory when computing

00:11:17.406 --> 00:11:18.636 A:middle
the counts for our graph here.

00:11:19.126 --> 00:11:20.976 A:middle
That works fine for charts

00:11:20.976 --> 00:11:23.566 A:middle
showing the amount of posts

00:11:23.566 --> 00:11:24.586 A:middle
generated by one human in a

00:11:24.586 --> 00:11:25.796 A:middle
month, but what if we want to

00:11:25.796 --> 00:11:26.746 A:middle
chart something bigger?

00:11:27.086 --> 00:11:28.676 A:middle
What if we want to show a whole

00:11:28.676 --> 00:11:30.536 A:middle
year or what if our little app

00:11:30.536 --> 00:11:32.136 A:middle
starts handling orders of

00:11:32.136 --> 00:11:33.386 A:middle
magnitude more data?

00:11:34.706 --> 00:11:35.686 A:middle
Now the fetch request would be

00:11:35.686 --> 00:11:37.566 A:middle
counting at least 50,000 posts

00:11:37.566 --> 00:11:39.226 A:middle
one by one just to show 30 data

00:11:39.226 --> 00:11:41.226 A:middle
points and that's not going to

00:11:41.226 --> 00:11:41.956 A:middle
be fast enough.

00:11:42.436 --> 00:11:44.076 A:middle
The mismatch between our views

00:11:44.076 --> 00:11:45.436 A:middle
and our model has gotten to the

00:11:45.436 --> 00:11:46.316 A:middle
point where we need to start

00:11:46.316 --> 00:11:47.596 A:middle
doing some denormalization.

00:11:50.226 --> 00:11:52.266 A:middle
Denormalization is when we add

00:11:52.266 --> 00:11:53.596 A:middle
redundant copies of data or

00:11:53.596 --> 00:11:55.266 A:middle
metadata to improve read

00:11:55.266 --> 00:11:56.556 A:middle
performance at the expense of

00:11:56.556 --> 00:11:57.576 A:middle
some additional bookkeeping.

00:11:58.156 --> 00:11:59.546 A:middle
Database indexes are a good

00:11:59.546 --> 00:12:00.466 A:middle
example of this.

