WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.460 --> 00:31:03.463 align:middle line:-2
要加快开发的话
就有一些具体事情可做

00:31:03.931 --> 00:31:08.769 align:middle line:-2
比如说你的主app
有若干个业务逻辑类

00:31:08.836 --> 00:31:12.472 align:middle line:-2
很多实用类
还有自定义视图和视图控制器

00:31:12.539 --> 00:31:14.808 align:middle line:-2
这些你可以很容易地
在iMessage app中重用

00:31:15.142 --> 00:31:19.446 align:middle line:-2
你要做的只是添加一个
iMessage app对象

00:31:19.513 --> 00:31:21.381 align:middle line:-1
然后检查这些类

00:31:22.015 --> 00:31:24.685 align:middle line:-2
因此就有了这些类
也可用于iMessage app

00:31:25.185 --> 00:31:31.758 align:middle line:-2
此时 如果说代码并不完美
通过检查一个类

00:31:31.825 --> 00:31:34.728 align:middle line:-1
你或许得拉出该类所表示的

00:31:34.795 --> 00:31:35.863 align:middle line:-1
一大堆其它类

00:31:36.530 --> 00:31:40.667 align:middle line:-2
所以 对于该问题
始终没有完美的办法 我们认为

00:31:40.734 --> 00:31:44.938 align:middle line:-2
如果你的类没有完全封装
这是一个好方法

00:31:45.372 --> 00:31:48.408 align:middle line:-2
对你来说是个好机会
你就能用重构方式

00:31:48.475 --> 00:31:51.712 align:middle line:-1
把特定的业务逻辑类

00:31:51.778 --> 00:31:55.849 align:middle line:-2
放置到自身封装的地方
以后就有更高质量的代码

00:31:56.850 --> 00:31:58.619 align:middle line:-1
那么这是共享核心资源

00:31:58.685 --> 00:32:02.990 align:middle line:-2
确实 你知道 在你的项目中
添加iMessage app目标

