WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.536 --> 00:17:00.966 A:middle
那么 右边是哪里

00:17:01.306 --> 00:17:02.016 A:middle
做对了呢

00:17:02.816 --> 00:17:03.946 A:middle
因为它使用了

00:17:03.946 --> 00:17:04.366 A:middle
被动事件监听器

00:17:04.965 --> 00:17:06.675 A:middle
默认情况下 我们会在

00:17:06.675 --> 00:17:08.366 A:middle
文档 窗口和主体元素上设置启动

00:17:08.366 --> 00:17:10.306 A:middle
被动事件监听器

00:17:10.306 --> 00:17:11.675 A:middle
这样一来 任何的触摸

00:17:11.675 --> 00:17:13.356 A:middle
都会指示浏览器

00:17:13.826 --> 00:17:15.806 A:middle
去继续滚动屏幕

00:17:15.866 --> 00:17:17.836 A:middle
避免因为等待事件监听器完成任务

00:17:17.836 --> 00:17:19.146 A:middle
而被中断

00:17:19.806 --> 00:17:21.445 A:middle
如果你想要把事件监听器的

00:17:21.445 --> 00:17:22.726 A:middle
其他元素也设置为被动

00:17:22.726 --> 00:17:24.546 A:middle
你可以把那些

00:17:24.546 --> 00:17:25.935 A:middle
事件监听器的

00:17:25.935 --> 00:17:27.935 A:middle
被动属性 设置为 “true ”

00:17:28.816 --> 00:17:30.816 A:middle
简单来说

00:17:30.886 --> 00:17:32.576 A:middle
在不阻碍默认事件进行处理的情况下

00:17:32.576 --> 00:17:34.546 A:middle
这个标志告诉浏览器

00:17:34.546 --> 00:17:36.306 A:middle
不要去等待事件监听器完成

00:17:36.306 --> 00:17:37.936 A:middle
并且让用户可以

00:17:38.026 --> 00:17:40.226 A:middle
流畅地滚动屏幕

00:17:40.696 --> 00:17:44.356 A:middle
接下来 我们转向具有

00:17:44.356 --> 00:17:46.546 A:middle
异步图像解码的

00:17:46.546 --> 00:17:47.056 A:middle
异步调用

00:17:47.786 --> 00:17:49.236 A:middle
通常来说 图像都是被

00:17:49.236 --> 00:17:50.456 A:middle
同步解码的

00:17:50.656 --> 00:17:51.976 A:middle
所以 主线程遭到了阻塞

00:17:52.506 --> 00:17:54.656 A:middle
所有的图像都被解码

00:17:54.656 --> 00:17:55.346 A:middle
然后显示出来 

00:17:56.136 --> 00:17:57.796 A:middle
阻塞了主线程

00:17:57.796 --> 00:17:59.486 A:middle
用户的交互也受到阻止

00:17:59.906 --> 00:18:01.356 A:middle
不过 如果使用异步解码

