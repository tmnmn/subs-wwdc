WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.916 --> 00:19:01.176 A:middle
你有两种选择

00:19:01.456 --> 00:19:03.436 A:middle
一 你可以在标记中添加

00:19:03.486 --> 00:19:05.176 A:middle
异步解码的属性

00:19:05.176 --> 00:19:06.136 A:middle
到你的图像元素中去

00:19:06.756 --> 00:19:09.536 A:middle
或者 你可以使用 JavaScript

00:19:09.536 --> 00:19:11.996 A:middle
API 的 HTMLImageElements.decode 方法

00:19:11.996 --> 00:19:13.856 A:middle
它会返回一个提示

00:19:14.106 --> 00:19:15.726 A:middle
让你知道图像在何时

00:19:15.726 --> 00:19:17.756 A:middle
可以被添加到 dom

00:19:17.836 --> 00:19:20.796 A:middle
而不会导致下一帧的解码延迟

00:19:21.306 --> 00:19:24.216 A:middle
下面 继续说

00:19:24.216 --> 00:19:26.336 A:middle
异步调用对于

00:19:26.336 --> 00:19:27.416 A:middle
Beacon API 的支持

00:19:28.266 --> 00:19:29.566 A:middle
我们知道 作为开发人员

00:19:29.566 --> 00:19:31.466 A:middle
你想要在 unload 事件中发送数据

00:19:31.956 --> 00:19:33.936 A:middle
可能是想要追踪外发链接

00:19:34.416 --> 00:19:35.896 A:middle
通常情况下 unload 事件的异步请求

00:19:35.896 --> 00:19:37.766 A:middle
会被忽略掉

00:19:37.906 --> 00:19:38.776 A:middle
于是你不得不使用

00:19:38.776 --> 00:19:40.266 A:middle
同步请求 结果就导致下一个页面

00:19:40.266 --> 00:19:41.816 A:middle
加载失败

00:19:42.756 --> 00:19:44.206 A:middle
不过 我们现在支持

00:19:44.206 --> 00:19:45.066 A:middle
Beacon API

00:19:45.706 --> 00:19:47.086 A:middle
所以只要 Safari 还在运行

00:19:47.086 --> 00:19:48.816 A:middle
你就可以将数据发送到服务器上

00:19:48.816 --> 00:19:50.866 A:middle
然后把它抛在脑后

00:19:50.866 --> 00:19:52.666 A:middle
因为你知道数据一定会被

00:19:52.666 --> 00:19:53.466 A:middle
发送出去的

00:19:53.966 --> 00:19:57.446 A:middle
好了 你们已经听我讲的够多了

00:19:57.926 --> 00:19:59.096 A:middle
我相信你们都想亲眼看看

00:19:59.096 --> 00:20:00.036 A:middle
这些与安全和性能相关的功能

