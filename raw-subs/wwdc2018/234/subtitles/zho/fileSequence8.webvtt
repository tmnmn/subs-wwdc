WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.436 --> 00:08:01.356 A:middle
它可以修改脚本

00:08:01.356 --> 00:08:03.086 A:middle
同时变换你提供给用户的样式

00:08:03.086 --> 00:08:05.026 A:middle
在第三方服务器受到损害的情况下

00:08:06.156 --> 00:08:08.076 A:middle
子资源的完整性将保证

00:08:08.076 --> 00:08:10.936 A:middle
你不会给你的用户 提供受到损坏的脚本

00:08:10.936 --> 00:08:12.076 A:middle
那么 这是如何完成的呢

00:08:12.396 --> 00:08:13.566 A:middle
通过哈希算法

00:08:14.256 --> 00:08:15.626 A:middle
首先 你需要添加一个完整性属性

00:08:15.626 --> 00:08:17.196 A:middle
到一个脚本或者链接元素

00:08:17.196 --> 00:08:18.306 A:middle
在你的标记语言中

00:08:18.826 --> 00:08:20.316 A:middle
这个属性的数值是一个 hash

00:08:20.476 --> 00:08:21.786 A:middle
你使用安全的哈希算法

00:08:21.786 --> 00:08:22.986 A:middle
去创建这个 hash

00:08:23.306 --> 00:08:24.996 A:middle
当一个用户抓取了文件

00:08:25.286 --> 00:08:26.886 A:middle
那么另一个 hash 也就计算了出来

00:08:27.116 --> 00:08:28.456 A:middle
比较这两个 hash

00:08:28.456 --> 00:08:30.096 A:middle
如果它们不相同 则你的脚本

00:08:30.096 --> 00:08:31.106 A:middle
将不能被执行

00:08:31.846 --> 00:08:33.826 A:middle
这一过程确保

00:08:33.826 --> 00:08:35.535 A:middle
脚本在受损的情况下

00:08:35.535 --> 00:08:36.076 A:middle
将不会被执行

00:08:36.456 --> 00:08:38.616 A:middle
除非它们和你预期的相匹配

00:08:38.616 --> 00:08:41.476 A:middle
不然你的脚本将不会被执行

00:08:42.376 --> 00:08:43.726 A:middle
当然 为了保证你不会丢失掉

00:08:43.756 --> 00:08:45.306 A:middle
功能性 你还可以

00:08:45.306 --> 00:08:47.316 A:middle
提供一个回退处理用于重新加载

00:08:47.316 --> 00:08:49.026 A:middle
服务器里面的资源

00:08:49.026 --> 00:08:50.676 A:middle
在第三方服务器脚本

00:08:50.936 --> 00:08:51.896 A:middle
不能执行的前提下

00:08:52.446 --> 00:08:55.516 A:middle
现在 阻止受损的资源

00:08:55.516 --> 00:08:57.636 A:middle
不让它们去执行

00:08:57.816 --> 00:08:58.706 A:middle
就能确保用户的安全

00:08:59.086 --> 00:09:01.816 A:middle
而且 智能跟踪预防法可以保证浏览

