WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.951 --> 00:07:00.821 align:start position:9% line:-2
Developer Publicationsが
掲載しています

00:07:01.788 --> 00:07:04.458 align:start position:43% line:-1
(拍手)

00:07:07.794 --> 00:07:10.764 align:start position:29% line:-1
ここまでWebビューと―

00:07:10.864 --> 00:07:14.067 align:start position:21% line:-1
機能拡張について発表を行いました

00:07:14.168 --> 00:07:18.105 align:start position:30% line:-2
以降は主にWeb開発に
関わる説明です

00:07:18.205 --> 00:07:20.807 align:start position:25% line:-2
まずはSubresource
Integrityです

00:07:21.542 --> 00:07:26.914 align:start position:27% line:-2
デベロッパがコンテンツを
HTTPSで提供した場合―

00:07:27.014 --> 00:07:32.686 align:start position:23% line:-2
第三者サーバからのコンテンツが
含まれる可能性があります

00:07:32.786 --> 00:07:35.389 align:start position:30% line:-1
例えばCDNサーバです

00:07:35.489 --> 00:07:39.593 align:start position:29% line:-2
双方がHTTPS通信なら
安全かも知れません

00:07:39.693 --> 00:07:42.896 align:start position:27% line:-1
データの機密性や整合性を―

00:07:42.996 --> 00:07:45.632 align:start position:34% line:-1
確保できるからです

00:07:45.732 --> 00:07:50.838 align:start position:25% line:-2
しかし第三者が感染していたら
どうなるでしょう？

00:07:50.938 --> 00:07:52.072 align:start position:38% line:-1
あり得る話です

00:07:52.172 --> 00:07:55.909 align:start position:21% line:-1
この場合 感染したサーバに対して

00:07:56.009 --> 00:07:59.313 align:start position:21% line:-1
HTTPSは安全を確保できません

00:07:59.413 --> 00:08:02.749 align:start position:29% line:-2
そのため
改ざんされたスクリプトが

