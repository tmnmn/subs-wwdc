WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.578 --> 00:03:00.247 align:start position:23% line:-1
Swiftなら こんな具合です

00:03:00.814 --> 00:03:04.618 align:start position:23% line:-1
Swift 4では構造体になり

00:03:04.718 --> 00:03:07.721 align:start position:34% line:-2
このように列挙型を
宣言します

00:03:07.821 --> 00:03:14.094 align:start position:21% line:-2
Swift 4.2では昔ながらの
Typealiasを使います

00:03:14.194 --> 00:03:15.262 align:start position:38% line:-1
シンプルですね

00:03:15.896 --> 00:03:17.931 align:start position:32% line:-1
なぜこれをするのか？

00:03:18.031 --> 00:03:20.267 align:start position:32% line:-1
コールサイトの例です

00:03:22.836 --> 00:03:28.275 align:start position:27% line:-2
Swift 4では文字列に
NSImageを使って

00:03:28.375 --> 00:03:29.743 align:start position:34% line:-1
名前を表示できます

00:03:29.843 --> 00:03:34.715 align:start position:23% line:-2
文字列を選び
NSImage.Nameを用い

00:03:34.815 --> 00:03:37.751 align:start position:20% line:-2
さらにNSImage namedと
します

00:03:37.851 --> 00:03:42.689 align:start position:27% line:-2
NSImage.Nameを
繰り返すのは面倒ですね

00:03:42.823 --> 00:03:46.093 align:start position:25% line:-1
次に Swift 4.2です

00:03:46.193 --> 00:03:48.495 align:start position:20% line:-1
NSImage.Nameは重複せず

00:03:48.595 --> 00:03:52.232 align:start position:34% line:-2
より合理的で
ムダが少ないですね

00:03:52.332 --> 00:03:57.171 align:start position:25% line:-2
こちらのTypedefの方が
普遍的な値です

00:03:57.638 --> 00:04:01.108 align:start position:43% line:-1
(拍手)

