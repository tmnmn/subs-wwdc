WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.246 --> 00:23:01.376 A:middle
它们使用核心动画图层

00:23:02.106 --> 00:23:03.326 A:middle
可能比较熟悉

00:23:03.326 --> 00:23:04.456 A:middle
iOS 开发的大家都会觉得

00:23:04.456 --> 00:23:06.156 A:middle
这个听起来似曾相识

00:23:06.156 --> 00:23:07.476 A:middle
但是大家还是

00:23:07.476 --> 00:23:08.416 A:middle
仔细看看这到底有什么不同

00:23:09.186 --> 00:23:11.256 A:middle
比如我们在 UIKit 有一个这样的树形视图

00:23:11.256 --> 00:23:12.596 A:middle
图像和图层的

00:23:12.626 --> 00:23:14.966 A:middle
关系其实是很简单的

00:23:15.306 --> 00:23:17.076 A:middle
每个图像都有一个图层

00:23:17.516 --> 00:23:18.506 A:middle
而且 图像间的父/子

00:23:18.506 --> 00:23:20.196 A:middle
关系也会

00:23:20.196 --> 00:23:21.676 A:middle
体现在图层树形视图中

00:23:22.686 --> 00:23:24.446 A:middle
但是在 AppKit 中 我们创建的

00:23:24.446 --> 00:23:26.696 A:middle
图层树状视图 其实只是一个过程

00:23:26.696 --> 00:23:28.106 A:middle
只是处理视图层次的一个

00:23:28.416 --> 00:23:29.156 A:middle
附带产物

00:23:29.986 --> 00:23:31.856 A:middle
这样的话 我们就可以

00:23:31.856 --> 00:23:33.246 A:middle
在一些情况下

00:23:33.246 --> 00:23:35.436 A:middle
使用一个图层来处理多个视图

00:23:35.806 --> 00:23:37.166 A:middle
这一点很棒

00:23:37.166 --> 00:23:38.036 A:middle
因为这样可以减少系统内存消耗

00:23:38.036 --> 00:23:39.786 A:middle
GPU 内存消耗

00:23:39.786 --> 00:23:41.736 A:middle
也能减少窗口服务器

00:23:41.736 --> 00:23:43.276 A:middle
在显示屏幕时

00:23:43.276 --> 00:23:44.946 A:middle
要处理的请求压力

00:23:45.456 --> 00:23:46.896 A:middle
这里我也想要

00:23:46.896 --> 00:23:48.126 A:middle
特别指出

00:23:48.126 --> 00:23:49.276 A:middle
刚才我提到的这个特性是动态的

00:23:49.276 --> 00:23:51.276 A:middle
基于视图层次配置的

00:23:51.376 --> 00:23:52.966 A:middle
所以 它可以进行实时变化

00:23:53.306 --> 00:23:56.506 A:middle
因此 现在你就不能在图像间

00:23:56.506 --> 00:23:58.006 A:middle
图层间一直使用一种固定的父/子关系

00:23:58.006 --> 00:23:58.946 A:middle
这和过去的 iOS 是不一样的

