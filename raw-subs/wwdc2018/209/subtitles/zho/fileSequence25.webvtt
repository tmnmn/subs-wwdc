WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.536 --> 00:25:00.966 A:middle
这个行得通

00:25:00.966 --> 00:25:03.636 A:middle
NSView 会给你提供很多功能

00:25:03.636 --> 00:25:04.796 A:middle
你不需要每一步

00:25:04.796 --> 00:25:05.276 A:middle
再耗费自己的精力去做

00:25:05.836 --> 00:25:08.526 A:middle
如果你调用 NSView 的创建方法

00:25:08.706 --> 00:25:09.886 A:middle
它就会自动运行

00:25:09.886 --> 00:25:11.056 A:middle
搞定很多事情

00:25:11.056 --> 00:25:12.226 A:middle
保证外观能够很好地

00:25:12.226 --> 00:25:13.056 A:middle
适配动态颜色

00:25:13.336 --> 00:25:15.476 A:middle
也会帮你管理好后备存储器的分辨率

00:25:15.876 --> 00:25:17.156 A:middle
而且 这个和

00:25:17.156 --> 00:25:18.706 A:middle
执行图层方法是一样简便的

00:25:18.986 --> 00:25:19.986 A:middle
所以 我建议大家能够在

00:25:19.986 --> 00:25:21.166 A:middle
图像层面来进行重写

00:25:21.166 --> 00:25:22.516 A:middle
而不是在图层层面进行

00:25:23.626 --> 00:25:25.576 A:middle
在一些情况下

00:25:25.916 --> 00:25:27.606 A:middle
当你在执行 CALayer 的显示模式时

00:25:27.606 --> 00:25:29.016 A:middle
你正在直接更新图层的属性

00:25:29.016 --> 00:25:31.486 A:middle
这样做可能使你觉得更加高效

00:25:31.716 --> 00:25:32.486 A:middle
或者是这样做

00:25:32.486 --> 00:25:33.706 A:middle
能够帮你更好地

00:25:33.706 --> 00:25:35.136 A:middle
实现自己的构想

00:25:35.446 --> 00:25:37.426 A:middle
你仍然可以使用

00:25:37.426 --> 00:25:39.196 A:middle
NSView API

00:25:39.196 --> 00:25:40.806 A:middle
只要使用代理更新图层方法即可

00:25:40.806 --> 00:25:42.106 A:middle
这个和使用 NSView drawRect 方法

00:25:42.106 --> 00:25:43.786 A:middle
得到的效果是一样的

00:25:44.556 --> 00:25:46.756 A:middle
另外 你也可以

00:25:46.756 --> 00:25:48.026 A:middle
在 NSView 中

00:25:48.026 --> 00:25:50.226 A:middle
同步执行图层更新和调用绘画方法

00:25:50.846 --> 00:25:52.256 A:middle
如果你这样操作

00:25:52.256 --> 00:25:53.576 A:middle
当你的图像只有一个图层的话

00:25:53.576 --> 00:25:54.496 A:middle
我们就会使用

00:25:54.496 --> 00:25:55.546 A:middle
可选图层版本

00:25:56.006 --> 00:25:57.296 A:middle
如果你的图像正在和其它合并

00:25:57.296 --> 00:25:58.546 A:middle
以节省内存的话

00:25:58.896 --> 00:26:00.536 A:middle
我们就会使用 drawRect 版本

