WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.926 --> 00:03:03.846 A:middle
在 Swift 4 中 NSImage.Name 作为结构

00:03:03.846 --> 00:03:05.216 A:middle
出现 这个结构就是

00:03:05.216 --> 00:03:07.596 A:middle
你声明字符串枚举的形式

00:03:07.926 --> 00:03:09.886 A:middle
在 Swift 4.2 中 它作为一个 TypeAlias 

00:03:09.886 --> 00:03:12.276 A:middle
一个简单的 古老的

00:03:12.366 --> 00:03:14.936 A:middle
普通 TypeAlias 更加简单

00:03:16.046 --> 00:03:17.726 A:middle
因此 问题就是 为什么我们要如此做呢

00:03:18.136 --> 00:03:19.826 A:middle
让我们来看看一个调用站点的例子

00:03:22.056 --> 00:03:24.786 A:middle
这里在 Swift 4 中 就是你如何提取

00:03:24.826 --> 00:03:26.486 A:middle
一个字符串 使用命名方式在其中

00:03:26.486 --> 00:03:29.606 A:middle
创建一个 NSImage 的操作方式

00:03:29.976 --> 00:03:31.686 A:middle
在这里你可以看到 

00:03:31.686 --> 00:03:32.986 A:middle
你会提取这个字符串

00:03:32.986 --> 00:03:34.936 A:middle
我们正将它转换成 一个 NSImage.Name

00:03:34.936 --> 00:03:36.126 A:middle
再变成 named 在

00:03:36.126 --> 00:03:37.456 A:middle
我们调用 NSImage named 之前

00:03:37.966 --> 00:03:38.796 A:middle
由于这里不得不重复 NSImage.Name 

00:03:38.796 --> 00:03:42.316 A:middle
这种操作并没有特别流线型的体验

00:03:42.956 --> 00:03:44.806 A:middle
现在 由于 Swift 4.2 中的改变

00:03:45.296 --> 00:03:46.206 A:middle
这就是我们需要写入的所有

00:03:46.286 --> 00:03:47.536 A:middle
你无需一定要转换为

00:03:47.536 --> 00:03:49.246 A:middle
NSImage name 这种操作会更顺畅

00:03:49.246 --> 00:03:50.736 A:middle
更清晰一些

00:03:50.846 --> 00:03:51.846 A:middle
也会更少冗杂

00:03:52.426 --> 00:03:53.636 A:middle
因此我们相信这种定义类型

00:03:53.636 --> 00:03:55.976 A:middle
方式对于传递值更为合适

00:03:56.516 --> 00:04:01.126 A:middle
［ 掌声 ］

