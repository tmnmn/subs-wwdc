WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.196 --> 00:11:00.366 A:middle
基本上会允许你

00:11:00.366 --> 00:11:01.286 A:middle
确认什么样的类是你需要的

00:11:01.286 --> 00:11:04.916 A:middle
这样 如果在压缩文件中没有遇到这些

00:11:04.916 --> 00:11:05.766 A:middle
就会成为一个

00:11:05.766 --> 00:11:06.946 A:middle
明显的错误

00:11:08.126 --> 00:11:09.106 A:middle
现在我们处理安全

00:11:09.106 --> 00:11:13.626 A:middle
编码的方式

00:11:13.626 --> 00:11:14.436 A:middle
是将其作为可选功能

00:11:14.906 --> 00:11:16.766 A:middle
但是 我们新的 API 既允许

00:11:16.766 --> 00:11:18.886 A:middle
安全编码作为默认动作

00:11:18.886 --> 00:11:20.376 A:middle
也允许其作为备选项

00:11:20.376 --> 00:11:22.556 A:middle
同时还可支持错误返回提示

00:11:23.076 --> 00:11:24.526 A:middle
我们的压缩和解压

00:11:24.526 --> 00:11:25.836 A:middle
API 会有一些例外

00:11:25.836 --> 00:11:27.576 A:middle
但是当然我们更偏向于错误返回

00:11:27.576 --> 00:11:29.606 A:middle
并且 新 API 激活的错误

00:11:29.606 --> 00:11:31.006 A:middle
返回动作是默认的

00:11:32.296 --> 00:11:34.086 A:middle
因此 我将给你展示 API 

00:11:34.086 --> 00:11:35.616 A:middle
NSKeyedUnarchiver 

00:11:35.616 --> 00:11:36.546 A:middle
因为这是其中最有意思的

00:11:37.126 --> 00:11:38.506 A:middle
这是一个 NSKeyedUnarchiver

00:11:38.886 --> 00:11:39.896 A:middle
其中一个新的方法在里面

00:11:39.976 --> 00:11:40.866 A:middle
它简单地创建了一个

00:11:40.866 --> 00:11:43.296 A:middle
keyedUnarchiver 非常安全地

00:11:43.296 --> 00:11:44.876 A:middle
并且用一种方式返回错误

00:11:45.736 --> 00:11:49.296 A:middle
其他两个新的方法 就是这些简便的 API

00:11:49.296 --> 00:11:51.506 A:middle
unarchivedObject(ofClasses from

00:11:51.756 --> 00:11:53.986 A:middle
和 unarchivedObject(ofClass from 

00:11:54.256 --> 00:11:56.086 A:middle
这些基本上解压了

00:11:56.086 --> 00:11:57.466 A:middle
单一个目标并返回

00:11:57.926 --> 00:11:59.046 A:middle
操作很安全

00:11:59.046 --> 00:12:01.246 A:middle
并且如果遇到问题

