WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:02.456 --> 00:02:06.360 align:start position:23% line:-1
一方で直感に頼っているだけでは

00:02:06.460 --> 00:02:08.262 align:start position:25% line:-1
パフォーマンスは向上しません

00:02:08.362 --> 00:02:13.066 align:start position:29% line:-2
そこで カシアが説明する
コード解析により―

00:02:13.167 --> 00:02:18.005 align:start position:25% line:-2
皆さんの“直感”と“実践”を
結び付けていきます

00:02:18.872 --> 00:02:20.340 align:start position:34% line:-1
では 始めましょう

00:02:20.440 --> 00:02:25.045 align:start position:30% line:-2
まず Apple伝統の
多くのデータと自慢です

00:02:25.512 --> 00:02:29.116 align:start position:41% line:-1
(笑い声)

00:02:29.216 --> 00:02:33.220 align:start position:23% line:-1
今見ているのはベンチマークです

00:02:33.320 --> 00:02:36.924 align:start position:34% line:-2
これを行う上で
第三者のものも含め

00:02:37.024 --> 00:02:39.927 align:start position:27% line:-2
数多くのアプリケーションを
検証しました

00:02:40.027 --> 00:02:43.597 align:start position:30% line:-2
テストケースごとに
発生した問題を切り分け

00:02:43.697 --> 00:02:45.799 align:start position:30% line:-1
測定したものになります

00:02:45.899 --> 00:02:50.337 align:start position:18% line:-2
これは セルフサイジングセルの
UICollectionViewです

00:02:50.437 --> 00:02:54.808 align:start position:32% line:-2
左右で動きが悪い方が
iOS 11です

00:02:57.144 --> 00:03:00.113 align:start position:30% line:-1
違いがお分かりですよね

