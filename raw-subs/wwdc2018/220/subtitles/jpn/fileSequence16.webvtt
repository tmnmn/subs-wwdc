WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.458 --> 00:16:02.396 align:start position:7% line:-2
“setBounds”と“setCenter”を
呼びます

00:16:03.197 --> 00:16:04.965 align:start position:38% line:-1
これで完了です

00:16:05.999 --> 00:16:08.235 align:start position:36% line:-1
少し戻りましょう

00:16:08.335 --> 00:16:11.104 align:start position:23% line:-1
これがレイアウトのプロセスです

00:16:11.205 --> 00:16:13.974 align:start position:29% line:-1
この概念を習得できれば―

00:16:14.074 --> 00:16:19.780 align:start position:29% line:-2
パフォーマンスへの理解が
ずっと高まっていきます

00:16:20.380 --> 00:16:22.683 align:start position:32% line:-1
実際に見てみましょう

00:16:22.783 --> 00:16:27.421 align:start position:27% line:-2
これは 先ほど
私たちが見てきたメソッドで

00:16:27.521 --> 00:16:30.891 align:start position:32% line:-2
制約を無効にしてから
再び有効にしています

00:16:30.991 --> 00:16:34.495 align:start position:29% line:-2
ここで エンジンが
何をしているか見ましょう

00:16:35.562 --> 00:16:36.997 align:start position:43% line:-1
これです

00:16:40.367 --> 00:16:42.402 align:start position:36% line:-1
再び“衝突”です

00:16:42.503 --> 00:16:46.540 align:start position:29% line:-2
複雑なオペレーションでは
ありません

00:16:46.640 --> 00:16:48.408 align:start position:38% line:-1
ただし大量です

00:16:48.742 --> 00:16:52.446 align:start position:23% line:-1
必要のないムダな作業と言えます

00:16:52.613 --> 00:16:57.851 align:start position:30% line:-2
こういったことが
感覚として理解できれば

00:16:57.951 --> 00:17:00.154 align:start position:34% line:-1
失敗を避けられます

