WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.746 --> 00:16:02.076 A:middle
调用 setCenter 和 setBounds

00:16:03.306 --> 00:16:04.606 A:middle
这就是全部过程

00:16:06.146 --> 00:16:07.686 A:middle
那么 我们回顾一下

00:16:07.686 --> 00:16:09.976 A:middle
想一想这就是逐步创建布局的过程

00:16:10.206 --> 00:16:12.716 A:middle
如果你能够尝试吸收它

00:16:12.716 --> 00:16:13.906 A:middle
并找到感觉

00:16:14.166 --> 00:16:17.066 A:middle
你将会对性能期望

00:16:17.066 --> 00:16:19.586 A:middle
有更好地理解

00:16:20.486 --> 00:16:21.896 A:middle
事实上 让我们看看

00:16:21.896 --> 00:16:23.676 A:middle
现在是什么情况 因为现在

00:16:24.196 --> 00:16:26.886 A:middle
当我们看到这里 看着这个方法

00:16:26.886 --> 00:16:29.506 A:middle
也就是我们停用约束

00:16:29.506 --> 00:16:30.736 A:middle
以及重新启用约束的地方

00:16:31.106 --> 00:16:32.346 A:middle
回想一下我们刚才所做的

00:16:32.346 --> 00:16:33.656 A:middle
想一想引擎

00:16:33.656 --> 00:16:34.206 A:middle
将会怎么做

00:16:35.596 --> 00:16:36.626 A:middle
它看起来将是这样

00:16:40.426 --> 00:16:42.136 A:middle
我们称之为流失

00:16:42.556 --> 00:16:45.226 A:middle
它的每一次运行

00:16:45.226 --> 00:16:47.246 A:middle
并不是特别的高消耗 但是它

00:16:47.246 --> 00:16:49.576 A:middle
运行的次数很多

00:16:49.576 --> 00:16:51.086 A:middle
而这是完全不必要的

00:16:51.086 --> 00:16:52.196 A:middle
这部分工作被浪费了

00:16:52.726 --> 00:16:54.456 A:middle
那么如果你可以在心里感觉到

00:16:54.456 --> 00:16:56.336 A:middle
如果你可以真正感觉到

00:16:56.406 --> 00:16:57.636 A:middle
当你这么做时 发生的事情

00:16:58.046 --> 00:17:00.046 A:middle
那么你就能够处于一个很好的状态

