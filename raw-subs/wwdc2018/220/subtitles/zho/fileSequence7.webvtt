WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.366 --> 00:07:00.616 A:middle
它沿着相反方向运行

00:07:00.616 --> 00:07:02.516 A:middle
从窗口向下直到末端

00:07:03.176 --> 00:07:05.886 A:middle
最后 所有视图按需求提取 

00:07:05.886 --> 00:07:07.856 A:middle
差不多就是这样

00:07:08.636 --> 00:07:11.166 A:middle
好的 那么这是为什么呢

00:07:11.166 --> 00:07:12.156 A:middle
它们为什么存在

00:07:13.306 --> 00:07:14.736 A:middle
它们全部具有完全

00:07:14.736 --> 00:07:17.016 A:middle
相同的目的以及完全

00:07:17.056 --> 00:07:18.226 A:middle
平行的方法

00:07:18.646 --> 00:07:20.586 A:middle
这个目的就是防止

00:07:20.846 --> 00:07:23.966 A:middle
工作的浪费 我后面会举例子解释

00:07:24.856 --> 00:07:28.516 A:middle
一个 UI 标签需要

00:07:28.516 --> 00:07:30.346 A:middle
约束来表述

00:07:30.576 --> 00:07:33.466 A:middle
其文本的尺寸 对吗

00:07:34.056 --> 00:07:34.986 A:middle
但是 有很多属性

00:07:34.986 --> 00:07:36.126 A:middle
都与文本尺寸相关

00:07:36.406 --> 00:07:37.426 A:middle
比如有文本本身属性

00:07:37.426 --> 00:07:39.936 A:middle
还有字体 以及

00:07:39.936 --> 00:07:41.356 A:middle
文本尺寸 等等

00:07:41.936 --> 00:07:44.946 A:middle
一种方法是每次这些

00:07:44.946 --> 00:07:47.576 A:middle
属性出现变化时 去重新测量你的文本

00:07:48.556 --> 00:07:52.096 A:middle
但是 那往往效率极低 因为

00:07:52.096 --> 00:07:53.766 A:middle
一般会连续改变多个属性

00:07:54.206 --> 00:07:55.076 A:middle
当你首次设置一个标签时

00:07:55.076 --> 00:07:56.176 A:middle
你可能会

00:07:56.176 --> 00:07:57.306 A:middle
调用一批此类属性设置

00:07:57.306 --> 00:07:58.506 A:middle
那么如果你

00:07:58.506 --> 00:07:59.976 A:middle
每次都重新测量文本

