WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.506 --> 00:08:01.536 A:middle
所有的中间环节就被

00:08:01.536 --> 00:08:02.856 A:middle
浪费了 你事实上只想

00:08:02.856 --> 00:08:03.516 A:middle
在完成后进行测量

00:08:03.816 --> 00:08:05.316 A:middle
那么这就是渲染循环为你做的

00:08:05.876 --> 00:08:07.656 A:middle
这样你只需选择

00:08:08.086 --> 00:08:10.646 A:middle
对于设置的字体调用

00:08:10.646 --> 00:08:13.206 A:middle
setNeedsUpdateConstraints

00:08:13.336 --> 00:08:14.986 A:middle
然后你就可以确保

00:08:15.176 --> 00:08:17.366 A:middle
在设置后更新约束

00:08:17.436 --> 00:08:18.826 A:middle
且在这一帧出现在屏幕上之前完成

00:08:19.816 --> 00:08:20.456 A:middle
这就是它的作用

00:08:21.486 --> 00:08:22.876 A:middle
那么有一些事情

00:08:22.876 --> 00:08:24.386 A:middle
需要了解

00:08:24.386 --> 00:08:26.176 A:middle
第一 它运行次数多

00:08:26.176 --> 00:08:27.626 A:middle
每秒钟 120 帧

00:08:28.406 --> 00:08:30.346 A:middle
第二 它们是平行的

00:08:30.686 --> 00:08:32.696 A:middle
因此你也可以用作直觉判断

00:08:32.726 --> 00:08:33.866 A:middle
如果你觉得你理解了

00:08:33.866 --> 00:08:35.035 A:middle
布局部分的运行

00:08:35.035 --> 00:08:37.506 A:middle
或是有了一些感觉 那么你在思考

00:08:37.506 --> 00:08:39.256 A:middle
更新约束或显示时也是一样

00:08:40.155 --> 00:08:41.746 A:middle
最后一件事就是

00:08:41.746 --> 00:08:43.756 A:middle
它存在的原因是

00:08:43.756 --> 00:08:45.886 A:middle
避免工作浪费

00:08:45.886 --> 00:08:48.036 A:middle
延迟工作 甚至有可能跳过工作 完全跳过

00:08:49.006 --> 00:08:53.316 A:middle
好了 看完这些之后

00:08:53.316 --> 00:08:54.876 A:middle
我们现在可以

00:08:54.876 --> 00:08:56.156 A:middle
分析这一方法的其他部分

00:08:56.896 --> 00:08:59.476 A:middle
可以看到 每一次

00:08:59.476 --> 00:09:01.076 A:middle
调用时 我们都停用

