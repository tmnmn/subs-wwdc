WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.276 --> 00:19:01.106 A:middle
已经是最好的情况了

00:19:01.246 --> 00:19:03.816 A:middle
我想要再次强调一下

00:19:03.816 --> 00:19:05.496 A:middle
之所以它是线性的

00:19:05.496 --> 00:19:06.306 A:middle
是因为它们之间

00:19:06.306 --> 00:19:07.886 A:middle
不存在任何互相依赖性

00:19:08.516 --> 00:19:09.596 A:middle
如果它们之间存在互相依赖性

00:19:10.066 --> 00:19:11.846 A:middle
那么这些等式块

00:19:11.846 --> 00:19:14.106 A:middle
将会被连在一起

00:19:14.106 --> 00:19:15.996 A:middle
将会有更多的

00:19:15.996 --> 00:19:18.096 A:middle
计算需要处理

00:19:18.566 --> 00:19:19.876 A:middle
但也只是使用的时候

00:19:20.396 --> 00:19:22.236 A:middle
当然如果你确实有这样的情况 你知道

00:19:22.236 --> 00:19:23.446 A:middle
如果你手动处理

00:19:23.446 --> 00:19:24.246 A:middle
当然它会比较

00:19:24.246 --> 00:19:25.396 A:middle
消耗性能

00:19:25.396 --> 00:19:27.446 A:middle
你也能想到 因为这件事情更为复杂

00:19:27.546 --> 00:19:29.626 A:middle
这样常见的情况

00:19:29.626 --> 00:19:31.456 A:middle
是我们在 Cocoa 中的目标

00:19:31.456 --> 00:19:32.626 A:middle
即让简单的事情

00:19:32.626 --> 00:19:34.976 A:middle
保持简单 让复杂的事情成为可能

00:19:35.306 --> 00:19:36.476 A:middle
在这一情况下 它们可能

00:19:36.476 --> 00:19:37.176 A:middle
性能消耗会高一点

00:19:37.596 --> 00:19:38.986 A:middle
但是你不必为此消耗性能

00:19:38.986 --> 00:19:41.296 A:middle
如果你不使用的话

00:19:41.296 --> 00:19:44.716 A:middle
事实上 用直觉理解整个引擎的

00:19:44.716 --> 00:19:46.726 A:middle
正确方法就是 你可以把它

00:19:46.726 --> 00:19:49.206 A:middle
想作一个布局的缓存

00:19:49.206 --> 00:19:50.446 A:middle
和一个依赖关系追踪器

00:19:51.296 --> 00:19:52.736 A:middle
它非常有针对性

00:19:52.776 --> 00:19:54.396 A:middle
它了解哪些约束

00:19:54.396 --> 00:19:55.896 A:middle
会影响哪些视图 而当你

00:19:55.896 --> 00:19:58.346 A:middle
做出改变时 它只会更新

00:19:58.346 --> 00:19:59.866 A:middle
需要改变的内容

