WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.546 --> 00:24:00.726 A:middle
是如何工作的 但我会稍微讨论一下

00:24:00.726 --> 00:24:02.006 A:middle
性能特点

00:24:02.056 --> 00:24:03.586 A:middle
我会说的简洁明了

00:24:04.536 --> 00:24:06.746 A:middle
因此你或许想要

00:24:06.746 --> 00:24:07.196 A:middle
看看这个

00:24:07.196 --> 00:24:08.476 A:middle
这是简单的 X 算法

00:24:08.476 --> 00:24:09.526 A:middle
这是实际的事

00:24:09.866 --> 00:24:11.206 A:middle
非常古老

00:24:11.676 --> 00:24:13.186 A:middle
是第二次世界大战期间开发的

00:24:13.576 --> 00:24:17.246 A:middle
甚至早于电脑的出现

00:24:17.416 --> 00:24:19.026 A:middle
事实上 过去有一些人

00:24:19.026 --> 00:24:20.356 A:middle
被称为电脑

00:24:20.356 --> 00:24:21.156 A:middle
就在机器被称为电脑之前

00:24:21.156 --> 00:24:23.016 A:middle
这就是他们所做的事情

00:24:23.486 --> 00:24:25.706 A:middle
他们手动完成计算

00:24:25.856 --> 00:24:27.146 A:middle
这会给你一些关于

00:24:27.146 --> 00:24:28.076 A:middle
性能特点的感觉

00:24:28.316 --> 00:24:29.566 A:middle
如果你手动计算

00:24:29.566 --> 00:24:30.816 A:middle
应该非常快 而且它确实是

00:24:31.126 --> 00:24:33.336 A:middle
这与我们刚才做的事情

00:24:33.336 --> 00:24:34.106 A:middle
几乎是相同的

00:24:34.166 --> 00:24:35.326 A:middle
更多的是替换过程

00:24:35.726 --> 00:24:37.066 A:middle
这就是你进行思考的方式

00:24:38.266 --> 00:24:39.676 A:middle
不管怎么说 你知道

00:24:39.676 --> 00:24:40.986 A:middle
当你使用优先级时

00:24:40.986 --> 00:24:42.116 A:middle
它确实会产生这么多性能消耗

00:24:42.256 --> 00:24:43.146 A:middle
这一点需要注意

00:24:44.226 --> 00:24:46.216 A:middle
好的 除此之外 它与之前相同

00:24:46.616 --> 00:24:50.546 A:middle
这就是我想说的内容

00:24:50.756 --> 00:24:52.556 A:middle
这就是我们试图建立

00:24:52.556 --> 00:24:54.836 A:middle
这种直观的

00:24:54.836 --> 00:24:56.086 A:middle
对于 Auto Layout 的

00:24:56.086 --> 00:24:58.046 A:middle
性能特点的理解

00:24:58.176 --> 00:24:59.746 A:middle
快速地回顾一下我们刚才讨论的内容

