WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.396 --> 00:20:02.976 A:middle
这对于你写代码也有启发

00:20:04.696 --> 00:20:07.306 A:middle
有时候我们看到的一个问题是

00:20:07.306 --> 00:20:08.886 A:middle
有一些人会

00:20:08.886 --> 00:20:11.236 A:middle
费很大劲去避免创建

00:20:11.236 --> 00:20:13.686 A:middle
约束 因为他们

00:20:13.686 --> 00:20:15.546 A:middle
认为这样性能消耗太高

00:20:16.476 --> 00:20:18.296 A:middle
然而 事实上约束很有针对性

00:20:18.526 --> 00:20:19.736 A:middle
只要你创建的

00:20:19.736 --> 00:20:21.866 A:middle
约束能够有效对应

00:20:21.866 --> 00:20:22.746 A:middle
你正在解决的问题

00:20:22.746 --> 00:20:24.456 A:middle
那么 就不太可能发生

00:20:24.456 --> 00:20:25.556 A:middle
更好的情况

00:20:25.556 --> 00:20:26.646 A:middle
如果你试图去回避问题

00:20:26.646 --> 00:20:27.636 A:middle
也不会有更好的性能情况

00:20:28.126 --> 00:20:29.796 A:middle
我们经常看到有些人

00:20:29.796 --> 00:20:31.036 A:middle
进行非常复杂的测量

00:20:31.036 --> 00:20:33.006 A:middle
把问题复杂化

00:20:33.006 --> 00:20:34.406 A:middle
然后试图

00:20:34.406 --> 00:20:35.756 A:middle
获取信息 然后再

00:20:35.756 --> 00:20:37.496 A:middle
返回信息 这样往往

00:20:37.496 --> 00:20:38.986 A:middle
消耗更多 相对

00:20:38.986 --> 00:20:40.126 A:middle
直接表达一个

00:20:40.126 --> 00:20:41.296 A:middle
你所需要的约束而言

00:20:42.606 --> 00:20:45.456 A:middle
这个问题的反面是

00:20:45.456 --> 00:20:47.286 A:middle
有时候我们会看到

00:20:47.716 --> 00:20:49.366 A:middle
像这样的层级

00:20:49.526 --> 00:20:51.006 A:middle
在这样的层级中我们看到

00:20:51.006 --> 00:20:52.356 A:middle
非常多的约束

00:20:52.356 --> 00:20:54.456 A:middle
以及非常多的优先级 以至于

00:20:54.456 --> 00:20:56.176 A:middle
过程很不清晰

00:20:56.176 --> 00:20:58.146 A:middle
通常这种情况

00:20:58.146 --> 00:21:00.466 A:middle
表示事实上

