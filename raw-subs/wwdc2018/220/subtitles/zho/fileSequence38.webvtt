WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.816 --> 00:38:00.576 A:middle
管理其子视图的视图中提取帧信息

00:38:01.876 --> 00:38:03.616 A:middle
不是很常用 但是

00:38:03.616 --> 00:38:05.306 A:middle
确实可以这么使用

00:38:05.696 --> 00:38:07.346 A:middle
我想要告诉你们这个方法

00:38:07.346 --> 00:38:09.096 A:middle
如何运行 因为它可能

00:38:09.096 --> 00:38:10.306 A:middle
比你们认为的消耗更高一些

00:38:11.736 --> 00:38:13.046 A:middle
当你调用 systemLayoutSizeFittingSize 时

00:38:13.046 --> 00:38:15.386 A:middle
会创建一个引擎

00:38:16.086 --> 00:38:17.006 A:middle
约束被加入这个该引擎

00:38:17.006 --> 00:38:18.886 A:middle
计算布局

00:38:19.536 --> 00:38:23.546 A:middle
然后返回顶部视图的帧尺寸

00:38:23.546 --> 00:38:24.666 A:middle
之后此引擎被废弃

00:38:25.706 --> 00:38:26.646 A:middle
所以每次你调用

00:38:26.646 --> 00:38:27.916 A:middle
这个方法都会

00:38:27.916 --> 00:38:28.946 A:middle
创建然后废弃一个引擎

00:38:29.856 --> 00:38:31.386 A:middle
尽管对于小规模使用没问题

00:38:31.386 --> 00:38:33.006 A:middle
如果你多次使用

00:38:33.286 --> 00:38:34.306 A:middle
你可以看到它会

00:38:34.306 --> 00:38:35.486 A:middle
随着时间的流逝而堆积

00:38:35.706 --> 00:38:37.336 A:middle
因此谨慎使用

00:38:37.336 --> 00:38:38.616 A:middle
systemLayoutSizeFittingSize

00:38:39.636 --> 00:38:41.486 A:middle
其中的一个做法是

00:38:41.486 --> 00:38:42.956 A:middle
有时候看到有些人会

00:38:42.996 --> 00:38:44.646 A:middle
将这一调用从

00:38:44.646 --> 00:38:45.886 A:middle
自动调整选项或

00:38:45.886 --> 00:38:47.636 A:middle
表格视图单元格转到内容视图中

00:38:47.896 --> 00:38:49.186 A:middle
当你这么做时

00:38:49.186 --> 00:38:50.326 A:middle
你事实上在覆写一些

00:38:50.326 --> 00:38:51.886 A:middle
我们刚才做出的优化

00:38:51.886 --> 00:38:53.026 A:middle
让该视图滑动

00:38:53.026 --> 00:38:54.716 A:middle
更快的设置

00:38:54.716 --> 00:38:55.706 A:middle
并且还添加了多余的引擎

00:38:56.026 --> 00:38:57.086 A:middle
因此如果你目前这么做了

00:38:57.086 --> 00:38:58.106 A:middle
并且你的滑动不顺滑

00:38:58.106 --> 00:38:59.946 A:middle
你可以试着解决问题

