WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.836 --> 00:24:02.326 A:middle
然后试图盗取该用户的 Cookie

00:24:02.776 --> 00:24:04.376 A:middle
但请记住 这些脚本

00:24:04.376 --> 00:24:05.726 A:middle
正在全力运行

00:24:05.726 --> 00:24:07.586 A:middle
它们可以接管你整个

00:24:07.716 --> 00:24:09.536 A:middle
用户界面 代表受害者

00:24:09.536 --> 00:24:10.916 A:middle
向你发出请求

00:24:11.916 --> 00:24:13.366 A:middle
比如说 跨站点脚本

00:24:13.366 --> 00:24:15.506 A:middle
就是一个反映不良情况的例子

00:24:15.506 --> 00:24:16.836 A:middle
你不会希望这发生在自己身上

00:24:17.846 --> 00:24:19.976 A:middle
幸运的是 你已经标记了

00:24:19.976 --> 00:24:22.616 A:middle
你的身份验证 Cookie HttpOnly 对吧

00:24:22.976 --> 00:24:25.626 A:middle
所以 它们不适用于

00:24:25.626 --> 00:24:26.546 A:middle
这个恶意脚本

00:24:27.466 --> 00:24:29.306 A:middle
如今 HttpOnly Cookie 不能

00:24:29.306 --> 00:24:31.256 A:middle
保护你免受跨站点脚本攻击

00:24:31.566 --> 00:24:32.626 A:middle
这种脚本仍在运行

00:24:33.376 --> 00:24:36.226 A:middle
HttpOnly Cookie 可以保护的 Cookie

00:24:37.196 --> 00:24:38.216 A:middle
因此 你要做的还有很多

00:24:38.216 --> 00:24:39.926 A:middle
那么你都做了些什么呢

00:24:40.686 --> 00:24:41.926 A:middle
内容安全策略

00:24:42.656 --> 00:24:44.626 A:middle
从默认源自带开始

00:24:44.626 --> 00:24:45.696 A:middle
对吗

00:24:46.036 --> 00:24:48.566 A:middle
只有我可以运行

00:24:48.566 --> 00:24:49.986 A:middle
我页面上的脚本

00:24:50.716 --> 00:24:52.726 A:middle
这意味着在默认情况下

00:24:52.726 --> 00:24:55.416 A:middle
不会有内联脚本

00:24:55.416 --> 00:24:57.466 A:middle
且这类所有错误都会消失

00:24:58.956 --> 00:25:00.966 A:middle
现在没有办法将脚本

