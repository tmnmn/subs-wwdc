WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.916 --> 00:32:00.276 A:middle
通过预测执行攻击读取内容

00:32:01.556 --> 00:32:04.406 A:middle
不过 这对网页来说是个巨大的挑战

00:32:04.696 --> 00:32:05.866 A:middle
我可以告诉你们

00:32:05.866 --> 00:32:08.086 A:middle
我一直在和其他浏览器供应商开会

00:32:08.186 --> 00:32:10.676 A:middle
我们正在努力尝试

00:32:10.676 --> 00:32:12.776 A:middle
试图修复默认情况下的网页

00:32:12.776 --> 00:32:15.076 A:middle
不过我们也需要你们的帮助

00:32:15.796 --> 00:32:17.786 A:middle
如果你可以选择一些东西

00:32:17.826 --> 00:32:19.146 A:middle
我们已经看过

00:32:19.256 --> 00:32:20.666 A:middle
防御机制了 对吧

00:32:20.926 --> 00:32:22.796 A:middle
如果你能选择这些

00:32:22.796 --> 00:32:24.446 A:middle
你可以帮忙告诉我们说

00:32:24.786 --> 00:32:26.146 A:middle
我有敏感内容

00:32:26.366 --> 00:32:28.196 A:middle
我想要获得更好的默认值

00:32:28.196 --> 00:32:30.826 A:middle
你不用为我支持这些遗留的 API

00:32:31.286 --> 00:32:32.536 A:middle
然后我们就可以

00:32:32.536 --> 00:32:34.006 A:middle
更积极地

00:32:34.006 --> 00:32:36.496 A:middle
为你打击预测执行攻击

00:32:37.456 --> 00:32:38.916 A:middle
下面我们看是如何映射的

00:32:39.666 --> 00:32:41.106 A:middle
想要打击

00:32:41.106 --> 00:32:42.536 A:middle
预测执行攻击

00:32:42.536 --> 00:32:44.686 A:middle
你首先要做的是

00:32:44.686 --> 00:32:47.046 A:middle
确保你的网页内容

00:32:47.306 --> 00:32:49.176 A:middle
永远不会像

00:32:49.176 --> 00:32:51.756 A:middle
evil.example 那样在同一个

00:32:51.756 --> 00:32:52.736 A:middle
网页内容处理中结束

00:32:53.316 --> 00:32:54.416 A:middle
如果它们有一个

00:32:54.416 --> 00:32:56.626 A:middle
框架 evil.example 那么就可以

00:32:56.716 --> 00:32:58.186 A:middle
在你网页内容驻留的

00:32:58.186 --> 00:33:00.386 A:middle
过程中执行代码

