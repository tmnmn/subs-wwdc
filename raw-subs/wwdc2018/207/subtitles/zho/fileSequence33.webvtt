WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.186 --> 00:33:00.386 A:middle
过程中执行代码

00:33:00.386 --> 00:33:02.646 A:middle
并读取你的字节

00:33:03.436 --> 00:33:04.746 A:middle
因此 我们怎样保证这样的情况

00:33:04.746 --> 00:33:05.326 A:middle
不会发生呢

00:33:06.286 --> 00:33:07.656 A:middle
我们有这些东西

00:33:07.936 --> 00:33:09.836 A:middle
第一个 WKWebView

00:33:10.036 --> 00:33:11.406 A:middle
现在我们正在使用 WebKit

00:33:11.406 --> 00:33:12.616 A:middle
作为框架来查看 App

00:33:13.616 --> 00:33:16.466 A:middle
我正在寻找 Safari

00:33:16.756 --> 00:33:18.046 A:middle
这是一个使用 WKWebView 的

00:33:18.046 --> 00:33:20.216 A:middle
App 的示例

00:33:20.326 --> 00:33:22.386 A:middle
我们有时将其称为

00:33:22.386 --> 00:33:24.306 A:middle
现代 WebKit 它已经

00:33:24.306 --> 00:33:25.596 A:middle
使用了很多年

00:33:25.986 --> 00:33:27.866 A:middle
而且它提供了

00:33:28.096 --> 00:33:29.346 A:middle
很好的优势

00:33:30.096 --> 00:33:32.336 A:middle
例如这三个选项卡

00:33:32.536 --> 00:33:34.296 A:middle
evil.example 你的 Web 内容

00:33:34.296 --> 00:33:36.696 A:middle
还有 webkit.org 都在

00:33:36.696 --> 00:33:39.096 A:middle
单独的网页内容过程里呈现

00:33:40.126 --> 00:33:42.896 A:middle
此外 WKWebView 给你

00:33:43.026 --> 00:33:44.726 A:middle
提供了一个分离的

00:33:44.726 --> 00:33:45.566 A:middle
网络过程

00:33:45.816 --> 00:33:47.436 A:middle
在这里 Cookie 得以添加

00:33:47.436 --> 00:33:51.966 A:middle
HTTP 头能够被解析等等

00:33:54.306 --> 00:33:56.036 A:middle
现在 预测执行攻击

00:33:56.036 --> 00:33:58.346 A:middle
都依赖于在

00:33:58.346 --> 00:34:00.796 A:middle
同一个网页内容过程中

