WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.706 --> 00:41:01.636 A:middle
迁移到 WKWebview

00:41:02.046 --> 00:41:03.076 A:middle
这些是基础

00:41:03.786 --> 00:41:05.216 A:middle
然后我们就有了

00:41:05.216 --> 00:41:07.006 A:middle
我们一直在进行的防御机制

00:41:07.386 --> 00:41:09.386 A:middle
内容安全策略将

00:41:09.386 --> 00:41:11.956 A:middle
帮助你在这里进行跨站点

00:41:11.956 --> 00:41:13.236 A:middle
脚本和预测

00:41:13.236 --> 00:41:14.276 A:middle
执行攻击

00:41:16.266 --> 00:41:17.686 A:middle
HttpOnly Cookie 将为你提供

00:41:17.746 --> 00:41:19.706 A:middle
对跨站点脚本的某种保护

00:41:19.706 --> 00:41:20.826 A:middle
这意味着

00:41:20.906 --> 00:41:22.526 A:middle
脚本不能窃取 Cookie

00:41:22.526 --> 00:41:24.306 A:middle
但它肯定会 

00:41:24.306 --> 00:41:26.026 A:middle
帮助你抵御

00:41:26.026 --> 00:41:27.586 A:middle
预测执行攻击

00:41:27.626 --> 00:41:29.616 A:middle
因为 HttpOnly Cookie 

00:41:29.756 --> 00:41:31.236 A:middle
被完全保存在网络进程中

00:41:33.286 --> 00:41:34.446 A:middle
子资源完整性

00:41:34.876 --> 00:41:36.036 A:middle
这就是抵御

00:41:36.436 --> 00:41:37.896 A:middle
受损 CDN 的方式

00:41:38.306 --> 00:41:40.246 A:middle
有人正在你的

00:41:40.246 --> 00:41:42.346 A:middle
页面上执行你从未想过的代码

00:41:44.576 --> 00:41:47.176 A:middle
SameSite Cookie 这是一种

00:41:47.176 --> 00:41:49.766 A:middle
打击伪造请求的方法

00:41:49.816 --> 00:41:51.936 A:middle
为了对付某些钓鱼页面

00:41:52.026 --> 00:41:52.816 A:middle
隐藏到你的服务器上

00:41:52.906 --> 00:41:54.456 A:middle
你会知道 因为

00:41:54.456 --> 00:41:56.036 A:middle
当你被嵌入时 

00:41:56.036 --> 00:41:57.496 A:middle
不会发送 SameSite Cookie 所以你

00:41:57.496 --> 00:41:59.336 A:middle
不用接受请求

