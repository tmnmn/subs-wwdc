WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.056 --> 00:31:00.876 A:middle
事实证明

00:31:01.056 --> 00:31:02.496 A:middle
由推测执行造成的缓存效果

00:31:02.496 --> 00:31:04.936 A:middle
可以通过恶意代码

00:31:04.936 --> 00:31:07.756 A:middle
进行监控 然后

00:31:07.756 --> 00:31:10.036 A:middle
还可以泄漏那些

00:31:10.036 --> 00:31:12.416 A:middle
从来不应该发生过的数据读取

00:31:13.026 --> 00:31:14.606 A:middle
这是界外的 该负载

00:31:14.606 --> 00:31:16.456 A:middle
应该没有发生

00:31:16.456 --> 00:31:18.996 A:middle
但它会影响缓存 并且通过测量

00:31:18.996 --> 00:31:21.116 A:middle
缓存 攻击者可以

00:31:21.116 --> 00:31:22.826 A:middle
泄露那些不应该

00:31:22.826 --> 00:31:23.866 A:middle
被加载的数据

00:31:25.086 --> 00:31:27.396 A:middle
那么这是如何映射到网页内容的呢

00:31:28.046 --> 00:31:29.986 A:middle
还记得同源策略吗

00:31:30.476 --> 00:31:31.636 A:middle
这个东西已经

00:31:31.636 --> 00:31:34.476 A:middle
保护了我们 20 年

00:31:34.476 --> 00:31:36.676 A:middle
确保了一个来源的

00:31:36.676 --> 00:31:37.996 A:middle
主框架不能

00:31:38.026 --> 00:31:39.756 A:middle
进入和读取其他框架的字节

00:31:39.756 --> 00:31:41.916 A:middle
或许是你的嵌入内容

00:31:43.206 --> 00:31:44.496 A:middle
而有了预测执行

00:31:44.496 --> 00:31:46.416 A:middle
攻击 我们就可以不再

00:31:46.416 --> 00:31:47.656 A:middle
依赖于同源策略

00:31:48.766 --> 00:31:50.196 A:middle
现在存在一种资格 那就是

00:31:50.196 --> 00:31:51.576 A:middle
如果你可以运行脚本 并且

00:31:51.576 --> 00:31:53.696 A:middle
你在同一个过程中 与其他内容

00:31:53.696 --> 00:31:55.676 A:middle
一样的网页内容处理过程

00:31:55.676 --> 00:31:57.916 A:middle
那么你就可以

00:31:57.916 --> 00:32:00.276 A:middle
通过预测执行攻击读取内容

