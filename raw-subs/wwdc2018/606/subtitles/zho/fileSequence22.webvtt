WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.651 --> 00:22:00.087 align:middle line:-2
然后选择一个随机方向
以继续光线路径

00:22:01.388 --> 00:22:02.289 align:middle line:-1
最后

00:22:02.923 --> 00:22:05.893 align:middle line:-1
将光线颜色与插值顶点颜色相乘

00:22:06.894 --> 00:22:08.996 align:middle line:-1
这样光线就会使用

00:22:09.062 --> 00:22:11.031 align:middle line:-1
表面反射的颜色

00:22:11.832 --> 00:22:13.400 align:middle line:-1
在更高级的app中

00:22:13.467 --> 00:22:16.036 align:middle line:-1
计算将会更加复杂

00:22:16.436 --> 00:22:18.872 align:middle line:-1
但是 通过认真选择随机光线方向

00:22:18.939 --> 00:22:21.475 align:middle line:-1
可以取消其余的数学计算

00:22:22.543 --> 00:22:25.245 align:middle line:-2
即使从摄像机反向投射光线
也同样可行

00:22:25.479 --> 00:22:27.981 align:middle line:-2
只要在每个交叉点
使用光线颜色

00:22:28.048 --> 00:22:30.117 align:middle line:-1
严格地为直射光线着色

00:22:31.785 --> 00:22:33.687 align:middle line:-2
对于二次光线
这就是我们要做的事情

00:22:35.155 --> 00:22:38.125 align:middle line:-1
光线可以从墙面反射到

00:22:38.192 --> 00:22:40.594 align:middle line:-1
箱子侧面和天花板上

00:22:42.129 --> 00:22:43.564 align:middle line:-1
这是我们的示例app

00:22:44.865 --> 00:22:48.802 align:middle line:0
最初 屏幕上显示一幅图像
上面有一次光线和着色

00:22:49.670 --> 00:22:51.071 align:middle line:0
然后我们添加阴影

00:22:51.438 --> 00:22:52.306 align:middle line:0
最后

00:22:52.372 --> 00:22:55.309 align:middle line:0
使用二次光线模拟
场景中的光线反射

00:22:56.176 --> 00:22:59.847 align:middle line:0
让我们切换到演示
看看实时运行效果

