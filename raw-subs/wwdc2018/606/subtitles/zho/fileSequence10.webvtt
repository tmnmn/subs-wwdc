WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.066 --> 00:10:00.100 align:middle line:-1
我们主要使用这方法

00:10:00.167 --> 00:10:02.035 align:middle line:-1
加速光线三角形交叉检查

00:10:03.303 --> 00:10:05.539 align:middle line:-1
当然 这是一个简单的例子

00:10:06.106 --> 00:10:07.107 align:middle line:-1
在实际场景中

00:10:07.174 --> 00:10:09.843 align:middle line:-1
加速结构可能会更加复杂

00:10:11.378 --> 00:10:14.581 align:middle line:-1
从这个图示中 我们可以看出

00:10:14.648 --> 00:10:16.984 align:middle line:-2
加速结构正在适应
复杂的几何形状

00:10:17.851 --> 00:10:19.786 align:middle line:-1
这意味着 我们的大多数时间

00:10:19.853 --> 00:10:23.824 align:middle line:-2
仅用于搜索高复杂性
几何区域中的交叉点

00:10:24.024 --> 00:10:25.025 align:middle line:-1
这正是我们想要的

00:10:26.460 --> 00:10:28.795 align:middle line:-2
我描述了加速结构是什么
以及它是如何工作

00:10:29.029 --> 00:10:31.965 align:middle line:-1
让你们有直观的感受

00:10:32.466 --> 00:10:34.668 align:middle line:-2
但实际上你们并不需要
过分关心这些内容

00:10:35.002 --> 00:10:37.070 align:middle line:-2
因为MPS将会为你们
处理所有的工作

00:10:39.039 --> 00:10:41.241 align:middle line:-2
请记住 我们使用三角形
建模我们的场景

00:10:41.808 --> 00:10:43.844 align:middle line:-2
这些三角形本身
可以使用顶点缓冲区中的

00:10:43.911 --> 00:10:45.779 align:middle line:-1
顶点进行表示

00:10:46.813 --> 00:10:50.784 align:middle line:-2
你只需要 调用MPS
顶点缓冲区中

00:10:50.851 --> 00:10:52.052 align:middle line:-1
创建一个加速结构

00:10:53.387 --> 00:10:55.122 align:middle line:-1
当准备搜索交叉时

00:10:55.289 --> 00:10:57.157 align:middle line:-1
只需要将这个加速结构

00:10:57.224 --> 00:10:58.525 align:middle line:-1
提供给交叉区域

00:10:59.693 --> 00:11:02.262 align:middle line:-2
让我们来看如何使用此方法
创建一个真实app

