WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.118 --> 00:27:00.587 align:middle line:0
这个副本是非递归性的

00:27:01.088 --> 00:27:04.091 align:middle line:0
因此 添加到加速结构的任何缓冲区

00:27:04.224 --> 00:27:06.693 align:middle line:0
例如顶点和索引缓冲区

00:27:07.628 --> 00:27:09.096 align:middle line:0
都需要单独复制它们

00:27:09.162 --> 00:27:11.431 align:middle line:0
然后 将它们添加到

00:27:11.498 --> 00:27:12.766 align:middle line:0
刚才创建的加速结构

00:27:16.203 --> 00:27:19.039 align:middle line:-2
现在 已经在所有GPU上
复制数据

00:27:19.106 --> 00:27:20.340 align:middle line:-1
准备开始渲染

00:27:21.975 --> 00:27:24.845 align:middle line:-2
从多GPU角度来的
一件有趣的事情是

00:27:24.912 --> 00:27:28.048 align:middle line:-2
这部分的管道
其实与Sean前面描述的渲染管道

00:27:28.115 --> 00:27:29.383 align:middle line:-1
没有什么差别

00:27:30.250 --> 00:27:32.619 align:middle line:-1
唯一的差别在于对于多GPU

00:27:32.819 --> 00:27:35.989 align:middle line:-1
需要设定各个GPU所负责的

00:27:36.056 --> 00:27:37.891 align:middle line:-1
屏幕区域的光线生成工作

00:27:38.458 --> 00:27:39.893 align:middle line:-1
其他部分都是相同的

00:27:40.894 --> 00:27:41.929 align:middle line:-1
因此

00:27:41.995 --> 00:27:46.099 align:middle line:-2
让我们直接来看
多GPU方案中最复杂的阶段

00:27:46.500 --> 00:27:48.769 align:middle line:-1
也就是合成阶段

00:27:51.371 --> 00:27:54.007 align:middle line:-1
为了在macOS上获得最佳性能

00:27:54.074 --> 00:27:57.077 align:middle line:-2
每个GPU都将渲染结果
放入自己的私有缓冲区

00:27:58.078 --> 00:28:01.081 align:middle line:-2
渲染完成后
我们将缓冲区复制到

