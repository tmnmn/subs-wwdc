WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.693 --> 00:11:02.262 align:middle line:-2
让我们来看如何使用此方法
创建一个真实app

00:11:03.463 --> 00:11:05.465 align:middle line:-1
我们将这个app划分为三个阶段

00:11:05.899 --> 00:11:10.003 align:middle line:-2
首先 我们生成一次光线
找到光线与场景的交叉点

00:11:10.070 --> 00:11:11.338 align:middle line:-1
然后计算阴影

00:11:11.972 --> 00:11:13.574 align:middle line:-2
这类似于我们使用
光栅化方法

00:11:13.640 --> 00:11:14.775 align:middle line:-1
实现的效果

00:11:15.108 --> 00:11:16.910 align:middle line:-2
但在接下来的步骤中
我们会更进一步

00:11:18.245 --> 00:11:19.680 align:middle line:-1
接下来 我们将会添加阴影

00:11:20.013 --> 00:11:22.316 align:middle line:-1
MPS提供特殊的阴影光线支持

00:11:22.516 --> 00:11:24.518 align:middle line:-1
可以加快app速度

00:11:26.119 --> 00:11:26.987 align:middle line:-1
最后

00:11:27.054 --> 00:11:29.189 align:middle line:-1
我们使用二次光线

00:11:29.256 --> 00:11:30.624 align:middle line:-1
模拟场景中的光线反射

00:11:31.391 --> 00:11:33.694 align:middle line:-2
使用光栅化方法很难
实现这种效果

00:11:33.760 --> 00:11:35.729 align:middle line:-2
但是 我们看到
使用光线追踪技术

00:11:35.796 --> 00:11:36.930 align:middle line:-1
很容易做到这一点

00:11:38.665 --> 00:11:40.133 align:middle line:-1
让我们从一次光线开始

00:11:41.401 --> 00:11:43.537 align:middle line:-1
我们需要做五件事

00:11:44.404 --> 00:11:46.974 align:middle line:-2
首先 我们创建一个
光线三角形交叉检查器

00:11:48.542 --> 00:11:50.043 align:middle line:-1
然后 在我们的顶点缓冲区中

00:11:50.110 --> 00:11:51.345 align:middle line:-1
创建一个加速结构

00:11:53.480 --> 00:11:56.884 align:middle line:-2
接下来 我们生成一次光线
将它们写入光线缓冲区

00:11:58.719 --> 00:12:01.822 align:middle line:-2
然后 我们使用
Intersector

