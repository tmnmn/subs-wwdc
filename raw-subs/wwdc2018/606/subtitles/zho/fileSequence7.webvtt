WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.087 --> 00:07:02.122 align:middle line:-1
这时图像中有很多噪讯

00:07:02.589 --> 00:07:05.526 align:middle line:-2
但是我们可以通过多帧叠加
使图像变得均匀

00:07:06.260 --> 00:07:09.129 align:middle line:-2
每个帧将会生成
自己的一次光线集合

00:07:09.196 --> 00:07:12.499 align:middle line:-1
因此我们能够实施摄像机效果

00:07:12.566 --> 00:07:14.401 align:middle line:-1
例如景深和运动模糊

00:07:16.570 --> 00:07:18.572 align:middle line:-2
让我们将这些过程
转换成为一个流程图

00:07:20.007 --> 00:07:21.909 align:middle line:-1
首先 我们生成一次光线

00:07:22.910 --> 00:07:24.811 align:middle line:-1
然后找到场景中的交叉点

00:07:26.313 --> 00:07:28.849 align:middle line:-1
计算交叉点位置的阴影

00:07:28.982 --> 00:07:31.218 align:middle line:-1
请记住 这是一个迭代过程

00:07:31.285 --> 00:07:34.188 align:middle line:-1
将会产生更多的阴影和二次光线

00:07:34.254 --> 00:07:36.290 align:middle line:-2
将会在场景中
再次产生交叉点

00:07:36.890 --> 00:07:38.525 align:middle line:-1
最后 将阴影颜色

00:07:38.592 --> 00:07:39.660 align:middle line:-1
写入图像

00:07:40.961 --> 00:07:43.297 align:middle line:-1
这是渲染app的流程

00:07:43.630 --> 00:07:45.399 align:middle line:-1
但是 大量的时间

00:07:45.465 --> 00:07:48.268 align:middle line:-2
实际上被花费在
光线三角形交叉测试上

00:07:49.403 --> 00:07:51.705 align:middle line:-1
这意味着 交叉区的渲染性能

00:07:51.772 --> 00:07:54.608 align:middle line:-1
对总体渲染性能有很大的影响

00:07:54.675 --> 00:07:57.411 align:middle line:-1
即使它与实际光照和阴影无关

00:07:58.478 --> 00:08:00.280 align:middle line:-1
这个核心交叉问题

