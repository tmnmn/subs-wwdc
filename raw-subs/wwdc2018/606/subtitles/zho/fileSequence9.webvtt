WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.706 --> 00:09:00.541 align:middle line:-1
好的

00:09:01.742 --> 00:09:05.179 align:middle line:-2
3D模型通常表示为
三角形阵列

00:09:06.079 --> 00:09:08.949 align:middle line:-2
我们需要做的事情是
搜索这些三角形

00:09:09.149 --> 00:09:11.652 align:middle line:-2
找出哪些三角形
与每条光线交叉

00:09:12.920 --> 00:09:14.555 align:middle line:-1
此外 我们需要分析

00:09:14.688 --> 00:09:17.591 align:middle line:-2
哪些交叉点最接近
光线的起点

00:09:19.126 --> 00:09:20.761 align:middle line:-1
最简单的方法是

00:09:20.961 --> 00:09:22.896 align:middle line:-1
循环遍历所有三角形

00:09:22.963 --> 00:09:24.698 align:middle line:-1
检查光线的交叉点

00:09:25.332 --> 00:09:28.735 align:middle line:-2
但是 即使是最小的场景
这个过程也会非常慢

00:09:29.903 --> 00:09:33.740 align:middle line:-2
因此 我们创建了一个数据结构
名为“加速结构”

00:09:34.675 --> 00:09:35.742 align:middle line:-1
加速结构的工作原理

00:09:35.809 --> 00:09:39.146 align:middle line:-2
是递归地将场景划分为
多个三角形组

00:09:39.213 --> 00:09:41.148 align:middle line:-2
组中的三角形
在空间中相互邻近

00:09:42.482 --> 00:09:44.618 align:middle line:-1
当需要将一条光线与场景交叉时

00:09:45.118 --> 00:09:47.654 align:middle line:-1
将光线与树中的边界方框进行交叉

00:09:48.355 --> 00:09:51.992 align:middle line:-2
如果光线未与边界方框交叉
就可以跳过整个子树

00:09:53.093 --> 00:09:54.661 align:middle line:-1
最后 我们只需要

00:09:54.728 --> 00:09:56.396 align:middle line:-1
检查一小部分的三角形

00:09:56.463 --> 00:09:57.931 align:middle line:-1
以确定光线交叉

00:09:59.066 --> 00:10:00.100 align:middle line:-1
我们主要使用这方法

