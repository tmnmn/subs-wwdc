WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.464 --> 00:25:01.301 align:middle line:-1
我们希望能够使用所有这些GPU

00:25:01.368 --> 00:25:04.104 align:middle line:-1
以尽量提高光线追踪速度

00:25:05.272 --> 00:25:06.473 align:middle line:-1
我们应该怎么做？

00:25:06.840 --> 00:25:07.708 align:middle line:-1
我们需要

00:25:07.774 --> 00:25:09.309 align:middle line:-1
考虑三件事情

00:25:10.277 --> 00:25:11.178 align:middle line:-1
首先

00:25:11.512 --> 00:25:14.281 align:middle line:-2
我们如何在GPU之间
分配处理工作量？

00:25:15.749 --> 00:25:16.583 align:middle line:-1
其次

00:25:17.284 --> 00:25:20.387 align:middle line:-2
有时候 GPU需要
一种方法来交换数据

00:25:20.721 --> 00:25:22.623 align:middle line:-1
我们如何处理这个问题？

00:25:23.824 --> 00:25:24.658 align:middle line:-1
最后

00:25:24.725 --> 00:25:26.760 align:middle line:-1
还需要一个同步方法

00:25:27.594 --> 00:25:30.163 align:middle line:-2
对此 我将介绍如何使用
新的Metal Events特性

00:25:30.230 --> 00:25:31.798 align:middle line:-1
本周我们进行了相关的介绍

00:25:32.666 --> 00:25:33.767 align:middle line:-1
让我们开始

00:25:35.335 --> 00:25:36.537 align:middle line:-1
对于如何划分处理工作量

00:25:36.603 --> 00:25:39.006 align:middle line:-2
我们将会使用名称为
Split Frame Rendering的方法

00:25:39.806 --> 00:25:42.976 align:middle line:-1
其原理是将帧分为多个区域

00:25:43.043 --> 00:25:46.346 align:middle line:-2
然后将这些区域
分配给不同的GPU

00:25:46.880 --> 00:25:48.448 align:middle line:-1
从而可以并行地进行渲染

00:25:49.883 --> 00:25:50.851 align:middle line:-1
现在 每个GPU

00:25:50.918 --> 00:25:53.820 align:middle line:-2
都将运行完整渲染管道
前面Sean已经讲过

00:25:54.121 --> 00:25:56.590 align:middle line:-2
这包括所有的处理
从初始光线生成

00:25:56.924 --> 00:25:59.026 align:middle line:-1
到阴影光线和着色

