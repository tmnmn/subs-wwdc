WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.951 --> 00:02:00.654 align:middle line:-1
但是今天我将会以渲染为例

00:02:00.721 --> 00:02:03.190 align:middle line:-1
讲述如何在app中使用光线追踪

00:02:05.125 --> 00:02:07.694 align:middle line:-1
你们可以已经熟悉光栅化管道程序

00:02:08.328 --> 00:02:09.696 align:middle line:-1
光栅化工作原理是

00:02:09.763 --> 00:02:12.900 align:middle line:-1
一次将一个三角形投影到屏幕上

00:02:13.133 --> 00:02:15.035 align:middle line:-1
并且投射相应像素点的阴影

00:02:15.669 --> 00:02:18.639 align:middle line:-2
在GPU硬件中
可以很快地实现此效果

00:02:18.839 --> 00:02:20.274 align:middle line:-1
因此很多游戏和其他实时app

00:02:20.340 --> 00:02:22.643 align:middle line:-1
都选择使用此方法

00:02:24.244 --> 00:02:25.412 align:middle line:-1
但是光栅化模型

00:02:25.946 --> 00:02:29.049 align:middle line:-1
难以模拟光线的特定物理行为

00:02:30.784 --> 00:02:32.386 align:middle line:-1
其中一个例子是反射

00:02:33.053 --> 00:02:34.188 align:middle line:-1
在光栅化方法中

00:02:34.254 --> 00:02:37.124 align:middle line:-1
反射通常是使用近似方法实现的

00:02:37.191 --> 00:02:39.693 align:middle line:-2
例如立方体贴图
屏幕空间反射

00:02:40.627 --> 00:02:41.628 align:middle line:-1
但使用光线追踪器

00:02:41.695 --> 00:02:44.464 align:middle line:-2
我们可以直接计算
精确的反射效果

00:02:45.866 --> 00:02:47.401 align:middle line:-1
另一个例子是阴影

00:02:48.168 --> 00:02:49.269 align:middle line:-1
在光栅化方法中

00:02:49.336 --> 00:02:51.972 align:middle line:-2
通常使用阴影贴图
来实现阴影效果

00:02:52.472 --> 00:02:54.007 align:middle line:-1
但是在实施会遇到一些问题

00:02:54.074 --> 00:02:56.944 align:middle line:-1
比如偏差和分辨率问题

00:02:57.744 --> 00:02:58.612 align:middle line:-1
此外

00:02:58.779 --> 00:03:02.549 align:middle line:-2
软阴影贴图技术
会产生不均匀的软阴影

