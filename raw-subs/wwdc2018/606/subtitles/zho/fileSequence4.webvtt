WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.573 --> 00:04:01.375 align:middle line:-1
因此 光线追踪技术被用于

00:04:01.441 --> 00:04:04.511 align:middle line:-1
许多高真实性离线渲染app

00:04:05.879 --> 00:04:07.381 align:middle line:-1
光线追踪技术的不足之处是

00:04:07.447 --> 00:04:09.583 align:middle line:-1
相比于光栅化方法

00:04:09.650 --> 00:04:10.751 align:middle line:-1
它需要明显更多的计算资源

00:04:10.984 --> 00:04:12.386 align:middle line:-1
因为需要进行更多的计算

00:04:12.452 --> 00:04:13.787 align:middle line:-1
来模拟这些效果

00:04:15.088 --> 00:04:16.356 align:middle line:-1
让我们来详细了解

00:04:16.423 --> 00:04:18.492 align:middle line:-1
光线追踪器的渲染原理

00:04:18.559 --> 00:04:21.060 align:middle line:-2
然后了解如何
使用Metal进行加速

00:04:23.597 --> 00:04:25.532 align:middle line:-1
我们使用名为路径追踪的算法

00:04:26.500 --> 00:04:29.403 align:middle line:-2
在现实世界中
光源发射光子

00:04:29.570 --> 00:04:32.873 align:middle line:-2
它们在周围反射
直到进入摄像机或你的眼睛

00:04:33.907 --> 00:04:37.077 align:middle line:-2
但是大多数光子
实际上并没有进入摄像机

00:04:37.377 --> 00:04:39.580 align:middle line:-1
因此模拟效率非常低

00:04:40.547 --> 00:04:41.515 align:middle line:-1
幸运的是…

00:04:41.782 --> 00:04:44.718 align:middle line:-2
根据光线的属性
我们可以进行反向推理

00:04:44.785 --> 00:04:46.153 align:middle line:-1
从摄像机开始

00:04:47.187 --> 00:04:51.892 align:middle line:-2
我们将光线从摄像机
投射到场景之中

00:04:53.460 --> 00:04:55.863 align:middle line:-1
然后计算交叉点的阴影

00:04:56.797 --> 00:04:58.198 align:middle line:-1
在生成阴影时 需要明白

00:04:58.265 --> 00:05:00.767 align:middle line:-1
多少光线到达阴影点

