WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.219 --> 00:32:02.656 align:middle line:-2
使用大约相等的时间
完成其场景区域渲染

00:32:04.291 --> 00:32:05.259 align:middle line:-1
为此 我们使用的方法是

00:32:05.325 --> 00:32:07.995 align:middle line:-1
从固定分区着手

00:32:08.362 --> 00:32:09.663 align:middle line:-1
然后我们渲染一个帧

00:32:10.597 --> 00:32:13.066 align:middle line:-2
测量每个GPU需要
多长时间完成渲染

00:32:13.500 --> 00:32:14.801 align:middle line:-1
然后我们根据此结果确定

00:32:14.868 --> 00:32:17.471 align:middle line:-1
为每个GPU分配多大的区域

00:32:19.940 --> 00:32:22.442 align:middle line:-2
将会在app运行时
完成这些工作

00:32:23.377 --> 00:32:25.846 align:middle line:-1
因此 它不断地适应

00:32:25.913 --> 00:32:26.847 align:middle line:-1
你的GPU的性能

00:32:27.181 --> 00:32:30.083 align:middle line:-2
无论使用哪个场景区域
来测量GPU的处理速度

00:32:32.953 --> 00:32:37.591 align:middle line:0
都会使用指令缓冲区完成处理程序
来获得结果

00:32:38.725 --> 00:32:41.662 align:middle line:0
完成处理程序是一个CPU代码块

00:32:41.728 --> 00:32:43.497 align:middle line:0
可在GPU完成执行
指令缓冲区之后

00:32:43.564 --> 00:32:45.432 align:middle line:0
运行此代码块

00:32:46.800 --> 00:32:48.535 align:middle line:0
现在iOS上

00:32:49.102 --> 00:32:50.904 align:middle line:0
指令缓冲区有多个有用的属性

00:32:50.971 --> 00:32:52.072 align:middle line:0
可以读取这些属性

00:32:52.139 --> 00:32:54.408 align:middle line:0
以发现在GPU上运行缓冲区的时间

00:32:55.609 --> 00:32:57.444 align:middle line:-1
但是它们在macOS上不可用

00:32:57.511 --> 00:32:59.446 align:middle line:-1
我们需要确保处理时间大致相当

