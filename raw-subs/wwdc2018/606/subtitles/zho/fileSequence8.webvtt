WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.478 --> 00:08:00.280 align:middle line:-1
这个核心交叉问题

00:08:00.347 --> 00:08:02.916 align:middle line:-2
是所有光线追踪app
都会面临的问题

00:08:04.785 --> 00:08:07.821 align:middle line:-2
因此我们决定
解决这个核心交叉问题

00:08:08.088 --> 00:08:10.924 align:middle line:-1
以实现高水平的交叉区性能

00:08:11.091 --> 00:08:13.193 align:middle line:-1
并且专注于app的细节

00:08:14.728 --> 00:08:15.562 align:middle line:-1
为此 今年

00:08:15.629 --> 00:08:18.398 align:middle line:-2
我们引入了
MPSRayIntersector API

00:08:19.633 --> 00:08:22.970 align:middle line:-2
这个API加速
所有macOS设备

00:08:23.136 --> 00:08:24.238 align:middle line:-1
和iOs设备的

00:08:24.571 --> 00:08:27.107 align:middle line:-1
GPU上的光线三角线交叉测试

00:08:28.542 --> 00:08:31.345 align:middle line:-2
我们希望这个API能够
很容易地集成到现有app之中

00:08:31.478 --> 00:08:33.746 align:middle line:-2
因此我们通过Metal缓冲区
简单地接收光线

00:08:34.648 --> 00:08:37.351 align:middle line:-2
MPS将会沿每条光线
寻找最近的交叉点

00:08:37.885 --> 00:08:39.953 align:middle line:-2
然后在另一个Metal缓冲区中
返回结果

00:08:40.754 --> 00:08:41.889 align:middle line:-1
你只需要

00:08:42.389 --> 00:08:45.392 align:middle line:-2
在app中提供
一个Metal指令缓冲区

00:08:45.459 --> 00:08:47.561 align:middle line:-2
在这个缓冲区中
执行交叉测试

00:08:47.928 --> 00:08:49.763 align:middle line:-1
我们会将所有交叉测试工作

00:08:49.830 --> 00:08:51.298 align:middle line:-1
编码到指令缓冲区中

00:08:52.766 --> 00:08:55.335 align:middle line:-2
让我们来更深入地分析
我们想要解决的问题

00:08:59.706 --> 00:09:00.541 align:middle line:-1
好的

