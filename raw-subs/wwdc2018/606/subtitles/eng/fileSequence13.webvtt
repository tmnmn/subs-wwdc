WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:01.176 --> 00:13:02.236 A:middle
To do this, we'll launch a

00:13:02.236 --> 00:13:03.766 A:middle
two-dimensional compute kernel

00:13:04.146 --> 00:13:05.466 A:middle
with one thread per pixel.

00:13:06.506 --> 00:13:08.166 A:middle
Each thread will write this ray

00:13:08.166 --> 00:13:09.636 A:middle
struct into the ray buffer.

00:13:10.756 --> 00:13:12.676 A:middle
We can think about our output

00:13:12.676 --> 00:13:14.686 A:middle
image as floating on a plane in

00:13:14.686 --> 00:13:15.356 A:middle
front of the camera.

00:13:17.396 --> 00:13:18.846 A:middle
Primary rays are emitted from

00:13:18.846 --> 00:13:20.196 A:middle
the camera, so we'll simply set

00:13:20.196 --> 00:13:21.226 A:middle
the origin to the camera

00:13:21.226 --> 00:13:21.636 A:middle
position.

00:13:22.746 --> 00:13:24.626 A:middle
To compute the direction, we'll

00:13:24.626 --> 00:13:25.866 A:middle
find the direction from the

00:13:25.866 --> 00:13:27.346 A:middle
camera position through the

00:13:27.346 --> 00:13:28.906 A:middle
corresponding pixel on the image

00:13:28.906 --> 00:13:29.226 A:middle
plan.

00:13:29.406 --> 00:13:33.406 A:middle
Now that we have our primary

00:13:33.406 --> 00:13:35.066 A:middle
rays, we'll use the intersector

00:13:35.066 --> 00:13:36.166 A:middle
to find the intersections of the

00:13:36.166 --> 00:13:36.546 A:middle
scene.

00:13:37.776 --> 00:13:40.286 A:middle
The encodeIntersection call will

00:13:40.286 --> 00:13:41.366 A:middle
tie together everything we've

00:13:41.366 --> 00:13:42.216 A:middle
created, so far.

00:13:43.436 --> 00:13:44.306 A:middle
First, remember that we'll

00:13:44.306 --> 00:13:46.236 A:middle
encode into a METAL command

00:13:46.236 --> 00:13:46.586 A:middle
buffer.

00:13:47.346 --> 00:13:48.816 A:middle
We, actually, have a couple of

00:13:48.816 --> 00:13:49.856 A:middle
options for what type of

00:13:49.856 --> 00:13:51.046 A:middle
intersection search we'd like to

00:13:51.046 --> 00:13:51.306 A:middle
do.

00:13:52.056 --> 00:13:53.106 A:middle
In this case, we'll just use

00:13:53.106 --> 00:13:54.226 A:middle
nearest, which will find the

00:13:54.226 --> 00:13:55.906 A:middle
closest intersection along each

00:13:55.906 --> 00:13:56.176 A:middle
ray.

00:13:56.766 --> 00:13:59.046 A:middle
We'll then, provide the ray

00:13:59.046 --> 00:14:00.276 A:middle
buffer, which contains the

