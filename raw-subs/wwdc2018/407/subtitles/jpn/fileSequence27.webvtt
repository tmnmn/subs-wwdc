WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.019 --> 00:27:01.522 align:start position:30% line:-2
３パーセントの改善を
10回積み重ねることが

00:27:01.622 --> 00:27:04.525 align:start position:23% line:-2
２番目の30パーセントの改善に
つながります

00:27:05.626 --> 00:27:06.460 align:start position:39% line:-1
いいですね？

00:27:07.227 --> 00:27:11.665 align:start position:29% line:-1
では スライドに戻ります

00:27:11.899 --> 00:27:16.236 align:start position:30% line:-2
継続的な改善に役立つ
テクニックを紹介します

00:27:21.241 --> 00:27:23.510 align:start position:29% line:-1
最も頻繁に起こる問題は―

00:27:23.610 --> 00:27:26.280 align:start position:25% line:-2
アウトラインビューと
同じテクニックを使っています

00:27:26.380 --> 00:27:28.148 align:start position:29% line:-1
“バッチ”と“延期”です

00:27:28.248 --> 00:27:32.085 align:start position:32% line:-2
APIが呼ばれた時に
副作用が起こると―

00:27:32.186 --> 00:27:34.354 align:start position:32% line:-2
APIをループする
コードを受け取ります

00:27:34.454 --> 00:27:37.224 align:start position:23% line:-1
要求された最初の命令を実行して

00:27:37.324 --> 00:27:38.892 align:start position:30% line:-1
副作用が起こったのです

00:27:39.126 --> 00:27:42.196 align:start position:30% line:-2
副作用の結果を
誰も理解していなければ

00:27:42.296 --> 00:27:45.199 align:start position:25% line:-1
その仕事を何度も繰り返します

00:27:45.632 --> 00:27:48.068 align:start position:21% line:-2
もっと効率的なインターフェイスを
得られます

00:27:48.168 --> 00:27:51.104 align:start position:30% line:-2
クライアントが提供する
配列やコレクションの―

00:27:51.538 --> 00:27:53.807 align:start position:29% line:-2
バッチインターフェイスを
使用するのです

00:27:53.907 --> 00:27:56.276 align:start position:32% line:-2
それで副作用の計算が
１度で完了します

00:27:57.077 --> 00:27:59.346 align:start position:32% line:-2
クライアントが
複数の場合もあります

00:27:59.446 --> 00:28:04.618 align:start position:27% line:-2
一括にまとめることができず
作業を延期しているため

