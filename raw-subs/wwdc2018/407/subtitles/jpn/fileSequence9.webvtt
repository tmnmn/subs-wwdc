WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.839 --> 00:09:00.541 align:start position:39% line:-1
そして２つ目

00:09:00.774 --> 00:09:03.977 align:start position:25% line:-2
結果の相関性 序列 スコアを
測定し―

00:09:04.077 --> 00:09:06.113 align:start position:27% line:-1
どれを表示するか判断します

00:09:06.813 --> 00:09:10.284 align:start position:23% line:-1
３つ目は それらの結果をもとに

00:09:10.384 --> 00:09:13.620 align:start position:23% line:-1
画面のUI要素に入れていきます

00:09:13.854 --> 00:09:15.789 align:start position:29% line:-1
この３つのテストにより―

00:09:15.889 --> 00:09:20.861 align:start position:21% line:-2
開発環境に必要な
コード補完の要素をカバーできます

00:09:23.030 --> 00:09:27.201 align:start position:25% line:-2
ユニットテストには
いくつかのメリットがあります

00:09:27.534 --> 00:09:30.971 align:start position:30% line:-2
リグレッションに
重点が置かれているので

00:09:31.071 --> 00:09:33.607 align:start position:32% line:-2
問題が起きた時
場所の特定が容易です

00:09:33.707 --> 00:09:36.376 align:start position:21% line:-1
コードがすでに調査済みだからです

00:09:37.578 --> 00:09:41.448 align:start position:27% line:-2
さらに 再現性の高い結果を
生成します

00:09:41.548 --> 00:09:45.152 align:start position:27% line:-2
実施ごとに
大きなばらつきもありません

00:09:45.319 --> 00:09:47.487 align:start position:36% line:-1
コードは明確です

00:09:48.088 --> 00:09:50.157 align:start position:23% line:-1
次に インテグレーションテスト

00:09:50.958 --> 00:09:54.027 align:start position:23% line:-1
ここでは ユーザと同じ状況で―

00:09:54.128 --> 00:09:57.698 align:start position:29% line:-2
アプリケーションの性能を
測定します

00:09:58.232 --> 00:09:59.433 align:start position:39% line:-1
全体的にです

00:09:59.833 --> 00:10:05.272 align:start position:23% line:-2
インテグレーションテストで
コード補完を書いているとします

