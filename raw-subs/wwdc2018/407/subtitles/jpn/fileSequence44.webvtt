WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:00.007 --> 00:44:03.911 align:start position:30% line:-2
起動時にデザインを
表示しないようにします

00:44:04.011 --> 00:44:09.149 align:start position:23% line:-2
可能な限り表示しようとした
画像の優先順位を決めるためです

00:44:09.249 --> 00:44:10.450 align:start position:32% line:-1
これで単純化されます

00:44:11.351 --> 00:44:13.887 align:start position:29% line:-1
起動後の作業予定を立て―

00:44:13.987 --> 00:44:19.126 align:start position:25% line:-2
あとで呼び出すプロセス情報を
キャッシュに格納します

00:44:20.594 --> 00:44:23.697 align:start position:29% line:-2
この情報の表示要求を
受け取っていたとしたら？

00:44:23.797 --> 00:44:28.802 align:start position:2% line:-2
Background App Refresh APIを
UIKitから利用できるでしょう

00:44:28.936 --> 00:44:30.938 align:start position:23% line:-1
アプリケーションがクリアされて

00:44:31.038 --> 00:44:35.142 align:start position:29% line:-2
起動時に コンテンツを
立ち上げることができます

00:44:37.444 --> 00:44:42.416 align:start position:21% line:-2
その部分が消えて CPUの時間が
400ミリ秒節約できました

00:44:43.384 --> 00:44:46.253 align:start position:34% line:-1
この内訳を見ると―

00:44:46.353 --> 00:44:50.657 align:start position:27% line:-2
ここまで 450ミリ秒しか
使ってないことが分かります

00:44:52.159 --> 00:44:55.762 align:start position:21% line:-2
これを 500ミリ秒の
タイムウインドウに収めていきます

00:44:55.863 --> 00:44:59.299 align:start position:30% line:-2
ここでは
表示の仕方に関わらず―

00:44:59.399 --> 00:45:04.972 align:start position:29% line:-2
コンテンツの準備時間を
考えることが最も重要です

