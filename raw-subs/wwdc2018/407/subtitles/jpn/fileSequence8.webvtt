WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.745 --> 00:08:01.215 align:start position:32% line:-1
ですから大切なのは―

00:08:01.582 --> 00:08:05.853 align:start position:21% line:-2
ユーザの目的を理解して
それに合った最適化を行うことです

00:08:07.855 --> 00:08:11.492 align:start position:27% line:-2
テストには
手作業か自動かに関わらず―

00:08:11.592 --> 00:08:13.927 align:start position:27% line:-1
ある種のフォームが必要です

00:08:16.163 --> 00:08:18.699 align:start position:25% line:-1
２つの性能テストを紹介します

00:08:18.799 --> 00:08:21.869 align:start position:30% line:-2
Xcodeの性能を測る
典型的なものです

00:08:23.637 --> 00:08:25.072 align:start position:34% line:-1
ユニットテストと―

00:08:25.172 --> 00:08:26.673 align:start position:29% line:-1
インテグレーションテスト

00:08:27.107 --> 00:08:28.475 align:start position:36% line:-1
２つを比較します

00:08:29.243 --> 00:08:30.844 align:start position:29% line:-1
まず ユニットテストです

00:08:30.944 --> 00:08:34.715 align:start position:32% line:-2
アプリケーションの
一部の機能を分離して

00:08:34.815 --> 00:08:36.650 align:start position:32% line:-1
性能を自動測定します

00:08:36.917 --> 00:08:38.652 align:start position:36% line:-1
依存を遮断して―

00:08:38.751 --> 00:08:43.056 align:start position:32% line:-2
他の機能と切り離して
テストを実施します

00:08:43.390 --> 00:08:47.995 align:start position:18% line:-2
私が Xcodeのコード補完のための
テストを行うなら

00:08:48.095 --> 00:08:50.731 align:start position:23% line:-1
３つのテストを１セットにします

00:08:50.998 --> 00:08:52.132 align:start position:41% line:-1
まず１つ目

00:08:52.232 --> 00:08:55.903 align:start position:30% line:-2
コンパイラを使って
生データの結果を得て―

00:08:56.003 --> 00:08:58.305 align:start position:27% line:-1
コード補完の候補を返します

00:08:58.839 --> 00:09:00.541 align:start position:39% line:-1
そして２つ目

