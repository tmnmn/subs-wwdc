WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.446 --> 00:28:04.618 align:start position:27% line:-2
一括にまとめることができず
作業を延期しているため

00:28:04.718 --> 00:28:07.054 align:start position:29% line:-1
まだ 性能が同じ状態です

00:28:09.389 --> 00:28:13.327 align:start position:21% line:-2
３つ目はInstrumentsの
トレースを調べて―

00:28:13.694 --> 00:28:17.865 align:start position:23% line:-2
同じ計算を何度もしている領域を
見つけることです

00:28:18.165 --> 00:28:21.502 align:start position:21% line:-2
例えば テキストサイズを計算する
メソッドがあります

00:28:21.602 --> 00:28:23.337 align:start position:27% line:-1
そして その数フレーム後―

00:28:23.437 --> 00:28:27.241 align:start position:23% line:-2
同じ計算を何度もしている部分が
あったとします

00:28:27.341 --> 00:28:31.311 align:start position:29% line:-2
このような場合は
１回で計算したいはずです

00:28:31.979 --> 00:28:35.015 align:start position:25% line:-2
最上位で計算し
下位に渡すかキャッシュします

00:28:36.683 --> 00:28:39.987 align:start position:25% line:-2
UIアプリケーションにおける
もう１つのテクニックは

00:28:40.287 --> 00:28:43.490 align:start position:25% line:-2
UI表示に使用するビュー数を
考えることです

00:28:43.824 --> 00:28:45.659 align:start position:30% line:-1
ビュー数が少ないことは

00:28:45.893 --> 00:28:49.263 align:start position:27% line:-2
ソースコードの構造において
大変有効です

00:28:49.363 --> 00:28:53.300 align:start position:27% line:-2
小さな機能のセットを
大きな塊に組み立てるのです

00:28:53.400 --> 00:28:54.935 align:start position:34% line:-1
ビューが増えると―

00:28:55.035 --> 00:28:58.705 align:start position:23% line:-2
表示やレイアウトのシステムへの
負担がその分重くなります

00:28:59.206 --> 00:29:01.141 align:start position:34% line:-1
双方向の関係性です

