WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.007 --> 00:24:01.775 align:start position:21% line:-1
一式のアイテムからスタートします

00:24:01.875 --> 00:24:05.779 align:start position:29% line:-2
そして コードの領域で
展開を復元しようとします

00:24:05.879 --> 00:24:08.348 align:start position:27% line:-2
例えば
一番上のアイテムを開きます

00:24:08.448 --> 00:24:10.350 align:start position:32% line:-1
その指示を出した時―

00:24:10.450 --> 00:24:13.487 align:start position:23% line:-2
内部では
他のアイテムを下げているのです

00:24:13.954 --> 00:24:15.889 align:start position:25% line:-1
２番目のアイテムを開く時は―

00:24:15.989 --> 00:24:17.691 align:start position:29% line:-1
すべてを再度下げています

00:24:17.791 --> 00:24:19.293 align:start position:36% line:-1
３番目も同じです

00:24:19.393 --> 00:24:20.828 align:start position:34% line:-1
それを行うごとに―

00:24:20.928 --> 00:24:24.598 align:start position:34% line:-2
アイテムを何千回も
動かしているのです

00:24:25.032 --> 00:24:29.102 align:start position:23% line:-2
パフォーマンスの改善をする上で
まさに取り除きたい―

00:24:29.203 --> 00:24:31.104 align:start position:38% line:-1
ムダな作業です

00:24:31.405 --> 00:24:34.408 align:start position:23% line:-2
これらのメソッド呼び出しが
バッチを実行している事実から―

00:24:34.908 --> 00:24:36.243 align:start position:38% line:-1
こう考えました

00:24:36.343 --> 00:24:40.380 align:start position:23% line:-2
“アウトラインビューに大量の
作業を要求できるAPIがある”

00:24:40.480 --> 00:24:42.182 align:start position:32% line:-1
コールを呼び出すと―

00:24:42.282 --> 00:24:45.352 align:start position:32% line:-2
それがすべての配置を
１度で計算するのです

00:24:46.153 --> 00:24:47.955 align:start position:27% line:-1
このようなコールもあります

00:24:48.055 --> 00:24:50.224 align:start position:29% line:-1
“更新完了後に作業する”

00:24:50.324 --> 00:24:55.028 align:start position:27% line:-2
時々 APIが配列計算する
大量のメソッドを処理します

00:24:55.129 --> 00:24:58.932 align:start position:21% line:-2
また別の時には
トランザクションのAPIを提供し

00:24:59.032 --> 00:25:00.901 align:start position:30% line:-1
変更を加えようとします

