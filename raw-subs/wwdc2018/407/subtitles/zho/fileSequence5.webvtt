WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.726 --> 00:05:00.326 A:middle
在很长一段时间后

00:05:00.326 --> 00:05:01.246 A:middle
还能保持不变吗

00:05:01.656 --> 00:05:03.356 A:middle
也许在一些绘图测试中

00:05:03.356 --> 00:05:04.666 A:middle
它运行的速度是 45 帧每秒

00:05:05.156 --> 00:05:06.826 A:middle
但是我们希望的运行速度是 60 每秒

00:05:06.826 --> 00:05:07.886 A:middle
所以我们需要小幅地提高它

00:05:07.886 --> 00:05:09.426 A:middle
并且我们有理由相信

00:05:09.426 --> 00:05:10.986 A:middle
通过我们先前的性能工作

00:05:10.986 --> 00:05:12.736 A:middle
我们可以利用现场修复

00:05:12.736 --> 00:05:14.126 A:middle
以及增量式变化

00:05:14.126 --> 00:05:15.546 A:middle
来对它进行提高

00:05:16.326 --> 00:05:17.726 A:middle
在这种场景下

00:05:17.726 --> 00:05:19.186 A:middle
我或许也已经自动地

00:05:19.186 --> 00:05:20.876 A:middle
开始进行测试了 

00:05:20.876 --> 00:05:22.216 A:middle
因为随着时间的推移 

00:05:24.796 --> 00:05:24.896 A:middle
我已经很了解我的性能了

00:05:25.106 --> 00:05:26.856 A:middle
还有第三种场景 

00:05:26.856 --> 00:05:28.176 A:middle
我们的 App

00:05:28.176 --> 00:05:29.336 A:middle
因为设计不良而受到损害

00:05:29.446 --> 00:05:30.666 A:middle
性能也远远比不上

00:05:30.666 --> 00:05:32.226 A:middle
它原应达到的效果

00:05:33.516 --> 00:05:34.726 A:middle
我们知道我们不能用

00:05:34.726 --> 00:05:36.626 A:middle
简单的场地修复来提高性能

00:05:36.626 --> 00:05:37.666 A:middle
因为过去我们这么尝试过

00:05:37.906 --> 00:05:39.356 A:middle
但并没有成功

00:05:39.606 --> 00:05:41.416 A:middle
无法提高性能

00:05:42.006 --> 00:05:43.856 A:middle
在这样的情况下

00:05:43.856 --> 00:05:45.986 A:middle
你会想要做一次彻底的性能检修

00:05:45.986 --> 00:05:47.446 A:middle
你会想重新设计一些特性的核心部分

00:05:47.446 --> 00:05:48.716 A:middle
或是有问题的算法

00:05:48.716 --> 00:05:50.516 A:middle
以使性能成为一个

00:05:50.786 --> 00:05:51.916 A:middle
首要的约束条件

00:05:52.456 --> 00:05:53.746 A:middle
在这些情况里

00:05:53.906 --> 00:05:55.216 A:middle
你必然要对性能进行检测

00:05:55.536 --> 00:05:56.686 A:middle
以测量你确实

00:05:56.686 --> 00:05:58.136 A:middle
达到了你的性能目标

00:05:59.246 --> 00:06:01.936 A:middle
知道你要测试什么 很重要

