WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.496 --> 00:26:00.956 A:middle
都需要进入轨迹中去寻找

00:26:00.956 --> 00:26:02.406 A:middle
一些如此明显且容易修复的东西

00:26:02.406 --> 00:26:03.996 A:middle
而这样的东西在样本里

00:26:03.996 --> 00:26:05.156 A:middle
占到了 50%

00:26:05.916 --> 00:26:08.456 A:middle
对吗 其实并没有

00:26:08.456 --> 00:26:09.896 A:middle
什么巨大的严重问题

00:26:09.896 --> 00:26:10.806 A:middle
等待我来解决

00:26:11.686 --> 00:26:12.746 A:middle
相反 我要做的其实就是

00:26:12.746 --> 00:26:14.626 A:middle
检查整个样本

00:26:14.626 --> 00:26:15.656 A:middle
并在此过程中应用过滤器

00:26:15.656 --> 00:26:17.616 A:middle
所以我只是寻找

00:26:17.616 --> 00:26:20.286 A:middle
一些只占到 1% 或者更多时间的操作

00:26:20.286 --> 00:26:21.816 A:middle
我要寻找每一个

00:26:21.816 --> 00:26:23.436 A:middle
我认为能够运用一些方法

00:26:23.436 --> 00:26:24.836 A:middle
来将其速度

00:26:24.836 --> 00:26:26.536 A:middle
提高一点的东西

00:26:28.056 --> 00:26:29.016 A:middle
我会将它们都记下来

00:26:29.016 --> 00:26:30.496 A:middle
放在一张纸上或一个文档里

00:26:30.496 --> 00:26:32.216 A:middle
或者其他什么东西上

00:26:32.216 --> 00:26:33.436 A:middle
然后我就会着手解决它们

00:26:33.746 --> 00:26:34.736 A:middle
现在 我需要选择一个

00:26:34.736 --> 00:26:35.656 A:middle
解决它们的顺序 对吗

00:26:35.656 --> 00:26:37.326 A:middle
因为有的时候

00:26:37.326 --> 00:26:38.716 A:middle
用修复第二件事情时

00:26:38.716 --> 00:26:40.016 A:middle
所用的方法来修复

00:26:40.016 --> 00:26:40.816 A:middle
列表中的第五件事情

00:26:40.816 --> 00:26:42.516 A:middle
这方法可能会是过时的

00:26:42.516 --> 00:26:43.646 A:middle
如果没有排好顺序

00:26:43.646 --> 00:26:44.516 A:middle
你就会做多余的工作

00:26:44.516 --> 00:26:45.536 A:middle
这是十分糟糕的

00:26:45.586 --> 00:26:47.506 A:middle
因为我们首先要删除的就是

00:26:47.506 --> 00:26:48.116 A:middle
多余的工作

00:26:48.746 --> 00:26:50.476 A:middle
但是这些工作都是如何进行的

00:26:50.476 --> 00:26:51.826 A:middle
我们又很难去预测

00:26:52.066 --> 00:26:54.316 A:middle
你通常无法事先知道这些

00:26:54.746 --> 00:26:57.746 A:middle
所以不要因为这个

00:26:57.746 --> 00:26:59.446 A:middle
停下你开始的脚步

00:26:59.446 --> 00:27:00.956 A:middle
因为你想要把速度提高 30%

