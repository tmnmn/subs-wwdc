WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.656 --> 00:02:01.246 A:middle
如果你将 App 的

00:02:01.246 --> 00:02:03.216 A:middle
一个领域的性能

00:02:03.216 --> 00:02:06.706 A:middle
提高了 50%

00:02:06.706 --> 00:02:08.136 A:middle
但你的用户 

00:02:08.136 --> 00:02:10.006 A:middle
只体验到了其中的 1%

00:02:10.006 --> 00:02:11.456 A:middle
那么这种提升的影响广度

00:02:11.456 --> 00:02:13.286 A:middle
还不及你只提高了其他领域的 10% 

00:02:13.286 --> 00:02:15.526 A:middle
但所有用户都能体验到

00:02:15.526 --> 00:02:16.806 A:middle
这全部的 10%

00:02:17.336 --> 00:02:19.676 A:middle
所以一定不要去优化边缘的案例

00:02:19.676 --> 00:02:20.816 A:middle
要确保你的性能的优化

00:02:20.816 --> 00:02:22.596 A:middle
能够为全部的用户所体验

00:02:24.536 --> 00:02:27.736 A:middle
那么我们如何修复

00:02:27.736 --> 00:02:28.086 A:middle
性能漏洞呢

00:02:28.086 --> 00:02:29.526 A:middle
如何修复常规的漏洞呢

00:02:29.966 --> 00:02:31.586 A:middle
一般来说 最开始用户反馈给我们

00:02:31.586 --> 00:02:33.036 A:middle
某方面的缺陷报告

00:02:33.036 --> 00:02:35.026 A:middle
我们接收到这个报告

00:02:35.026 --> 00:02:36.466 A:middle
了解到用户对 App 的性能

00:02:36.466 --> 00:02:38.216 A:middle
有一些不满意的地方 

00:02:38.216 --> 00:02:39.946 A:middle
于是我们会设法

00:02:40.066 --> 00:02:41.696 A:middle
来综合步骤进行故障重现

00:02:41.696 --> 00:02:42.866 A:middle
以便我们可以随意地使程序出错

00:02:43.646 --> 00:02:45.346 A:middle
一旦我们成功的做到 我们就给

00:02:45.346 --> 00:02:46.526 A:middle
程序附加一个调试器

00:02:46.526 --> 00:02:48.826 A:middle
以便我们看到我们的程序出错的时候

00:02:48.826 --> 00:02:49.376 A:middle
在做什么

00:02:50.866 --> 00:02:51.706 A:middle
再结合我们的知识

00:02:51.706 --> 00:02:52.656 A:middle
想想代码应该如何工作

00:02:52.656 --> 00:02:54.576 A:middle
在必要时修改它

00:02:54.576 --> 00:02:56.176 A:middle
来消除那些

00:02:56.176 --> 00:02:57.156 A:middle
不如意的部分

00:02:57.936 --> 00:02:58.966 A:middle
我们要确保我们没有

00:02:58.966 --> 00:03:00.516 A:middle
带来任何不想要的副作用

