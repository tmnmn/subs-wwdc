WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.386 --> 00:17:00.556 A:middle
而有时候则会更多

00:17:00.626 --> 00:17:01.716 A:middle
这取决于你的 App

00:17:01.716 --> 00:17:02.436 A:middle
是如何并行的

00:17:03.306 --> 00:17:04.796 A:middle
我通常喜欢以聚焦的名义

00:17:06.276 --> 00:17:07.756 A:middle
我也喜欢折叠它们

00:17:07.756 --> 00:17:10.356 A:middle
让他们建立在每个线程中的

00:17:10.356 --> 00:17:11.976 A:middle
函数执行的最顶层上

00:17:11.976 --> 00:17:13.346 A:middle
而不是线程 ID 上

00:17:13.346 --> 00:17:14.636 A:middle
因为前者与我使用 

00:17:14.636 --> 00:17:16.165 A:middle
Grand Central Dispatch 的方式

00:17:16.165 --> 00:17:17.406 A:middle
更为契合

00:17:18.616 --> 00:17:19.715 A:middle
接下来我们看看

00:17:19.715 --> 00:17:21.076 A:middle
Instruments 视窗的底部

00:17:21.076 --> 00:17:22.236 A:middle
我要点击这个叫 Call Tree 的按钮

00:17:22.266 --> 00:17:24.576 A:middle
然后放大它

00:17:24.576 --> 00:17:25.536 A:middle
这样你就能看到

00:17:25.536 --> 00:17:26.076 A:middle
我要做什么了

00:17:26.806 --> 00:17:28.556 A:middle
这里有几个可用的过滤器

00:17:28.906 --> 00:17:30.516 A:middle
其中一个被线程分开了

00:17:30.516 --> 00:17:31.756 A:middle
默认情况下它就已经开启了

00:17:31.886 --> 00:17:33.176 A:middle
接下来我要禁用它

00:17:33.176 --> 00:17:36.326 A:middle
相反地 所有的线程都将按照

00:17:36.326 --> 00:17:37.586 A:middle
它们的最顶层入口点来分组

00:17:37.586 --> 00:17:39.666 A:middle
而不是它们的线程 ID

00:17:42.356 --> 00:17:45.646 A:middle
现在 来看这个轨迹

00:17:45.646 --> 00:17:46.946 A:middle
可以看到所有这些

00:17:46.946 --> 00:17:49.336 A:middle
正在运作的线程 顺便提一下

00:17:49.336 --> 00:17:50.816 A:middle
在主要轨迹的下面

00:17:50.816 --> 00:17:53.126 A:middle
是总的 CPU 使用率

00:17:53.126 --> 00:17:54.416 A:middle
CPU 使用率被分解到每一个线程上

00:17:54.416 --> 00:17:56.086 A:middle
我们可以看到在这个轨迹中

00:17:56.086 --> 00:17:57.046 A:middle
几乎其他所有的线程

00:17:57.176 --> 00:17:58.826 A:middle
大部分都是闲置的

00:17:59.416 --> 00:18:00.836 A:middle
我可以只聚焦主线程

