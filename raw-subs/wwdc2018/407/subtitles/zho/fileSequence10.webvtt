WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.866 --> 00:10:01.506 A:middle
所以 如果我为 Xcode 编写

00:10:01.506 --> 00:10:03.106 A:middle
代码完成单元测试

00:10:03.756 --> 00:10:05.996 A:middle
哦不对 是综合测试

00:10:05.996 --> 00:10:08.466 A:middle
我会启动全部的 Xcode App

00:10:08.466 --> 00:10:09.566 A:middle
我会打开一个源文件

00:10:09.566 --> 00:10:11.136 A:middle
我会定位到该源文件

00:10:11.136 --> 00:10:13.366 A:middle
然后进行书写

00:10:13.366 --> 00:10:15.306 A:middle
再反复地进行代码完成

00:10:16.076 --> 00:10:17.636 A:middle
当我执行这些步骤的时候 

00:10:17.636 --> 00:10:18.686 A:middle
看看 Xcode 在做什么

00:10:18.686 --> 00:10:20.316 A:middle
看看它花了多少时间

00:10:20.316 --> 00:10:22.956 A:middle
我会发现这个测试 一点也不聚焦

00:10:24.006 --> 00:10:25.476 A:middle
Xcode 会在我书写的时候

00:10:25.476 --> 00:10:26.986 A:middle
进行绘制和布局

00:10:26.986 --> 00:10:29.906 A:middle
当我归类时 它还会同时进行语法着色

00:10:30.556 --> 00:10:31.536 A:middle
在后台 Xcode 也许正在进行索引

00:10:31.536 --> 00:10:33.636 A:middle
读取获取状态 并决定把新的文件 

00:10:34.086 --> 00:10:35.976 A:middle
显示在 Assistant Editor 中

00:10:36.056 --> 00:10:36.866 A:middle
而所有的这些

00:10:37.166 --> 00:10:40.056 A:middle
都将与代码完成一起

00:10:40.116 --> 00:10:42.246 A:middle
来竞争 CPU 的资源

00:10:43.086 --> 00:10:44.046 A:middle
也许当我查看 Profiler 时

00:10:44.046 --> 00:10:45.786 A:middle
我会看到我们花费了

00:10:45.786 --> 00:10:47.636 A:middle
80% 的时间在做语法着色

00:10:47.916 --> 00:10:50.626 A:middle
而剩下的 20% 则用在了代码完成上

00:10:51.086 --> 00:10:52.636 A:middle
从这个数据我可以知道

00:10:52.636 --> 00:10:54.776 A:middle
要提高代码完成性能

00:10:54.816 --> 00:10:55.976 A:middle
最好的方法就是

00:10:56.256 --> 00:10:58.076 A:middle
推迟语法着色

00:10:58.686 --> 00:11:00.256 A:middle
这样的知识

