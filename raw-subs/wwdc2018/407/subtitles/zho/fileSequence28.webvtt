WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.526 --> 00:28:00.766 A:middle
你无法对它们进行

00:28:00.766 --> 00:28:02.186 A:middle
批量处理 那也没关系

00:28:02.596 --> 00:28:03.606 A:middle
你仍然可以通过推迟工作

00:28:03.606 --> 00:28:04.946 A:middle
以及缓慢地进行工作

00:28:04.946 --> 00:28:06.796 A:middle
来获得一样的性能风格

00:28:09.196 --> 00:28:10.996 A:middle
第三种提高你的性能的

00:28:10.996 --> 00:28:11.966 A:middle
简单的方法

00:28:11.966 --> 00:28:14.026 A:middle
是检查整个 Instruments 的轨迹

00:28:14.026 --> 00:28:15.156 A:middle
来寻找你看到它

00:28:15.156 --> 00:28:17.016 A:middle
对同样的东西进行反复计算

00:28:17.016 --> 00:28:17.656 A:middle
的地方

00:28:18.236 --> 00:28:19.556 A:middle
比如说 有一个方法

00:28:19.676 --> 00:28:20.856 A:middle
在它计算某个文档的大小的过程中

00:28:20.856 --> 00:28:22.526 A:middle
你看到同样的事情

00:28:22.526 --> 00:28:24.156 A:middle
在之后的几帧中也出现了

00:28:24.156 --> 00:28:25.946 A:middle
对于相同的文档

00:28:25.946 --> 00:28:27.006 A:middle
不断地重复

00:28:27.436 --> 00:28:28.426 A:middle
好 在这样的情况下

00:28:28.496 --> 00:28:29.536 A:middle
当然 你肯定想

00:28:29.536 --> 00:28:31.076 A:middle
一次性计算出该值

00:28:32.076 --> 00:28:33.226 A:middle
在最顶端计算它

00:28:33.226 --> 00:28:35.406 A:middle
让它不断地传下去 或者缓存它

00:28:36.476 --> 00:28:37.846 A:middle
另一个你可以在你的

00:28:37.846 --> 00:28:38.876 A:middle
UI App 中使用的方法

00:28:38.876 --> 00:28:41.166 A:middle
就是考虑

00:28:41.166 --> 00:28:42.296 A:middle
你使用了多少视图

00:28:42.296 --> 00:28:43.146 A:middle
来渲染你的 UI

00:28:43.146 --> 00:28:46.466 A:middle
使用一些带有小的

00:28:46.466 --> 00:28:48.106 A:middle
函数集的很小的视图

00:28:48.106 --> 00:28:50.216 A:middle
然后再将它们一起

00:28:50.216 --> 00:28:51.306 A:middle
生成大的函数

00:28:51.306 --> 00:28:52.286 A:middle
以此来组织你的源代码

00:28:52.286 --> 00:28:53.066 A:middle
这是很好的

00:28:53.516 --> 00:28:55.216 A:middle
但是你使用的视图越多

00:28:55.216 --> 00:28:57.516 A:middle
你就越难负担绘图

00:28:57.516 --> 00:28:58.276 A:middle
进行系统的布局

00:28:59.306 --> 00:29:01.066 A:middle
现在 这是一条双向道

