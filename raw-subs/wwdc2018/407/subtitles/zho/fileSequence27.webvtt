WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.446 --> 00:27:00.956 A:middle
因为你想要把速度提高 30%

00:27:00.956 --> 00:27:03.536 A:middle
就得进行 103% 的

00:27:03.536 --> 00:27:04.186 A:middle
改善工作

00:27:05.706 --> 00:27:05.976 A:middle
明白吗

00:27:07.316 --> 00:27:10.756 A:middle
现在 回到我们的幻灯片

00:27:10.756 --> 00:27:13.516 A:middle
我要给你演示

00:27:13.516 --> 00:27:14.766 A:middle
一些我们常用的方法

00:27:14.766 --> 00:27:16.126 A:middle
用来持续改善我们的性能

00:27:21.346 --> 00:27:22.326 A:middle
毫无疑问

00:27:22.326 --> 00:27:23.896 A:middle
我们最常见的就是

00:27:23.896 --> 00:27:25.246 A:middle
使用那些与大纲视觉里

00:27:25.246 --> 00:27:26.236 A:middle
相同的方法

00:27:26.396 --> 00:27:28.276 A:middle
批量处理和推迟处理 对吗

00:27:28.276 --> 00:27:29.736 A:middle
你有一个 API 

00:27:29.736 --> 00:27:31.526 A:middle
而当这个 API 被调用时

00:27:31.526 --> 00:27:31.836 A:middle
会出现一些副作用

00:27:32.196 --> 00:27:33.226 A:middle
然后你用一些代码

00:27:33.226 --> 00:27:34.426 A:middle
调用你在循环中的 API 

00:27:34.426 --> 00:27:35.396 A:middle
这就是你在做的

00:27:35.586 --> 00:27:36.536 A:middle
被请求的首要工作

00:27:36.536 --> 00:27:38.566 A:middle
这其中有一个副作用

00:27:39.206 --> 00:27:40.986 A:middle
好 如果没有人读取

00:27:40.986 --> 00:27:42.516 A:middle
这个副作用的结果

00:27:42.516 --> 00:27:43.416 A:middle
那你就是在反复地

00:27:43.416 --> 00:27:44.916 A:middle
进行多余的工作

00:27:45.736 --> 00:27:47.016 A:middle
你通常可以

00:27:47.016 --> 00:27:48.696 A:middle
通过使用成批的接口

00:27:48.696 --> 00:27:50.366 A:middle
得到一个更加有效的接口

00:27:50.366 --> 00:27:52.376 A:middle
在这里客户端会给你一系列的

00:27:52.376 --> 00:27:53.476 A:middle
或者某种集合 包括所有要完成的工作

00:27:53.476 --> 00:27:54.796 A:middle
以便你能够一次性地

00:27:54.796 --> 00:27:56.056 A:middle
计算那个副作用

00:27:57.156 --> 00:27:59.526 A:middle
那么 有时你有很多个客户端 对吗

00:27:59.526 --> 00:28:00.766 A:middle
你无法对它们进行

