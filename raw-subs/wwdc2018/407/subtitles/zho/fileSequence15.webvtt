WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.016 --> 00:15:02.696 A:middle
那么 在主线程上

00:15:02.696 --> 00:15:03.626 A:middle
所有的这些跟踪轨迹都要

00:15:03.626 --> 00:15:04.556 A:middle
从 Main 函数开始

00:15:04.556 --> 00:15:05.596 A:middle
它们也许将要调用

00:15:05.596 --> 00:15:06.666 A:middle
Application Main

00:15:06.796 --> 00:15:08.356 A:middle
之后它们将会通过你的源代码

00:15:08.356 --> 00:15:09.536 A:middle
不断地进行扩展

00:15:10.206 --> 00:15:11.896 A:middle
我们可以将这些跟踪轨迹

00:15:11.956 --> 00:15:13.266 A:middle
折叠在一起

00:15:13.266 --> 00:15:15.316 A:middle
将它们覆盖放进一个前缀树

00:15:15.316 --> 00:15:16.983 A:middle
以便它们从 Main 开始 进行下去

00:15:17.156 --> 00:15:18.646 A:middle
我们可以将我们

00:15:18.646 --> 00:15:19.836 A:middle
捕捉到的这些毫秒计数器

00:15:19.836 --> 00:15:21.386 A:middle
放在顶端 这样我们就能够

00:15:21.386 --> 00:15:23.416 A:middle
看到在我们源代码的

00:15:23.486 --> 00:15:24.716 A:middle
所有不同层级的区域上

00:15:24.716 --> 00:15:26.126 A:middle
我们都花费了多少时间

00:15:26.686 --> 00:15:27.636 A:middle
我们要看看这个数据

00:15:27.636 --> 00:15:29.416 A:middle
试着找出多余的

00:15:29.416 --> 00:15:31.066 A:middle
和不必要的操作

00:15:31.066 --> 00:15:32.696 A:middle
这样我们就可以提高速度

00:15:32.696 --> 00:15:33.836 A:middle
这是我们提高

00:15:33.836 --> 00:15:34.916 A:middle
App 性能的

00:15:34.916 --> 00:15:36.076 A:middle
首要方法

00:15:37.026 --> 00:15:39.316 A:middle
现在 正如你能想象到那样

00:15:39.316 --> 00:15:40.606 A:middle
我们每秒能捕捉

00:15:40.606 --> 00:15:41.456 A:middle
上千的跟踪轨迹

00:15:41.456 --> 00:15:43.326 A:middle
在 Instruments 里

00:15:43.326 --> 00:15:45.246 A:middle
有大量的数据需要你去处理

00:15:46.146 --> 00:15:48.356 A:middle
我首先要给你的建议就是

00:15:48.356 --> 00:15:49.946 A:middle
你想要尽可能多地

00:15:49.946 --> 00:15:51.596 A:middle
过滤这里的数据 

00:15:51.596 --> 00:15:53.166 A:middle
你需要看整个过程的性能 

00:15:53.166 --> 00:15:55.616 A:middle
不要把精力集中在细节点上

00:15:55.616 --> 00:15:56.376 A:middle
好吧

00:15:56.376 --> 00:15:57.786 A:middle
我想要给你演示

00:15:57.786 --> 00:16:00.086 A:middle
如何应用一堆强大的过滤器和工具

