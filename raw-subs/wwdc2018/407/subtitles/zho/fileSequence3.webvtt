WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.966 --> 00:03:00.516 A:middle
带来任何不想要的副作用

00:03:00.516 --> 00:03:02.046 A:middle
同时 要进行必要的重复

00:03:02.046 --> 00:03:03.546 A:middle
直到我们完全地

00:03:03.546 --> 00:03:04.186 A:middle
解决了这个漏洞

00:03:05.736 --> 00:03:07.686 A:middle
我已经用相同的方法

00:03:07.686 --> 00:03:08.996 A:middle
修复了许多性能漏洞

00:03:10.086 --> 00:03:11.136 A:middle
只不过我并没有使用调试器

00:03:11.136 --> 00:03:13.766 A:middle
而是使用了一个分析器

00:03:13.826 --> 00:03:16.246 A:middle
分析器就是一个很好的测量工具

00:03:16.996 --> 00:03:18.666 A:middle
我用一些步骤

00:03:18.666 --> 00:03:20.806 A:middle
来重现运行很慢的

00:03:20.806 --> 00:03:21.216 A:middle
程序

00:03:21.966 --> 00:03:23.386 A:middle
我用一个附加的分析器 

00:03:23.386 --> 00:03:25.106 A:middle
来执行这些步骤

00:03:25.106 --> 00:03:26.606 A:middle
因此我可以深入地了解

00:03:26.606 --> 00:03:27.656 A:middle
当我的代码运行缓慢时

00:03:27.656 --> 00:03:28.106 A:middle
它发生了什么

00:03:29.226 --> 00:03:31.016 A:middle
然后再结合

00:03:31.016 --> 00:03:32.556 A:middle
我的程序必须要如何运行

00:03:32.556 --> 00:03:34.206 A:middle
才能完成手边的任务

00:03:34.266 --> 00:03:36.056 A:middle
我找到其中正在进行的步骤

00:03:36.236 --> 00:03:37.606 A:middle
并删除了它们

00:03:37.606 --> 00:03:39.926 A:middle
因为想让你的代码变快的

00:03:39.926 --> 00:03:42.286 A:middle
首要方法就是删除多余的步骤

00:03:42.286 --> 00:03:44.326 A:middle
无论它正在计算的是什么

00:03:45.736 --> 00:03:47.456 A:middle
现在 我修改了源代码

00:03:47.456 --> 00:03:49.136 A:middle
在必要时进行反复测量

00:03:49.136 --> 00:03:50.486 A:middle
直到我对整体的结果

00:03:50.486 --> 00:03:52.886 A:middle
感到满意为止

00:03:54.936 --> 00:03:57.666 A:middle
当我通过这种方法提高性能时

00:03:57.666 --> 00:03:59.486 A:middle
我发现自己常常处于

00:03:59.486 --> 00:04:00.176 A:middle
一些场景当中

