WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.156 --> 00:07:00.006 A:middle
讨论这个特性时

00:07:00.006 --> 00:07:01.366 A:middle
我们常常遇到一些挑战

00:07:01.366 --> 00:07:03.536 A:middle
比如让我们在一些大的项目上

00:07:03.536 --> 00:07:05.286 A:middle
搜索一些类似于字符串

00:07:05.286 --> 00:07:07.106 A:middle
或者甚至是字母 E 

00:07:07.106 --> 00:07:07.336 A:middle
这样的东西

00:07:07.446 --> 00:07:08.976 A:middle
这些东西能搜索出成千上万种结果

00:07:08.976 --> 00:07:10.446 A:middle
不是吗

00:07:10.446 --> 00:07:12.106 A:middle
当然如果你的 App

00:07:12.216 --> 00:07:13.426 A:middle
能够迅速生产出成千上万的结果

00:07:13.426 --> 00:07:14.866 A:middle
它搜索任何东西

00:07:14.866 --> 00:07:15.776 A:middle
都会很快

00:07:16.476 --> 00:07:17.896 A:middle
但是如果你思考一下

00:07:17.896 --> 00:07:20.516 A:middle
什么是典型的模式

00:07:20.516 --> 00:07:22.046 A:middle
我们搜索我们使用的 API

00:07:22.046 --> 00:07:24.336 A:middle
我们自己的类名称

00:07:24.496 --> 00:07:25.616 A:middle
还有我们引用的图片名称

00:07:25.616 --> 00:07:26.286 A:middle
诸如此类的东西

00:07:26.346 --> 00:07:27.546 A:middle
它能搜索出很多结果

00:07:27.546 --> 00:07:28.606 A:middle
也许上百种结果

00:07:28.936 --> 00:07:30.276 A:middle
当然十分重要的是 当有一百万种搜索结果时 

00:07:30.276 --> 00:07:32.076 A:middle
你的 App 能够

00:07:32.076 --> 00:07:33.236 A:middle
正常地工作运转

00:07:33.496 --> 00:07:35.086 A:middle
但是通常的使用情况是

00:07:35.156 --> 00:07:36.026 A:middle
有数百种搜索结果

00:07:36.806 --> 00:07:38.486 A:middle
那么 在进行搜索这样的任务时

00:07:38.486 --> 00:07:40.186 A:middle
你所做的一些工作 

00:07:40.186 --> 00:07:41.396 A:middle
要与生成原始结果

00:07:41.746 --> 00:07:43.816 A:middle
这样的东西相对应

00:07:43.816 --> 00:07:45.326 A:middle
而其余的工作则要基于

00:07:45.326 --> 00:07:46.916 A:middle
你能多有效地索引

00:07:46.916 --> 00:07:48.296 A:middle
项目中的文本

00:07:48.296 --> 00:07:49.666 A:middle
并预先避免工作

00:07:50.156 --> 00:07:51.996 A:middle
在这两种场景中

00:07:51.996 --> 00:07:53.976 A:middle
你可能会有完全

00:07:53.976 --> 00:07:55.286 A:middle
不同的优化目标

00:07:55.286 --> 00:07:56.826 A:middle
让其中一个目标的搜索速度

00:07:56.826 --> 00:07:59.046 A:middle
快于其他的目标 对吗

00:07:59.046 --> 00:08:00.156 A:middle
因而你有必要了解

