WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.396 --> 00:42:01.086 A:middle
我们这里需要的内容

00:42:02.286 --> 00:42:04.046 A:middle
既然是这样

00:42:04.046 --> 00:42:05.016 A:middle
我们只要加载可见内容

00:42:05.016 --> 00:42:07.466 A:middle
在我们这个例子里

00:42:07.466 --> 00:42:09.616 A:middle
可见内容在 7 到 10 个图片之间

00:42:10.956 --> 00:42:12.536 A:middle
因为我们的可见内容

00:42:12.876 --> 00:42:14.616 A:middle
是有限值 所以我们可以

00:42:14.616 --> 00:42:16.066 A:middle
在主线程上

00:42:16.066 --> 00:42:18.376 A:middle
同时进行加载

00:42:18.696 --> 00:42:20.896 A:middle
同时 我们还想预先安排工作

00:42:20.896 --> 00:42:23.526 A:middle
这样我们就可以

00:42:23.526 --> 00:42:25.546 A:middle
开始异步加载

00:42:25.546 --> 00:42:26.596 A:middle
剩下的数据

00:42:27.156 --> 00:42:28.406 A:middle
我们在后台线程上

00:42:28.406 --> 00:42:30.236 A:middle
以正确的特性进行加载

00:42:30.316 --> 00:42:31.356 A:middle
来确保它不会

00:42:31.356 --> 00:42:33.886 A:middle
抢占主线程的运行

00:42:38.416 --> 00:42:40.516 A:middle
在这里我们的目标是

00:42:40.516 --> 00:42:41.416 A:middle
100 毫秒

00:42:44.706 --> 00:42:48.266 A:middle
那么最后 我们的数据源

00:42:48.266 --> 00:42:50.226 A:middle
还提供一些图像

00:42:50.226 --> 00:42:51.736 A:middle
我们来看看如何优化这个部分

00:42:53.666 --> 00:42:54.916 A:middle
所以目前为止

00:42:54.916 --> 00:42:55.936 A:middle
这是我们面对的

00:42:55.936 --> 00:42:57.986 A:middle
最大的数据块 

00:42:57.986 --> 00:42:59.066 A:middle
当我们意识到在启动时

00:42:59.066 --> 00:43:00.376 A:middle
我们花费了好几秒的时间

