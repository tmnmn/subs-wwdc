WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.046 --> 00:08:00.156 A:middle
因而你有必要了解

00:08:00.156 --> 00:08:02.426 A:middle
你的用户将要

00:08:02.426 --> 00:08:03.316 A:middle
如何使用该产品

00:08:03.506 --> 00:08:04.696 A:middle
这样你就可以优化

00:08:04.726 --> 00:08:05.536 A:middle
应该优化的案例

00:08:07.956 --> 00:08:09.696 A:middle
在所有的这些案例中

00:08:09.696 --> 00:08:11.206 A:middle
我需要进行一些形式的测试

00:08:11.686 --> 00:08:13.556 A:middle
无论是手动地 还是自动地

00:08:16.246 --> 00:08:17.556 A:middle
我想要与你分享

00:08:17.556 --> 00:08:18.886 A:middle
两类典型的性能测试

00:08:18.886 --> 00:08:20.196 A:middle
我通常用它们

00:08:20.196 --> 00:08:22.186 A:middle
来测量 Xcode 的性能

00:08:23.436 --> 00:08:25.436 A:middle
我们或者进行单元测试

00:08:25.436 --> 00:08:26.376 A:middle
或者进行综合测试

00:08:26.956 --> 00:08:28.176 A:middle
我们来对比一下这两种测试

00:08:29.376 --> 00:08:31.306 A:middle
在性能的单元测试中

00:08:31.306 --> 00:08:33.616 A:middle
你的目标就是对你的 App 的

00:08:33.616 --> 00:08:35.096 A:middle
某些特征进行隔离

00:08:35.096 --> 00:08:36.356 A:middle
并单独地对其进行测量

00:08:36.966 --> 00:08:37.726 A:middle
你也许会抹去它的相关性

00:08:37.756 --> 00:08:39.236 A:middle
然后在一个

00:08:39.236 --> 00:08:41.126 A:middle
隔离的环境中

00:08:41.126 --> 00:08:42.736 A:middle
启动它

00:08:43.496 --> 00:08:45.666 A:middle
如果我要为 Xcode 的代码完成 

00:08:45.666 --> 00:08:47.266 A:middle
性能的单元测试

00:08:47.266 --> 00:08:48.676 A:middle
那我也许会编写

00:08:48.676 --> 00:08:50.406 A:middle
一系列的三个小测试

00:08:51.076 --> 00:08:52.896 A:middle
其中一个测试会测量

00:08:53.256 --> 00:08:54.616 A:middle
与编译器的对话

00:08:54.616 --> 00:08:56.426 A:middle
并得到原始的结果

00:08:56.426 --> 00:08:57.876 A:middle
和原始的代码完成候选的结果

00:08:58.946 --> 00:09:01.056 A:middle
另一个性能测试则会测量

