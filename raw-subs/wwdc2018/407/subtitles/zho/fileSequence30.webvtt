WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.526 --> 00:30:00.946 A:middle
它会十分活跃地作出回应

00:30:00.946 --> 00:30:01.966 A:middle
并试图与模块里的变化

00:30:01.966 --> 00:30:03.126 A:middle
保持一致

00:30:03.126 --> 00:30:04.786 A:middle
这时你就花费了许多 CPU 时间

00:30:04.786 --> 00:30:06.636 A:middle
最终当你考虑整个的

00:30:06.636 --> 00:30:07.656 A:middle
变化的时候

00:30:07.656 --> 00:30:08.806 A:middle
这些都是多余的工作

00:30:09.496 --> 00:30:12.306 A:middle
那么 如果这是模块代码中的

00:30:12.776 --> 00:30:13.826 A:middle
直接调用 那么

00:30:13.826 --> 00:30:14.866 A:middle
不论是通过通告机制或授权

00:30:15.416 --> 00:30:17.106 A:middle
还是手动进行基于代码块的回调

00:30:17.106 --> 00:30:19.506 A:middle
改变都会发生地更加明显

00:30:19.506 --> 00:30:20.936 A:middle
当你编辑该模块代码时

00:30:21.396 --> 00:30:22.556 A:middle
你也许认为

00:30:22.556 --> 00:30:24.366 A:middle
将一些通告机制从循环中

00:30:24.366 --> 00:30:26.126 A:middle
拖出到循环之外

00:30:26.126 --> 00:30:27.916 A:middle
以对性能产生

00:30:27.916 --> 00:30:29.906 A:middle
较大的影响 是完全合适的

00:30:30.556 --> 00:30:31.856 A:middle
那么 或者

00:30:31.856 --> 00:30:33.476 A:middle
在控件这边 你可以用这些

00:30:33.476 --> 00:30:35.206 A:middle
推迟和批量处理方法中的一个

00:30:35.206 --> 00:30:36.946 A:middle
来避免多余的工作

00:30:36.946 --> 00:30:38.336 A:middle
只是它们的回应

00:30:38.336 --> 00:30:39.246 A:middle
是不同步的

00:30:41.136 --> 00:30:42.216 A:middle
最后 这是最简单的一个

00:30:42.836 --> 00:30:44.716 A:middle
一旦你的代码已经在

00:30:45.046 --> 00:30:46.386 A:middle
一个很好的路径上了

00:30:46.386 --> 00:30:47.586 A:middle
你知道 它已经是线性的了

00:30:47.586 --> 00:30:49.366 A:middle
而且不会有比线性更好的了

00:30:49.366 --> 00:30:50.346 A:middle
这是一种你要

00:30:51.796 --> 00:30:52.966 A:middle
获得的最低性能

00:30:53.626 --> 00:30:54.876 A:middle
毕竟 你要尽可能地

00:30:54.876 --> 00:30:57.186 A:middle
改进常数时间

00:30:57.246 --> 00:30:58.676 A:middle
那么 很简单

00:30:58.676 --> 00:31:00.096 A:middle
如果你将词典

