WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.896 --> 00:21:00.236 A:middle
我们的注意力

00:21:01.286 --> 00:21:03.766 A:middle
它们的其中之一就是

00:21:03.766 --> 00:21:04.076 A:middle
OPC Message Send

00:21:04.646 --> 00:21:06.926 A:middle
它可以遍布你的追踪器

00:21:06.926 --> 00:21:08.296 A:middle
只要你在写 Objective C

00:21:08.606 --> 00:21:09.916 A:middle
即使你在写 Swift 代码

00:21:09.916 --> 00:21:10.936 A:middle
当你按照你的方式

00:21:10.936 --> 00:21:11.966 A:middle
进入系统库时

00:21:11.966 --> 00:21:12.296 A:middle
你也会看到这个

00:21:12.636 --> 00:21:13.856 A:middle
你会经常看到它的对应函数

00:21:13.856 --> 00:21:15.916 A:middle
OPC LoadStrong LoadWeak

00:21:15.916 --> 00:21:18.726 A:middle
Retain 等等 你可以

00:21:18.726 --> 00:21:20.936 A:middle
将所有的内容从调用关系树里删除

00:21:20.936 --> 00:21:23.826 A:middle
根据上下文点开这里

00:21:23.866 --> 00:21:28.706 A:middle
选择 “Charge OPC to Callers”

00:21:29.406 --> 00:21:30.436 A:middle
它就会告诉 Instruments

00:21:30.466 --> 00:21:31.886 A:middle
来选取所有

00:21:31.886 --> 00:21:33.686 A:middle
来自于 OPC 库的样本

00:21:33.686 --> 00:21:35.176 A:middle
然后将它们从调用数据中删除

00:21:35.176 --> 00:21:36.456 A:middle
但是要将时间的属性归于

00:21:36.456 --> 00:21:37.846 A:middle
调用它们的父框架

00:21:38.176 --> 00:21:39.776 A:middle
我倾向于将那些

00:21:39.776 --> 00:21:41.126 A:middle
Objective C 运行时的函数

00:21:41.126 --> 00:21:42.266 A:middle
视为在书写 Objective C 代码时

00:21:42.266 --> 00:21:43.306 A:middle
的代价成本

00:21:43.706 --> 00:21:46.136 A:middle
我很少会去试图优化它们

00:21:46.136 --> 00:21:48.396 A:middle
所以我只会

00:21:48.456 --> 00:21:49.596 A:middle
将它们从数据中删除

00:21:49.596 --> 00:21:50.886 A:middle
这样我就可以聚焦在

00:21:50.886 --> 00:21:51.916 A:middle
我可能要处理的地方

00:21:53.176 --> 00:21:55.466 A:middle
还有一个你们可以应用的

00:21:55.466 --> 00:21:56.866 A:middle
强大的过滤器

00:21:56.866 --> 00:21:59.076 A:middle
我要用它来删除所有

00:21:59.076 --> 00:22:00.356 A:middle
出现在这一组帧中的小样本

