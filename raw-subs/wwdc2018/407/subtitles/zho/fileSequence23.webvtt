WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.926 --> 00:23:00.486 A:middle
我不能优化 NS 大纲视图

00:23:00.486 --> 00:23:01.976 A:middle
扩大项目

00:23:03.126 --> 00:23:04.606 A:middle
但你肯定有能力

00:23:04.606 --> 00:23:05.806 A:middle
改变这些情况

00:23:06.336 --> 00:23:07.706 A:middle
例如 花费在系统框架上的

00:23:07.706 --> 00:23:08.936 A:middle
所有这些时间

00:23:08.936 --> 00:23:10.976 A:middle
都是因为

00:23:10.976 --> 00:23:12.526 A:middle
它在运算你提供给它的数据

00:23:13.366 --> 00:23:14.546 A:middle
这需要花费很多的时间

00:23:14.616 --> 00:23:15.496 A:middle
因为你在成千上万次地

00:23:15.496 --> 00:23:17.476 A:middle
调用这个方法

00:23:18.366 --> 00:23:19.526 A:middle
它会花这么多时间

00:23:19.526 --> 00:23:20.666 A:middle
还因为它还要通过授权

00:23:20.666 --> 00:23:22.376 A:middle
回调你的代码

00:23:22.376 --> 00:23:24.566 A:middle
而最重要的是

00:23:24.566 --> 00:23:25.906 A:middle
你可以深入地了解

00:23:25.906 --> 00:23:27.836 A:middle
系统框架在做什么

00:23:27.836 --> 00:23:28.886 A:middle
只要沿着 Instruments 树

00:23:28.886 --> 00:23:30.186 A:middle
不断地进行扩展

00:23:30.186 --> 00:23:31.816 A:middle
并查看这些被调用的函数的名称

00:23:32.216 --> 00:23:33.766 A:middle
其实 我就是这样学会

00:23:33.766 --> 00:23:36.966 A:middle
修复这个漏洞的

00:23:37.166 --> 00:23:39.166 A:middle
当我将这个轨迹

00:23:39.166 --> 00:23:41.406 A:middle
扩展到大纲视图中

00:23:41.406 --> 00:23:42.966 A:middle
我能看到 它正在调用这里的两种方法

00:23:44.716 --> 00:23:47.106 A:middle
用项目入口来

00:23:47.106 --> 00:23:49.266 A:middle
批量处理扩展项目和子项

00:23:49.266 --> 00:23:50.686 A:middle
然后再进行最后更新后的工作

00:23:51.756 --> 00:23:53.356 A:middle
现在 那些对我来说都是重要的线索

00:23:53.356 --> 00:23:54.366 A:middle
说明我们或许

00:23:54.366 --> 00:23:56.226 A:middle
有可能通过批量处理来提高效率

00:23:56.226 --> 00:23:58.326 A:middle
正如你能想象的那样

00:23:58.326 --> 00:24:00.886 A:middle
大纲视图从一小组项目开始

