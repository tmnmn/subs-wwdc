WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.946 --> 00:09:01.056 A:middle
另一个性能测试则会测量

00:09:01.056 --> 00:09:02.906 A:middle
那些结果的相互关联

00:09:02.906 --> 00:09:04.386 A:middle
对它们进行排列以及评分

00:09:04.386 --> 00:09:05.406 A:middle
以便我们知道要将哪些结果

00:09:05.406 --> 00:09:05.806 A:middle
显示给用户

00:09:06.926 --> 00:09:08.896 A:middle
第三个测试会选取

00:09:08.926 --> 00:09:10.636 A:middle
那些已经准备好的结果

00:09:10.636 --> 00:09:11.636 A:middle
并测量将它们放入 UI 元素

00:09:11.636 --> 00:09:13.156 A:middle
后最终展示出来的情况

00:09:13.156 --> 00:09:15.016 A:middle
为了涉及到全部三个方面

00:09:15.016 --> 00:09:17.986 A:middle
我会很好地覆盖 IDE 中

00:09:17.986 --> 00:09:20.546 A:middle
代码完成的主要的组件

00:09:23.136 --> 00:09:24.796 A:middle
这些性能单元测试

00:09:24.886 --> 00:09:26.976 A:middle
有一些很好的方面

00:09:27.596 --> 00:09:28.326 A:middle
我们将高度聚焦这些方面

00:09:28.326 --> 00:09:30.026 A:middle
这意味着如果它们

00:09:30.026 --> 00:09:31.276 A:middle
在将来出现衰退

00:09:31.276 --> 00:09:32.706 A:middle
我会很清楚地知道

00:09:32.706 --> 00:09:33.986 A:middle
这些衰退出现在哪里

00:09:34.026 --> 00:09:35.066 A:middle
因为这些正在运行的代码

00:09:35.066 --> 00:09:36.086 A:middle
已经处于检查之中了

00:09:36.706 --> 00:09:38.976 A:middle
而它们也将在不断地运行过程中 

00:09:39.286 --> 00:09:40.626 A:middle
产生出更多的

00:09:40.626 --> 00:09:41.336 A:middle
可重复的结果

00:09:41.466 --> 00:09:42.436 A:middle
而它们产生的时间 

00:09:42.436 --> 00:09:45.036 A:middle
也不会有太大的波动

00:09:45.426 --> 00:09:46.676 A:middle
因为这些代码

00:09:46.676 --> 00:09:47.156 A:middle
是高度聚焦的

00:09:48.176 --> 00:09:49.186 A:middle
现在 我们来将单元测试与

00:09:49.186 --> 00:09:50.056 A:middle
综合测试进行对比

00:09:51.076 --> 00:09:52.936 A:middle
在综合测试中

00:09:52.936 --> 00:09:54.796 A:middle
你要做的是

00:09:54.796 --> 00:09:56.616 A:middle
在用户使用 App 时

00:09:56.616 --> 00:09:59.016 A:middle
对其性能进行全面地测量

00:09:59.866 --> 00:10:01.506 A:middle
所以 如果我为 Xcode 编写

