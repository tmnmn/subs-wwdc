WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:00.046 --> 00:39:01.666 A:middle
所以在“照片”里一定要记住

00:39:01.666 --> 00:39:02.646 A:middle
我们要处理的是没有边界的

00:39:02.646 --> 00:39:05.526 A:middle
数据集

00:39:05.766 --> 00:39:07.016 A:middle
那么让我们来看看

00:39:07.016 --> 00:39:09.166 A:middle
如何优化“照片”的每一个步骤

00:39:09.166 --> 00:39:11.846 A:middle
就让我们从初始化数据库开始

00:39:13.236 --> 00:39:15.146 A:middle
首先 数据库通常

00:39:15.146 --> 00:39:16.606 A:middle
是在执行第一个查询的时候

00:39:16.606 --> 00:39:18.056 A:middle
被初始化和载入的

00:39:18.656 --> 00:39:19.886 A:middle
我们发现了一个非常

00:39:19.886 --> 00:39:21.806 A:middle
值得优化的地方 就是尽快地

00:39:21.806 --> 00:39:22.796 A:middle
在后台线程中完成初始化

00:39:22.796 --> 00:39:24.586 A:middle
这样它就不需要

00:39:24.586 --> 00:39:26.346 A:middle
在执行第一个查询时

00:39:26.346 --> 00:39:27.636 A:middle
再进行初始化工作了

00:39:28.996 --> 00:39:30.736 A:middle
这是个问题 特别是

00:39:30.946 --> 00:39:32.256 A:middle
如果第一个查询已经

00:39:32.256 --> 00:39:33.006 A:middle
从主线程当中完成了

00:39:34.756 --> 00:39:39.696 A:middle
现在 我们已经花了很多时间

00:39:39.696 --> 00:39:40.646 A:middle
而我们仍要花费很多时间

00:39:40.706 --> 00:39:41.956 A:middle
来检查我们在启动过程中的

00:39:41.956 --> 00:39:43.116 A:middle
所有的查询

00:39:43.626 --> 00:39:44.766 A:middle
我们想要确保

00:39:44.846 --> 00:39:46.396 A:middle
我们正在做的工作

00:39:46.396 --> 00:39:47.786 A:middle
是必要的

00:39:47.786 --> 00:39:49.276 A:middle
我们不再做更多的工作

00:39:53.246 --> 00:39:56.106 A:middle
那么最后 我们要确保

00:39:56.106 --> 00:39:57.586 A:middle
我们所做的所有查询

00:39:57.586 --> 00:39:59.576 A:middle
都要尽可能地高效

00:39:59.576 --> 00:40:01.086 A:middle
我们也想尽可能地

