WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.516 A:middle
[ Music ]

00:00:19.516 --> 00:00:25.416 A:middle
[ Applause ]

00:00:25.916 --> 00:00:26.946 A:middle
&gt;&gt; Good afternoon everyone.

00:00:27.406 --> 00:00:28.456 A:middle
My name is John Hess.

00:00:28.456 --> 00:00:29.466 A:middle
Today I'm going to be joined by

00:00:29.466 --> 00:00:30.586 A:middle
Matthew Lucas, and we are going

00:00:30.586 --> 00:00:31.606 A:middle
to be talking to all of you

00:00:31.606 --> 00:00:33.166 A:middle
about practical approaches to

00:00:33.166 --> 00:00:34.506 A:middle
great app performance.

00:00:35.406 --> 00:00:36.906 A:middle
Now, I'm an engineer on the

00:00:36.906 --> 00:00:38.286 A:middle
Xcode team, and I've had the

00:00:38.346 --> 00:00:39.796 A:middle
luxury of spending the last

00:00:39.796 --> 00:00:41.546 A:middle
several years focused on

00:00:41.546 --> 00:00:42.236 A:middle
performance work.

00:00:42.736 --> 00:00:44.226 A:middle
First, with Project Find, and

00:00:44.226 --> 00:00:47.186 A:middle
Open Quickly, two areas of Xcode

00:00:47.826 --> 00:00:49.126 A:middle
that treat performance as the

00:00:49.126 --> 00:00:49.896 A:middle
primary feature.

00:00:50.766 --> 00:00:52.056 A:middle
Most recently, I've had the

00:00:52.056 --> 00:00:54.136 A:middle
opportunity to do a survey of

00:00:54.136 --> 00:00:55.846 A:middle
Xcode GY responsiveness, and I

00:00:55.846 --> 00:00:57.126 A:middle
want to share with you the

00:00:57.126 --> 00:00:58.326 A:middle
approaches that I take to

00:00:58.326 --> 00:01:00.296 A:middle
performance work, both in code

