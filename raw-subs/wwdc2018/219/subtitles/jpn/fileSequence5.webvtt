WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.198 --> 00:05:00.968 align:start position:30% line:-1
彩色のフレームレートは

00:05:01.568 --> 00:05:05.506 align:start position:34% line:-2
60fps つまり
１秒間に60回です

00:05:05.806 --> 00:05:12.045 align:start position:21% line:-2
ProMotionディスプレイの
iPadなら120fps

00:05:13.814 --> 00:05:16.016 align:start position:34% line:-1
何も動きがなければ

00:05:16.116 --> 00:05:20.988 align:start position:29% line:-2
ディスプレイは
同じデータを受け取ります

00:05:21.822 --> 00:05:23.323 align:start position:38% line:-1
しかし例えば―

00:05:24.124 --> 00:05:29.963 align:start position:30% line:-2
新しいUIImageを
ビューに割り当てると

00:05:30.998 --> 00:05:35.369 align:start position:23% line:-2
UIKitがフレームバッファに
再レンダリング

00:05:35.802 --> 00:05:40.174 align:start position:29% line:-2
それをディスプレイが読み
表示します

00:05:41.842 --> 00:05:43.744 align:start position:34% line:-1
これと対照的なのが

00:05:43.844 --> 00:05:49.082 align:start position:29% line:-2
データバッファという
バイト配列を含む領域です

00:05:49.883 --> 00:05:54.488 align:start position:30% line:-2
ネットやディスクから
取り込んだ画像を含む―

00:05:54.621 --> 00:05:58.292 align:start position:30% line:-2
データバッファについて
お話しします

00:05:59.660 --> 00:06:03.864 align:start position:30% line:-2
通常 画像サイズなどの
メタデータが

