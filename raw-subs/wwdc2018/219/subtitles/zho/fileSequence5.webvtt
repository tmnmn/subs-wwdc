WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.265 --> 00:05:00.801 align:middle line:-1
最后一部分以固定的时间间隔发生

00:05:01.835 --> 00:05:05.439 align:middle line:-2
它可能以每秒60帧的频率发生
即每1/60秒发生一次

00:05:05.772 --> 00:05:08.509 align:middle line:-2
或在配备ProMotion
Display的iPad上

00:05:08.575 --> 00:05:11.945 align:middle line:-2
它的速度可以达到
每1/120秒发生一次

00:05:13.814 --> 00:05:16.950 align:middle line:-2
如果你的app中没有任何改变
则显示硬件

00:05:17.017 --> 00:05:19.653 align:middle line:-1
会将它上次看到的相同的数据

00:05:19.720 --> 00:05:20.921 align:middle line:-1
从帧缓冲区中取出

00:05:21.788 --> 00:05:23.390 align:middle line:-1
但是当你改变

00:05:24.091 --> 00:05:26.460 align:middle line:-1
app中视图的内容

00:05:26.527 --> 00:05:29.963 align:middle line:-2
例如 你为图像视图指定
一个新的UIImage

00:05:31.064 --> 00:05:34.001 align:middle line:-2
UIKit将重新渲染
你的app窗口

00:05:34.067 --> 00:05:35.135 align:middle line:-1
并将其放入帧缓冲区

00:05:35.836 --> 00:05:38.605 align:middle line:-1
下一次显示硬件从帧缓冲区中取出时

00:05:38.672 --> 00:05:40.107 align:middle line:-1
它将会得到你的新内容

00:05:41.842 --> 00:05:45.979 align:middle line:-2
现在 你可以将图像缓冲区
与另一种“数据缓冲区”进行对比

00:05:46.046 --> 00:05:48.815 align:middle line:-1
这只是一种包含一系列字节的缓冲区

00:05:49.917 --> 00:05:54.588 align:middle line:-2
在我们的例子中 我们关心的是
包含图像文件的数据缓冲区

00:05:54.655 --> 00:05:56.523 align:middle line:-1
也许我们已经从网络上下载了

00:05:56.590 --> 00:05:58.125 align:middle line:-1
或者我们从磁盘加载它们

00:05:58.192 --> 00:05:59.626 align:middle line:-1
（数据缓冲区）

00:05:59.693 --> 00:06:03.897 align:middle line:-2
包含图像文件的数据缓冲区
通常以某些元数据开头

