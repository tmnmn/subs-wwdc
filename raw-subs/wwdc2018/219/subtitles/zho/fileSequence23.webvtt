WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.078 --> 00:23:03.417 align:middle line:-2
我们将这个视图子类与
UIImageView进行比较

00:23:04.318 --> 00:23:08.155 align:middle line:-2
你可能已经知道
每个UIView实际上都是

00:23:08.222 --> 00:23:10.657 align:middle line:-2
依赖Core Animation
运行时的CALayer实现的

00:23:11.692 --> 00:23:14.928 align:middle line:-2
对于我们的图像视图
图像视图创建…

00:23:14.995 --> 00:23:17.831 align:middle line:-1
要求图像创建解码图像缓冲区

00:23:19.032 --> 00:23:22.236 align:middle line:-2
然后 将解码后的图像
交给CALayer

00:23:22.736 --> 00:23:24.271 align:middle line:-1
用作其所在层的内容

00:23:24.338 --> 00:23:26.139 align:middle line:-2
（自定义绘图
与UIIMAGEVIEW）

00:23:26.206 --> 00:23:28.442 align:middle line:-2
对于我们重写draw得到的
自定义视图

00:23:29.810 --> 00:23:31.578 align:middle line:-1
它们很相似 但略有不同

00:23:31.645 --> 00:23:34.047 align:middle line:-1
负责创建图像缓冲区

00:23:34.414 --> 00:23:36.617 align:middle line:-1
来保存我们draw方法的内容

00:23:37.317 --> 00:23:40.053 align:middle line:-2
以及我们视图的层
执行draw函数

00:23:40.621 --> 00:23:43.524 align:middle line:-1
并填充该图像缓冲区的内容

00:23:43.590 --> 00:23:45.759 align:middle line:-1
这些内容接着根据显示硬件的需要

00:23:46.226 --> 00:23:47.928 align:middle line:-1
被复制到帧缓冲区中

00:23:52.766 --> 00:23:54.935 align:middle line:-1
（后备存储器存储开销）

00:23:55.002 --> 00:23:56.904 align:middle line:-1
为了解这将产生多大的开销

00:23:56.970 --> 00:23:59.072 align:middle line:-1
以及为什么我们不应该寻求

00:23:59.139 --> 00:24:00.374 align:middle line:-1
实现这个UI的替代方法

