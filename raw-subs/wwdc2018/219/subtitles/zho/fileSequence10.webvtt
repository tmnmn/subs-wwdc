WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.734 --> 00:10:02.269 align:middle line:-1
并将其放入缩略图的对象中

00:10:03.270 --> 00:10:08.609 align:middle line:-1
最终我们将会降低内存开销

00:10:08.675 --> 00:10:11.278 align:middle line:-2
因为我们将有一个较小的
解码图像缓冲区

00:10:12.713 --> 00:10:15.749 align:middle line:-2
这样 我们设置了一个图像源
创建了一个缩略图

00:10:16.350 --> 00:10:19.987 align:middle line:-2
然后将解码图像缓冲区
捕获到UIImage中

00:10:20.053 --> 00:10:22.489 align:middle line:-2
并将该UIImage
分配给我们的图像视图

00:10:23.423 --> 00:10:25.492 align:middle line:-1
接着 我们就可以丢弃原来的

00:10:25.559 --> 00:10:26.927 align:middle line:-1
包含我们图片的数据缓冲区

00:10:26.994 --> 00:10:30.063 align:middle line:-1
其结果是我们的app

00:10:30.130 --> 00:10:31.231 align:middle line:-1
将具有一个更小的长期内存占用足迹

00:10:31.598 --> 00:10:34.968 align:middle line:-2
执行该操作的代码有几个步骤
我会带你们过一遍这个流程

00:10:35.035 --> 00:10:37.838 align:middle line:-1
我不打算讲述非常低级的细节

00:10:37.905 --> 00:10:39.573 align:middle line:-1
但我会重点介绍一些重要的部分

00:10:40.374 --> 00:10:42.809 align:middle line:-2
首先 我们要创建一个
CGImageSource对象

00:10:44.178 --> 00:10:47.748 align:middle line:-2
CGImageSourceCreate
可以接受一个选项字典参数

00:10:47.814 --> 00:10:49.783 align:middle line:-1
我们这里要传递的重要选项参数

00:10:49.850 --> 00:10:51.985 align:middle line:-1
是这个ShouldCache标志

00:10:52.052 --> 00:10:54.254 align:middle line:-2
这就告诉了
Core Graphics框架

00:10:54.321 --> 00:10:55.822 align:middle line:-1
我们只是在创建一个对象

00:10:55.889 --> 00:11:00.694 align:middle line:-2
来表示存储在该URL的
文件中的信息

