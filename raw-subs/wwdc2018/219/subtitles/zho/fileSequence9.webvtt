WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.140 --> 00:09:03.243 align:middle line:-2
最终 如果你的app消耗了
达到特定数量的内存

00:09:03.610 --> 00:09:05.646 align:middle line:-1
你的app本身可能会被终止

00:09:06.313 --> 00:09:07.681 align:middle line:-1
而其中被终止的后台进程

00:09:07.748 --> 00:09:09.783 align:middle line:-1
可能正代表用户执行某些重要工作

00:09:09.850 --> 00:09:12.553 align:middle line:-2
因此 它们可能一终止就立即
重新启动

00:09:13.587 --> 00:09:15.155 align:middle line:-1
所以 即使你的app

00:09:15.455 --> 00:09:18.025 align:middle line:-1
可能只会在短时间内消耗内存

00:09:18.425 --> 00:09:22.963 align:middle line:-2
它也可能对CPU使用率
产生深远的影响

00:09:24.064 --> 00:09:27.401 align:middle line:-2
因此 我们希望减少app的
内存使用量

00:09:27.467 --> 00:09:31.104 align:middle line:-2
我们可以用一种称为向下采样的技术
来实现这一目标

00:09:32.739 --> 00:09:36.910 align:middle line:-2
现在 我们来看一下
图像渲染管道的更多细节

00:09:36.977 --> 00:09:40.480 align:middle line:-2
包括我们要在其中显示图像的
图像视图

00:09:40.547 --> 00:09:44.384 align:middle line:-1
实际上比要显示的图像小的这一事实

00:09:44.985 --> 00:09:47.788 align:middle line:-2
通常
Core Animation框架

00:09:47.855 --> 00:09:50.290 align:middle line:-1
在渲染阶段

00:09:50.357 --> 00:09:51.692 align:middle line:-1
将负责缩小该图像

00:09:52.259 --> 00:09:55.696 align:middle line:-2
但我们可以通过使用这种下采样技术
来节省一些内存

00:09:56.063 --> 00:09:59.733 align:middle line:-2
本质上 我们要做的就是捕捉
该缩小的操作

