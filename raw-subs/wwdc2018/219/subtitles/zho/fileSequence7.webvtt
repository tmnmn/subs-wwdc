WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.184 --> 00:07:00.087 align:middle line:-2
UIImage将分配
一个图像缓冲区

00:07:00.587 --> 00:07:03.257 align:middle line:-1
其大小等于包含在数据缓冲区中的

00:07:03.323 --> 00:07:04.858 align:middle line:-1
图像的大小

00:07:05.526 --> 00:07:07.728 align:middle line:-1
并执行称为解码的操作

00:07:08.428 --> 00:07:13.133 align:middle line:-2
这将JPEG或PNG
或其他编码的图像数据

00:07:13.534 --> 00:07:16.436 align:middle line:-1
转换为每个像素的图像信息

00:07:17.604 --> 00:07:20.007 align:middle line:-2
然后 取决于我们的图像视图
的内容模式

00:07:20.741 --> 00:07:22.876 align:middle line:-2
当UIKit要求
图像视图进行渲染时

00:07:23.810 --> 00:07:28.015 align:middle line:-2
它会在将数据复制到帧缓冲区
的过程中

00:07:28.382 --> 00:07:30.184 align:middle line:-2
对来自图像缓冲区的数据
进行复制和缩放

00:07:32.486 --> 00:07:34.288 align:middle line:-1
现在 解码阶段

00:07:34.721 --> 00:07:38.058 align:middle line:-2
是CPU密集型的
特别是对于大型图像

00:07:38.559 --> 00:07:43.163 align:middle line:-2
因此 不是每次UIKit要求
图像视图渲染时都执行一次这个过程

00:07:43.964 --> 00:07:48.702 align:middle line:-2
UIImage绑定在图像缓冲区上
所以它只执行一次这个过程

00:07:49.469 --> 00:07:53.273 align:middle line:-2
因此 你的app
对于每个被解码的图像

00:07:53.340 --> 00:07:56.543 align:middle line:-1
都可能会持续存在大量的内存分配

00:07:56.610 --> 00:07:57.911 align:middle line:-1
（解码注意事项）

00:07:57.978 --> 00:08:00.247 align:middle line:-1
正如我前面提到的那样

