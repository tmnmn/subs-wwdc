WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:01.148 --> 00:18:03.817 align:middle line:-1
并且在预取方法的实现中

00:18:05.285 --> 00:18:07.588 align:middle line:-1
我们异步地将工作分派到该队列

00:18:07.888 --> 00:18:10.090 align:middle line:-1
它的确意味着单个图像的加载

00:18:10.157 --> 00:18:12.860 align:middle line:-1
可能要比以前晚才能开始取得进展

00:18:13.560 --> 00:18:16.430 align:middle line:-1
但这也意味着CPU将花费更少时间

00:18:17.064 --> 00:18:19.166 align:middle line:-1
在它可以做的小任务之间来回切换

00:18:19.967 --> 00:18:21.468 align:middle line:-1
（图片来源）

00:18:21.535 --> 00:18:24.571 align:middle line:-2
我们显示的这些图像
可能来自多个地方

00:18:25.105 --> 00:18:27.241 align:middle line:-1
它们可能是随app附带的

00:18:28.141 --> 00:18:30.177 align:middle line:-2
在这种情况下
它们可以存储在图像素材中

00:18:30.544 --> 00:18:33.180 align:middle line:-2
或者可能存储在一个文件中
而不是我们的程序包中

00:18:33.881 --> 00:18:35.349 align:middle line:-1
或者它们可能来自网络

00:18:35.983 --> 00:18:37.651 align:middle line:-1
或者是在app的

00:18:37.718 --> 00:18:40.587 align:middle line:-1
文档目录的文档中

00:18:41.188 --> 00:18:42.656 align:middle line:-1
它们可以存储在缓存中

00:18:43.690 --> 00:18:46.260 align:middle line:-1
但是对于你的app所附带的图片

00:18:46.527 --> 00:18:50.030 align:middle line:-2
我们强烈建议你使用
图像素材来存储

00:18:51.198 --> 00:18:52.733 align:middle line:-1
这其中有很多原因

00:18:54.535 --> 00:18:58.238 align:middle line:-2
图像素材针对基于名称和
基于特征的查找进行了优化

00:18:58.639 --> 00:19:01.608 align:middle line:-1
在素材目录中查找图片资源

