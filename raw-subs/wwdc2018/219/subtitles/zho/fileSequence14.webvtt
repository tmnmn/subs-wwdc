WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.540 --> 00:14:02.342 align:middle line:-1
并且显示硬件能够及时获得新帧

00:14:03.310 --> 00:14:06.013 align:middle line:-1
但现在 我们即将显示另一行图像

00:14:06.346 --> 00:14:09.583 align:middle line:-2
在将单元格交回
UICollectionView之前

00:14:10.350 --> 00:14:12.553 align:middle line:-2
我们要求Core Graphics
解码这些图像

00:14:13.453 --> 00:14:15.155 align:middle line:-1
这将会花费很长的CPU时间

00:14:16.356 --> 00:14:19.726 align:middle line:-1
以至于我们不得不重新渲染帧缓冲区

00:14:20.861 --> 00:14:23.063 align:middle line:-1
但显示器硬件按固定的时间间隔运行

00:14:23.830 --> 00:14:27.467 align:middle line:-2
因此 从用户的角度来看
app好像卡住了一样

00:14:27.534 --> 00:14:29.203 align:middle line:-1
在可滚动视图中进行解码

00:14:29.269 --> 00:14:30.671 align:middle line:-1
我们完成了对图像的解码

00:14:30.737 --> 00:14:33.740 align:middle line:-2
我们可以将单元格提供给
UICollectionView

00:14:35.042 --> 00:14:36.944 align:middle line:-1
和以前一样 动画继续

00:14:37.878 --> 00:14:39.413 align:middle line:-1
刚刚在那里看到了一个粘连

00:14:40.881 --> 00:14:42.049 align:middle line:-1
现在 除了这种行为

00:14:42.115 --> 00:14:45.085 align:middle line:-1
明显的响应性后果

00:14:45.886 --> 00:14:49.523 align:middle line:-1
其对电池寿命有更细微的不利影响

00:14:50.390 --> 00:14:54.895 align:middle line:-2
因为iOS非常擅长管理
当CPU需求相对平稳持续时

00:14:55.562 --> 00:14:59.266 align:middle line:-1
对电池的电量需求

00:14:59.733 --> 00:15:01.568 align:middle line:-1
然而我们在这里可以看到峰值

