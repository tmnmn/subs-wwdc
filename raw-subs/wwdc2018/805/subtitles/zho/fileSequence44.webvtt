WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:56.703 --> 00:44:00.774 align:middle line:-1
我承认这没以前看起来好

00:44:00.841 --> 00:44:02.543 align:middle line:-1
但是看看app性能

00:44:02.609 --> 00:44:04.745 align:middle line:-1
我们不仅通过降低

00:44:04.811 --> 00:44:08.148 align:middle line:-2
屏幕上多边形数
节省大量开销

00:44:08.215 --> 00:44:12.986 align:middle line:-2
还能在场景中添加一些3D对象
使之更健壮

00:44:13.620 --> 00:44:16.056 align:middle line:-1
回想一下 之前的高密度网格中

00:44:16.123 --> 00:44:18.125 align:middle line:-1
我们运行在每秒30帧

00:44:18.192 --> 00:44:19.993 align:middle line:-1
现在我们回到了每秒60帧

00:44:20.494 --> 00:44:23.997 align:middle line:-1
我们之前有接近一百万多边形

00:44:24.064 --> 00:44:27.534 align:middle line:-2
现在只有9000个
这很不错

00:44:27.601 --> 00:44:31.672 align:middle line:-1
这样 我们满足了需要的性能规格

00:44:31.738 --> 00:44:36.944 align:middle line:-2
稳定的帧率
和对电池待机影响最小

00:44:38.846 --> 00:44:41.615 align:middle line:-1
我们有了营火场景里优化的模型

00:44:41.682 --> 00:44:44.751 align:middle line:-1
现在看看如何

00:44:44.918 --> 00:44:48.021 align:middle line:-1
使用不同材料属性和技术

00:44:48.088 --> 00:44:51.792 align:middle line:-2
让模型看起来
尽可能好的同时维持性能

00:44:51.859 --> 00:44:54.027 align:middle line:-1
以找回丢失的细节

00:44:55.796 --> 00:44:58.699 align:middle line:-2
也许听说过
涉及现代3D渲染的

00:44:58.765 --> 00:45:00.400 align:middle line:-1
物理渲染

