WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.572 --> 00:49:02.009 align:middle line:-1
无论是在我们遇到争用时

00:49:02.075 --> 00:49:04.244 align:middle line:-2
还是当我们无法足够快的
发送数据包时

00:49:04.511 --> 00:49:05.712 align:middle line:-1
或是不丢弃任何东西时

00:49:05.979 --> 00:49:07.814 align:middle line:-1
而是在必要时放慢速度

00:49:08.148 --> 00:49:10.150 align:middle line:-1
你的app可能在实际中不会这样做

00:49:10.217 --> 00:49:12.586 align:middle line:-1
但它突出了这两种栈之间的

00:49:13.387 --> 00:49:15.656 align:middle line:-1
性能区别

00:49:16.056 --> 00:49:16.990 align:middle line:-1
现在让我们看看吧

00:49:21.895 --> 00:49:23.564 align:middle line:-1
它们使用的数据完全相同

00:49:24.464 --> 00:49:26.099 align:middle line:-1
以它们各自尽可能快的速度

00:49:26.166 --> 00:49:27.334 align:middle line:-1
在网络上

00:49:28.235 --> 00:49:29.236 align:middle line:-1
发送完全相同的帧

00:49:31.638 --> 00:49:32.573 align:middle line:-1
我们看到右边的那个

00:49:32.639 --> 00:49:35.242 align:middle line:-1
很容易就超过了左边的那个

00:49:37.044 --> 00:49:38.779 align:middle line:-1
事实上 如果你看看其差异

00:49:38.846 --> 00:49:40.581 align:middle line:-1
我们仅在接收端就看到了

00:49:40.647 --> 00:49:43.183 align:middle line:-1
30%的开销削减

00:49:44.284 --> 00:49:49.256 align:middle line:-2
这是因为在比较套接字
和用户态网络时

00:49:49.323 --> 00:49:51.892 align:middle line:-2
我们看到它们发送和接收
UDP数据包

00:49:52.259 --> 00:49:54.595 align:middle line:-1
所需的CPU百分比存在巨大差异

00:49:55.095 --> 00:49:56.897 align:middle line:-1
这只是一个例子

00:49:57.431 --> 00:49:59.666 align:middle line:-1
这不会是每个app的样子

00:49:59.733 --> 00:50:01.568 align:middle line:-1
因为你将以不同方式进行压缩

