WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.578 --> 00:48:00.147 align:middle line:-1
你需要直接在你的app中使用它

00:48:00.314 --> 00:48:01.815 align:middle line:-1
来回发送大量数据包

00:48:03.150 --> 00:48:05.419 align:middle line:-2
为了说明这是如何工作的
及它可以产生的效果

00:48:05.652 --> 00:48:07.120 align:middle line:-1
我想给你看一个视频

00:48:07.754 --> 00:48:12.526 align:middle line:-2
它是使用Eric之前向你展示的
那个app拍摄的

00:48:12.793 --> 00:48:15.896 align:middle line:-2
并通过用户态网络
来演示UDP的性能

00:48:17.965 --> 00:48:19.233 align:middle line:-2
在这个例子中
我们将会有

00:48:19.299 --> 00:48:21.301 align:middle line:-1
两个视频同时播放

00:48:22.970 --> 00:48:27.040 align:middle line:-1
左侧的设备正在接收一个视频流

00:48:27.808 --> 00:48:28.642 align:middle line:-1
其来自…

00:48:28.709 --> 00:48:31.011 align:middle line:-1
使用套接字编写的app

00:48:32.079 --> 00:48:33.480 align:middle line:-1
右边的设备

00:48:33.547 --> 00:48:36.016 align:middle line:-1
将接收完全相同的视频流

00:48:37.317 --> 00:48:38.218 align:middle line:-1
其来自一个设备上的

00:48:38.652 --> 00:48:39.553 align:middle line:-1
一个app

00:48:40.120 --> 00:48:41.889 align:middle line:-2
该app使用
Network.framework编写

00:48:41.955 --> 00:48:45.058 align:middle line:-1
因此它可以利用用户态网络栈

00:48:46.927 --> 00:48:48.729 align:middle line:-2
在这个例子中
我们将视频以流式传输

00:48:48.929 --> 00:48:51.465 align:middle line:-1
它只是原始帧 并没有被压缩

00:48:51.532 --> 00:48:52.833 align:middle line:-1
它没很好质量或其它东西

00:48:52.900 --> 00:48:54.801 align:middle line:-1
但是有大量数据包来回传递

00:48:55.702 --> 00:48:58.038 align:middle line:-1
在此演示中 我们不会降低视频质量

00:48:58.572 --> 00:49:02.009 align:middle line:-1
无论是在我们遇到争用时

