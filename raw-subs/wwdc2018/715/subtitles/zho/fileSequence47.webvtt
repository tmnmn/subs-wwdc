WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.720 --> 00:47:00.621 align:middle line:0
你的app中

00:47:01.388 --> 00:47:03.290 align:middle line:0
接着一般情况下如果你使用了TLS

00:47:03.357 --> 00:47:06.293 align:middle line:0
它必须进行另一次转换来解密该数据

00:47:06.493 --> 00:47:08.929 align:middle line:0
然后才能将其发送到app

00:47:10.264 --> 00:47:13.500 align:middle line:0
那么当我们进行用户态网络时
这看起来如何呢？

00:47:16.170 --> 00:47:17.137 align:middle line:0
你可以看到

00:47:17.237 --> 00:47:19.907 align:middle line:0
主要的变化是我们将传输栈

00:47:19.973 --> 00:47:21.208 align:middle line:0
即TCP和UDP

00:47:21.542 --> 00:47:22.709 align:middle line:0
向上移到你的app中

00:47:22.943 --> 00:47:24.278 align:middle line:0
这有什么好处呢？

00:47:24.945 --> 00:47:27.181 align:middle line:0
现在当一个数据包从网络进入时

00:47:27.347 --> 00:47:29.082 align:middle line:0
像以前一样先进入驱动程序

00:47:29.316 --> 00:47:31.852 align:middle line:0
但我们将其移动到一块内存映射区域

00:47:32.219 --> 00:47:33.854 align:middle line:0
你的app可以

00:47:34.354 --> 00:47:36.723 align:middle line:0
自动从中获取这些数据包

00:47:36.924 --> 00:47:39.893 align:middle line:0
不需要复制
也没有做额外的上下文切换

00:47:40.027 --> 00:47:42.429 align:middle line:0
并自动开始处理数据包

00:47:42.729 --> 00:47:44.831 align:middle line:0
这样我们需要做的唯一转换

00:47:44.898 --> 00:47:47.935 align:middle line:0
就是我们为TLS无论如何
都要做的解密

00:47:49.469 --> 00:47:52.439 align:middle line:0
这确实可以减少用于

00:47:52.506 --> 00:47:54.474 align:middle line:-1
发送和接收数据包的CPU时间

00:47:54.975 --> 00:47:57.344 align:middle line:-1
特别是对于UDP这类协议

00:47:57.578 --> 00:48:00.147 align:middle line:-1
你需要直接在你的app中使用它

