WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:01.995 --> 00:46:04.331 align:middle line:-1
我想谈的关于性能的下一个领域

00:46:04.398 --> 00:46:07.868 align:middle line:-2
你实际上并不需要在app中
执行任何操作就可以得到

00:46:08.135 --> 00:46:12.673 align:middle line:-2
这是你在使用URLSession
或Network.framework连接时

00:46:12.940 --> 00:46:14.474 align:middle line:-1
自动得到的东西

00:46:15.275 --> 00:46:17.077 align:middle line:-1
这就是用户态网络

00:46:17.644 --> 00:46:21.582 align:middle line:-2
这是我们去年在WWDC上
介绍的内容

00:46:22.182 --> 00:46:25.886 align:middle line:-1
并在iOS和tvOS上都启用了它

00:46:26.286 --> 00:46:28.622 align:middle line:-1
我们在这里完全避开了套接字层

00:46:28.689 --> 00:46:31.825 align:middle line:-1
我们将传输栈移到你的app中

00:46:32.426 --> 00:46:34.528 align:middle line:-1
为了让你知道它是做什么的

00:46:35.062 --> 00:46:36.830 align:middle line:-1
我想先介绍一下通常的

00:46:36.897 --> 00:46:38.632 align:middle line:-1
传统栈模型是什么样的

00:46:40.100 --> 00:46:42.703 align:middle line:0
假设你正在通过网络接收数据包

00:46:42.836 --> 00:46:44.371 align:middle line:0
这里是Wi-Fi接口

00:46:44.805 --> 00:46:46.573 align:middle line:0
该数据包先进入驱动程序

00:46:46.740 --> 00:46:51.345 align:middle line:0
然后被发送到内核中的
TCP接收缓冲区

00:46:52.746 --> 00:46:55.682 align:middle line:0
然后当你的app读取套接字时

00:46:56.083 --> 00:46:59.653 align:middle line:0
将进行一次上下文切换
并将数据从内核复制到

00:46:59.720 --> 00:47:00.621 align:middle line:0
你的app中

