WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.934 --> 00:30:02.302 align:middle line:-1
stateUpdateHandler

00:30:02.369 --> 00:30:05.172 align:middle line:-1
我将用它来检查就绪状态和失败状态

00:30:07.474 --> 00:30:09.409 align:middle line:-1
别忘了启动我的监听器

00:30:09.943 --> 00:30:11.712 align:middle line:-2
为此我调用
listener.start()

00:30:11.912 --> 00:30:13.847 align:middle line:-1
并传入我们在上面创建的队列

00:30:15.716 --> 00:30:18.919 align:middle line:-2
现在我准备好了监听器
我只需要从网络上读取数据

00:30:19.186 --> 00:30:20.654 align:middle line:-1
并实现该receive函数

00:30:24.858 --> 00:30:27.261 align:middle line:-2
我们在这里首先调用
connection.receive()

00:30:27.461 --> 00:30:29.096 align:middle line:-1
并传入完成处理程序

00:30:29.563 --> 00:30:31.365 align:middle line:-1
当数据进入该连接时

00:30:31.765 --> 00:30:33.333 align:middle line:-1
我们将检查我们是否尚未连接

00:30:33.867 --> 00:30:35.035 align:middle line:-1
如果我们没有连接

00:30:35.169 --> 00:30:38.539 align:middle line:-2
这可能是客户端通过发送
所启动的握手过程

00:30:40.240 --> 00:30:42.809 align:middle line:-2
我们只需调用
connection.send()

00:30:43.177 --> 00:30:47.047 align:middle line:-2
并将相同的内容传回去
以便它回显给客户端

00:30:47.581 --> 00:30:49.049 align:middle line:-1
然后我们记录下连接已经建立

00:30:49.283 --> 00:30:51.952 align:middle line:-2
在此后的
所有receive()回调中

00:30:52.186 --> 00:30:54.521 align:middle line:-1
我们将告诉app的其余部分

00:30:54.688 --> 00:30:56.456 align:middle line:-1
我们收到了这个帧

00:30:56.657 --> 00:30:58.559 align:middle line:-1
它应该将其发送到显示管道

00:30:58.825 --> 00:31:00.227 align:middle line:-1
以便我们能在屏幕上看到它

