WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.980 --> 00:43:03.517 align:middle line:-2
在TCP发出的第一个数据包中
发送初始数据

00:43:03.584 --> 00:43:04.484 align:middle line:-1
即在SYN包中

00:43:04.751 --> 00:43:06.687 align:middle line:-1
这样你就不必等待整个握手过程完成

00:43:06.854 --> 00:43:08.922 align:middle line:-1
才开始发送你的app数据

00:43:10.390 --> 00:43:13.694 align:middle line:-1
为此 你的app

00:43:13.760 --> 00:43:15.729 align:middle line:-1
需要与连接达成协议

00:43:15.929 --> 00:43:19.833 align:middle line:-2
并说明你将提供此初始数据
以发送出去

00:43:20.601 --> 00:43:21.502 align:middle line:-1
为了启用它

00:43:21.568 --> 00:43:24.338 align:middle line:-2
你需要在参数上
标记allowFastOpen

00:43:24.905 --> 00:43:26.440 align:middle line:-1
然后创建连接

00:43:27.341 --> 00:43:29.309 align:middle line:-1
在你调用start()之前

00:43:29.376 --> 00:43:33.814 align:middle line:-2
你实际上可以调用send()
并将你的初始数据发送出去

00:43:35.349 --> 00:43:38.085 align:middle line:-2
现在我想指出
这里的完成处理程序

00:43:38.151 --> 00:43:41.588 align:middle line:-1
被替换为该数据为幂等的标志

00:43:41.655 --> 00:43:44.491 align:middle line:-1
幂等意味着可以安全地重新发送数据

00:43:44.558 --> 00:43:47.594 align:middle line:-2
因为初始数据可能会
通过网络重新发送

00:43:47.794 --> 00:43:50.764 align:middle line:-2
因此如果重新发送的话
你不希望它有任何副作用

00:43:53.033 --> 00:43:54.601 align:middle line:-1
然后你只需调用start()

00:43:54.935 --> 00:43:57.171 align:middle line:-1
当我们正在启动连接时

00:43:57.237 --> 00:43:59.106 align:middle line:-1
我们之前提到过的所有尝试

00:43:59.173 --> 00:44:03.677 align:middle line:-2
如果可以的话 我们将使用
该初始数据在TCP快速打开中发送

