WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.453 --> 00:22:02.656 align:middle line:-2
为了向你展示如何使用它
来构建一个简单的app

00:22:02.856 --> 00:22:04.858 align:middle line:-1
我想邀请Eric上台

00:22:13.400 --> 00:22:14.301 align:middle line:-1
谢谢Tommy

00:22:14.535 --> 00:22:15.502 align:middle line:-1
我是Eric Kinnear

00:22:15.569 --> 00:22:17.671 align:middle line:-1
我也来自Apple的网络团队

00:22:17.738 --> 00:22:20.674 align:middle line:-1
我非常高兴能与你一起

00:22:20.841 --> 00:22:22.209 align:middle line:-2
使用Network.framework
构建一个示例app

00:22:22.976 --> 00:22:25.145 align:middle line:-1
我们将使用Tommy先前提到的

00:22:25.212 --> 00:22:26.613 align:middle line:-1
视频直播用例

00:22:26.980 --> 00:22:30.784 align:middle line:-2
构建一个可以在一台设备上
使用来自摄像头的输入

00:22:30.951 --> 00:22:34.188 align:middle line:-2
并通过网络发送
以便在另一台设备上显示的app

00:22:35.289 --> 00:22:38.592 align:middle line:-1
由于我们将持续生成实时视频帧

00:22:38.659 --> 00:22:42.362 align:middle line:-2
我们将使用UDP通过网络
发送这些数据包

00:22:43.096 --> 00:22:44.131 align:middle line:-1
那我们该怎么做呢？

00:22:46.133 --> 00:22:47.100 align:middle line:0
首先…

00:22:47.334 --> 00:22:49.136 align:middle line:0
我们需要与相机进行捕捉会话

00:22:49.303 --> 00:22:52.272 align:middle line:0
以便我们可以从图像传感器
接收视频帧

00:22:53.006 --> 00:22:56.310 align:middle line:0
为了这个例子 我们不打算使用
任何视频编解码器

00:22:56.376 --> 00:22:57.578 align:middle line:0
或其它压缩算法

00:22:57.811 --> 00:23:00.180 align:middle line:0
我们只是从相机中取出原始字节

