WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.485 --> 00:27:00.754 align:middle line:-1
来从连接中读取传入的数据

00:27:01.455 --> 00:27:04.525 align:middle line:-2
在该完成处理程序中
我们验证该内容是否存在

00:27:04.825 --> 00:27:07.427 align:middle line:-2
如果存在
我们让app的其它部分知道

00:27:07.561 --> 00:27:08.529 align:middle line:-1
我们已经连接上了

00:27:08.595 --> 00:27:10.197 align:middle line:-1
它应该调出相机硬件

00:27:10.264 --> 00:27:11.632 align:middle line:-1
并开始生成帧

00:27:13.934 --> 00:27:15.269 align:middle line:-1
生成这些帧时

00:27:15.536 --> 00:27:19.306 align:middle line:-2
app的其余部分知道
在UDPClient类上调用send()

00:27:22.709 --> 00:27:26.046 align:middle line:-2
并向其传递一个表示
我们想要发送的视频帧的

00:27:26.113 --> 00:27:27.181 align:middle line:-1
数据对象数组

00:27:29.016 --> 00:27:30.951 align:middle line:-1
由于我们要在很短的时间内

00:27:31.018 --> 00:27:34.154 align:middle line:-2
进行大量发送操作
我们将在一个我们传入

00:27:34.221 --> 00:27:36.056 align:middle line:-2
connection.batch
的块内做这件事

00:27:37.591 --> 00:27:40.194 align:middle line:-2
在这个块中 我们将遍历该
数据对象数组的每一帧

00:27:40.627 --> 00:27:45.299 align:middle line:-2
并将每个数据对象都传递给
connection.send()

00:27:45.766 --> 00:27:46.967 align:middle line:-1
与上面类似

00:27:47.301 --> 00:27:49.536 align:middle line:-1
我们使用完成处理程序来检查

00:27:49.670 --> 00:27:50.971 align:middle line:-1
发送时遇到的任何错误

00:27:51.939 --> 00:27:52.773 align:middle line:-1
就是这样

00:27:53.106 --> 00:27:55.709 align:middle line:-2
我们已经有了UDPClient类
并且我们已经准备好了

00:27:57.678 --> 00:27:58.679 align:middle line:-1
让我们来看看服务器

00:27:59.780 --> 00:28:01.982 align:middle line:-1
在服务器端 我们需要一个监听器

