WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.360 --> 00:16:03.096 align:middle line:-2
我想深入探讨一下
当调用start()时会发生什么

00:16:03.163 --> 00:16:04.464 align:middle line:-1
实际发生了什么

00:16:05.499 --> 00:16:06.767 align:middle line:-2
NWConnection的
内部结构

00:16:07.201 --> 00:16:09.269 align:middle line:-1
是一个小状态机

00:16:09.770 --> 00:16:11.905 align:middle line:-2
当我们从设置状态开始
并调用start()时

00:16:12.372 --> 00:16:14.775 align:middle line:-1
我们进入准备状态

00:16:14.842 --> 00:16:16.310 align:middle line:-1
（连接生命周期）

00:16:16.376 --> 00:16:18.145 align:middle line:-1
准备状态

00:16:18.612 --> 00:16:22.783 align:middle line:-2
它不仅仅是在TCP套接字上
调用connect()

00:16:23.550 --> 00:16:24.952 align:middle line:-1
对于TCP套接字

00:16:25.018 --> 00:16:28.655 align:middle line:-1
这会将SYN数据包发送到

00:16:28.722 --> 00:16:29.656 align:middle line:-1
想要连接的服务器

00:16:30.824 --> 00:16:32.926 align:middle line:-2
但当你在NWConnection上
调用start()时

00:16:32.993 --> 00:16:36.330 align:middle line:-2
它实际上处理了
Josh之前提到的所有事情

00:16:37.531 --> 00:16:39.233 align:middle line:-1
它会评估你所在的网络

00:16:39.299 --> 00:16:42.369 align:middle line:-1
并尝试为你提供最快的连接

00:16:42.769 --> 00:16:44.538 align:middle line:-1
我想继续深入讨论一下

00:16:44.972 --> 00:16:48.475 align:middle line:-2
所以这就是我们所说的
智能连接搭建

00:16:49.943 --> 00:16:51.678 align:middle line:-1
当你调用start()时

00:16:52.012 --> 00:16:53.213 align:middle line:-1
我们所做的第一件事是

00:16:53.780 --> 00:16:55.115 align:middle line:-1
我们获取你的端点

00:16:55.749 --> 00:16:57.584 align:middle line:-1
然后我们评估当前可用的

00:16:57.651 --> 00:16:59.119 align:middle line:-1
所有网络是什么

00:16:59.786 --> 00:17:02.556 align:middle line:-2
在这个例子中
我们有Wi-Fi和蜂窝网络

