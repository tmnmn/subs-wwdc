WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.711 --> 00:33:00.280 align:middle line:-1
我们将超越套接字所能够做的事情

00:33:01.548 --> 00:33:04.985 align:middle line:-2
我想先谈谈
你在app中与网络连接

00:33:05.052 --> 00:33:07.154 align:middle line:-1
进行交互的

00:33:07.621 --> 00:33:08.989 align:middle line:-1
最基本的方式

00:33:09.590 --> 00:33:11.692 align:middle line:-1
即发送和接收数据

00:33:12.659 --> 00:33:14.828 align:middle line:-1
这些调用非常简单

00:33:15.162 --> 00:33:18.465 align:middle line:-2
但是关于你如何处理
发送和接收的细微差别

00:33:18.665 --> 00:33:22.536 align:middle line:-1
将对app的响应能力

00:33:22.603 --> 00:33:26.473 align:middle line:-2
以及设备和网络上正在进行多少缓冲
有着巨大影响

00:33:27.808 --> 00:33:29.710 align:middle line:-1
所以我想介绍的第一个例子

00:33:29.977 --> 00:33:31.445 align:middle line:-1
是当我们在app中

00:33:31.845 --> 00:33:32.679 align:middle line:-1
发送数据时

00:33:32.746 --> 00:33:34.848 align:middle line:-1
就像Eric刚向你展示的那样

00:33:35.182 --> 00:33:36.350 align:middle line:-1
一些正在直播的东西

00:33:36.416 --> 00:33:38.819 align:middle line:-1
一些动态生成数据的东西

00:33:39.620 --> 00:33:43.557 align:middle line:-2
但在这个例子中 让我们谈谈
使用TCP流来发送的情况

00:33:43.857 --> 00:33:46.293 align:middle line:-1
即可以在网络上恢复的TCP流

00:33:46.493 --> 00:33:48.395 align:middle line:-1
它具有可以发送的特定时间窗口

00:33:48.529 --> 00:33:49.830 align:middle line:-1
我们该如何处理该情况呢

00:33:51.598 --> 00:33:54.368 align:middle line:-1
这是一个发送单帧的函数

00:33:54.434 --> 00:33:57.871 align:middle line:-1
这是你的app生成的某些数据帧

00:33:59.439 --> 00:34:01.074 align:middle line:-1
你在连接上发送它的方式

