WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.593 --> 00:36:01.562 align:middle line:-2
你应该发送它并从视频流中
获取另一帧

00:36:01.628 --> 00:36:03.630 align:middle line:-1
因为现在正是你将下一个数据包

00:36:03.697 --> 00:36:04.631 align:middle line:-1
放入队列的时机

00:36:04.965 --> 00:36:07.901 align:middle line:-1
这使你可以一步一步地发送所有数据

00:36:08.702 --> 00:36:11.305 align:middle line:-2
正如你在这里看到的
我们实际上使用此异步发送回调

00:36:11.605 --> 00:36:16.677 align:middle line:-2
形成了一个循环
从而持续从我们的连接中消耗数据

00:36:16.743 --> 00:36:19.813 align:middle line:-1
并非常优雅地处理它

00:36:22.516 --> 00:36:24.818 align:middle line:-1
关于发送我想指出的另一件事

00:36:25.252 --> 00:36:29.156 align:middle line:-2
是Eric之前展示的
对UDP app很有效的技巧

00:36:29.223 --> 00:36:32.659 align:middle line:-1
这类app需要一次发送多个数据报

00:36:33.861 --> 00:36:36.263 align:middle line:-1
如果你需要发送一大堆很小的数据

00:36:36.330 --> 00:36:38.999 align:middle line:-1
或独立数据包

00:36:40.100 --> 00:36:43.370 align:middle line:-2
你可以使用我们添加的
称为connection.batch的东西

00:36:43.604 --> 00:36:48.008 align:middle line:-2
UDP套接字以前一次只能发送
一个数据包

00:36:48.542 --> 00:36:50.043 align:middle line:-1
这可能效率很低

00:36:50.110 --> 00:36:52.880 align:middle line:-2
因为如果我需要发送
100个UDP数据包

00:36:53.146 --> 00:36:56.116 align:middle line:-2
它们每个都是不同的系统调用
不同的副本

00:36:56.183 --> 00:36:57.918 align:middle line:-1
并且导致内核中大量的上下文切换

00:36:59.186 --> 00:37:01.989 align:middle line:-1
但如果你在那个块中调用batch

