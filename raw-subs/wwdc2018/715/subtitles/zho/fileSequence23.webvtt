WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.811 --> 00:23:00.180 align:middle line:0
我们只是从相机中取出原始字节

00:23:00.314 --> 00:23:03.050 align:middle line:0
通过网络发送它们
并在另一端进行显示

00:23:04.351 --> 00:23:07.120 align:middle line:0
为此我们需要将这些帧分割成

00:23:07.187 --> 00:23:10.624 align:middle line:0
我们可以用UDP数据
发送的较小块

00:23:11.859 --> 00:23:14.194 align:middle line:0
当然 要想在网络上发送
这些UDP数据包

00:23:14.328 --> 00:23:15.295 align:middle line:0
我们需要一个连接

00:23:16.830 --> 00:23:19.566 align:middle line:0
对于另一台设备
我们需要一个监听器

00:23:19.766 --> 00:23:21.502 align:middle line:0
它可以接收传入的连接

00:23:22.269 --> 00:23:24.471 align:middle line:0
并从网络上读取数据包

00:23:25.038 --> 00:23:27.307 align:middle line:0
此后我们只是逆转了之前的过程

00:23:27.674 --> 00:23:30.677 align:middle line:0
重新组装视频帧并将其发送到显示器

00:23:30.744 --> 00:23:32.246 align:middle line:0
以便我们能在屏幕上看到它们

00:23:34.047 --> 00:23:37.284 align:middle line:0
为了简单起见
我们已经抽象出了相机

00:23:37.351 --> 00:23:38.719 align:middle line:0
和显示功能

00:23:38.886 --> 00:23:42.089 align:middle line:0
这样我们就可以专注于使用
Network.framework的部分

00:23:43.524 --> 00:23:45.492 align:middle line:0
这里有一个我们尚未涉及的内容

00:23:45.626 --> 00:23:46.593 align:middle line:0
它就是监听器

00:23:46.727 --> 00:23:48.395 align:middle line:0
所以我们现在花点时间来了解它

00:23:50.230 --> 00:23:53.534 align:middle line:-2
监听器功能
由NWListener类提供

00:23:53.901 --> 00:23:56.537 align:middle line:-1
你可以使用与你用于配置连接的

00:23:56.703 --> 00:23:58.472 align:middle line:-1
相同的参数对象来创建它

00:23:59.706 --> 00:24:03.810 align:middle line:-2
设置一个监听器来发布
一项Bonjour服务非常简单

