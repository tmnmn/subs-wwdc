WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.925 --> 00:21:02.663 align:middle line:-2
此时已准备好了你的协议栈中
一直到上层的协议 例如TLS

00:21:03.430 --> 00:21:05.098 align:middle line:-1
此时你可以读和写

00:21:05.766 --> 00:21:08.435 align:middle line:-1
这也是我们对你所经历的网络切换

00:21:08.969 --> 00:21:12.172 align:middle line:-1
进行回调的地方

00:21:12.439 --> 00:21:15.709 align:middle line:-2
因此如果你的连接已建立
然后你更改了网络

00:21:15.943 --> 00:21:19.680 align:middle line:-2
我们会为你提供相应的更新
以便你可以优雅地处理移动性

00:21:20.113 --> 00:21:22.416 align:middle line:-1
我们稍后再继续讨论这个问题

00:21:24.718 --> 00:21:25.886 align:middle line:-1
如果连接出错

00:21:25.953 --> 00:21:28.188 align:middle line:-1
无论是在连接建立期间

00:21:28.422 --> 00:21:29.923 align:middle line:-1
还是已经连接后

00:21:29.990 --> 00:21:31.792 align:middle line:-1
你会得到一个错误并进入失败状态

00:21:32.826 --> 00:21:34.828 align:middle line:-1
然后一旦你用完了连接

00:21:34.895 --> 00:21:36.196 align:middle line:-1
假设你已经把它关闭了

00:21:36.263 --> 00:21:38.365 align:middle line:-1
或者你从另一端收到了关闭请求

00:21:38.632 --> 00:21:40.601 align:middle line:-1
并且你想要使连接无效

00:21:40.667 --> 00:21:43.570 align:middle line:-2
你可以调用cancel()
我们就会进入取消状态

00:21:43.637 --> 00:21:46.507 align:middle line:-2
这必定是我们将传递给
你的对象的最后事件

00:21:46.640 --> 00:21:50.410 align:middle line:-1
以便你可以清理所使用的任何内存

00:21:50.477 --> 00:21:52.579 align:middle line:-1
并继续进行下一步

00:21:53.847 --> 00:21:56.750 align:middle line:-2
就是这样 这是对
Network.framework中连接对象的

00:21:57.050 --> 00:21:59.119 align:middle line:-1
基本生命周期的概述

00:21:59.453 --> 00:22:02.656 align:middle line:-2
为了向你展示如何使用它
来构建一个简单的app

