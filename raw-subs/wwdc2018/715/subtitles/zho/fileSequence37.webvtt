WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.186 --> 00:37:01.989 align:middle line:-1
但如果你在那个块中调用batch

00:37:02.289 --> 00:37:05.759 align:middle line:-2
你想调用send或receive
多少次都可以

00:37:05.893 --> 00:37:08.996 align:middle line:-1
并且连接将停止处理任何数据

00:37:09.630 --> 00:37:11.698 align:middle line:-1
直到你完成此batch块

00:37:11.865 --> 00:37:13.967 align:middle line:-1
并尝试将所有这些数据报

00:37:14.034 --> 00:37:17.371 align:middle line:-1
作为单个批次传入系统

00:37:17.604 --> 00:37:21.241 align:middle line:-2
理想情况下
只有一个上下文切换到内核中

00:37:21.308 --> 00:37:22.743 align:middle line:-1
并最终从接口发送出去

00:37:23.043 --> 00:37:25.345 align:middle line:-1
这使你非常非常有效率

00:37:27.414 --> 00:37:28.315 align:middle line:-1
以上就是发送

00:37:28.715 --> 00:37:32.152 align:middle line:-1
接收与发送一样是异步的

00:37:32.352 --> 00:37:35.088 align:middle line:-1
而异步性质则会给你

00:37:35.155 --> 00:37:36.523 align:middle line:-1
能够让你调整app的背压

00:37:38.492 --> 00:37:42.196 align:middle line:-2
在这个例子中
我有一个基于TCP的协议

00:37:42.763 --> 00:37:45.299 align:middle line:-1
并且app想要读取某种类型的

00:37:45.699 --> 00:37:49.203 align:middle line:-1
记录格式非常常见

00:37:50.571 --> 00:37:54.508 align:middle line:-1
假设你的协议有一个10字节的头部

00:37:54.708 --> 00:37:57.177 align:middle line:-2
它告诉你有关你将要收到的
内容的一些信息

00:37:57.311 --> 00:37:59.513 align:middle line:-1
比如你将要接收的主体长度

