WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.905 --> 00:29:00.641 align:middle line:-1
这里 我对添加端点的情况感兴趣

00:29:00.974 --> 00:29:02.776 align:middle line:-1
如果它是服务类型

00:29:03.010 --> 00:29:06.446 align:middle line:-2
我将告诉app的其余部分
它所发布的名称

00:29:06.513 --> 00:29:09.116 align:middle line:-1
即我要求系统提供的默认设备名称

00:29:09.183 --> 00:29:10.851 align:middle line:-1
以便我可以在UI中显示它

00:29:10.984 --> 00:29:12.753 align:middle line:-1
并让我的用户在其它地方输入它

00:29:19.960 --> 00:29:22.729 align:middle line:-2
我要在监听器上设置一个新的
连接处理程序

00:29:22.963 --> 00:29:24.431 align:middle line:-1
它在每次监听器收到新的

00:29:24.498 --> 00:29:26.099 align:middle line:-1
传入连接时都会被调用

00:29:27.534 --> 00:29:29.603 align:middle line:-1
我可以对这些连接进行一些配置

00:29:29.736 --> 00:29:31.238 align:middle line:-1
但这里使用默认配置就够了

00:29:31.305 --> 00:29:33.974 align:middle line:-2
因此我只需调用connection.start()
并传入一个队列

00:29:36.376 --> 00:29:40.581 align:middle line:-2
我在这里通知app的其余部分
我已收到传入连接

00:29:40.781 --> 00:29:42.850 align:middle line:-1
以便它可以开始预热显示管道

00:29:42.983 --> 00:29:45.252 align:middle line:-1
并准备好显示视频帧

00:29:46.320 --> 00:29:49.723 align:middle line:-2
我也会调用自身receive()
我稍后再实现它

00:29:49.857 --> 00:29:51.725 align:middle line:-1
来开始从网络中读取该数据

00:29:51.792 --> 00:29:53.427 align:middle line:-1
并将其发送到显示管道

00:29:55.596 --> 00:29:57.664 align:middle line:-1
就像连接一样 监听器也有

