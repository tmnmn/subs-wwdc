WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:56.116 --> 00:47:00.754 align:start position:32% line:-2
カーネルから
データをコピーします

00:47:01.355 --> 00:47:06.360 align:start position:30% line:-2
TLSの場合は
データを暗号化するため

00:47:06.460 --> 00:47:08.996 align:start position:29% line:-1
もう１つ別の転換をします

00:47:10.264 --> 00:47:13.600 align:start position:27% line:-2
では ユーザ空間
ネットワーキングの場合は？

00:47:16.170 --> 00:47:22.776 align:start position:16% line:-2
TCPとUDPがアプリケーションの方へ
移動しました

00:47:22.876 --> 00:47:24.445 align:start position:32% line:-1
どうなるでしょうか？

00:47:24.945 --> 00:47:29.183 align:start position:29% line:-2
パケットは先ほどと同様に
ドライバに入ります

00:47:29.283 --> 00:47:34.188 align:start position:21% line:-1
しかし それを自動的に集めるよう

00:47:34.288 --> 00:47:36.790 align:start position:29% line:-2
メモリマップされた領域に
移動しました

00:47:36.890 --> 00:47:42.596 align:start position:29% line:-2
そして パケットは
自動的に処理され始めます

00:47:42.696 --> 00:47:48.135 align:start position:27% line:-2
唯一の転換はTLSのための
データの復号化だけです

00:47:49.369 --> 00:47:54.842 align:start position:29% line:-2
これでパケットの送受信の
CPUの時間を減らせます

00:47:54.975 --> 00:47:57.444 align:start position:34% line:-2
特にUDPのような
プロトコルでは

00:47:57.544 --> 00:48:01.982 align:start position:21% line:-2
アプリケーションから
パケットの送信を繰り返すでしょう

