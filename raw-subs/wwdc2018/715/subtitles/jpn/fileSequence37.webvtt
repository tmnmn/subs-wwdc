WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.086 --> 00:37:02.156 align:start position:30% line:-2
しかし ブロックの中で
バッチを呼び出せば

00:37:02.256 --> 00:37:05.759 align:start position:27% line:-1
好きなだけ送受信が可能です

00:37:05.859 --> 00:37:11.732 align:start position:25% line:-2
バッチをブロックし終えるまで
接続はデータ処理を阻止します

00:37:11.832 --> 00:37:14.601 align:start position:30% line:-2
そして データグラムを
一塊として

00:37:14.701 --> 00:37:17.471 align:start position:29% line:-1
システムに送信を試みます

00:37:17.571 --> 00:37:22.910 align:start position:25% line:-2
１回のコンテキストスイッチで
インターフェイスに送信

00:37:23.010 --> 00:37:25.646 align:start position:30% line:-1
これで効率が上がります

00:37:27.414 --> 00:37:28.515 align:start position:38% line:-1
以上が送信です

00:37:28.749 --> 00:37:32.252 align:start position:34% line:-2
受信も送信と同様に
非同期です

00:37:32.352 --> 00:37:36.657 align:start position:25% line:-2
非同期はバックプレッシャーを
与えてくれます

00:37:38.492 --> 00:37:42.663 align:start position:21% line:-2
今回はTCPベースのプロトコルを
持っています

00:37:42.763 --> 00:37:47.000 align:start position:25% line:-2
これはレコードフォーマットを
読み込むアプリケーションで―

00:37:47.101 --> 00:37:49.403 align:start position:27% line:-1
よく使われるプロトコルです

00:37:50.571 --> 00:37:54.575 align:start position:23% line:-2
プロトコルがデータの長さなどの
情報を伝える―

00:37:54.675 --> 00:37:59.713 align:start position:27% line:-2
10バイトの
ヘッダを持っているとします

