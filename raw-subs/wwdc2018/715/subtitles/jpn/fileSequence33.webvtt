WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:55.909 --> 00:33:00.480 align:start position:25% line:-2
ソケット以上に作業を
最適化する方法を持つことです

00:33:01.548 --> 00:33:05.752 align:start position:32% line:-2
アプリケーション内で
ネットワーク接続と―

00:33:05.853 --> 00:33:11.992 align:start position:23% line:-2
相互作用する基本的な
データの送受信を見てみましょう

00:33:12.659 --> 00:33:15.129 align:start position:29% line:-1
呼び出し方法は単純ですが

00:33:15.229 --> 00:33:20.567 align:start position:27% line:-2
送受信はアプリケーションの
反応速度に影響し

00:33:20.667 --> 00:33:26.640 align:start position:27% line:-2
バッファリングはデバイスと
ネットワークに依存します

00:33:27.775 --> 00:33:31.745 align:start position:27% line:-2
では アプリケーションで
データを送信してみましょう

00:33:31.845 --> 00:33:34.982 align:start position:27% line:-2
先ほどのアプリケーションに
似ていますが

00:33:35.082 --> 00:33:38.986 align:start position:30% line:-2
こちらはデータを忙しく
生成するものです

00:33:39.586 --> 00:33:43.657 align:start position:32% line:-2
今回使用する
TCPストリームには

00:33:43.757 --> 00:33:48.395 align:start position:36% line:-2
あるウインドウが
実装されています

00:33:48.495 --> 00:33:50.197 align:start position:36% line:-1
その操作方法は？

00:33:51.565 --> 00:33:54.234 align:start position:32% line:-2
これが単一フレームを
送る機能で

00:33:54.334 --> 00:33:58.172 align:start position:32% line:-2
これは生成した
データのフレームです

00:33:59.439 --> 00:34:05.045 align:start position:9% line:-2
まず connection.sendを呼び出し
データを受け渡します

