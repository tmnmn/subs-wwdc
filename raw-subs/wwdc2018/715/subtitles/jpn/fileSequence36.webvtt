WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.593 --> 00:36:04.832 align:start position:23% line:-2
別のビデオストリームから
フレームをフェッチしてください

00:36:04.932 --> 00:36:08.102 align:start position:32% line:-2
これでデータの速度を
調整できます

00:36:08.669 --> 00:36:14.141 align:start position:21% line:-2
そして非同期の送信コールバックで
接続からデータを抜き

00:36:14.241 --> 00:36:19.980 align:start position:32% line:-2
それを優雅に操作する
ループを形成しました

00:36:22.482 --> 00:36:26.720 align:start position:30% line:-2
もう１つ 送信について
注目したいのは

00:36:26.820 --> 00:36:32.893 align:start position:29% line:-2
UDPアプリケーションに
最適だということです

00:36:33.827 --> 00:36:39.333 align:start position:25% line:-2
多くの小さなデータや
個別のパケットを送信するなら

00:36:40.067 --> 00:36:43.404 align:start position:11% line:-2
connection.batchという機能を
使うことができます

00:36:43.504 --> 00:36:45.739 align:start position:30% line:-1
以前 UDPソケットは

00:36:45.839 --> 00:36:49.977 align:start position:25% line:-2
１つのパケットしか送信できず
非効率でした

00:36:50.077 --> 00:36:52.980 align:start position:29% line:-2
つまり 多くの
UDPパケットがある時は

00:36:53.080 --> 00:36:58.318 align:start position:21% line:-2
異なるシステムコールやコピー
コンテキストスイッチがありました

00:36:59.086 --> 00:37:02.156 align:start position:30% line:-2
しかし ブロックの中で
バッチを呼び出せば

