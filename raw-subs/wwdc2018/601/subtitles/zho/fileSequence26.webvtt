WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.090 --> 00:26:00.260 align:middle line:-1
还有个特殊情况需要特别注意

00:26:00.327 --> 00:26:02.529 align:middle line:-1
就是隔空播放投屏

00:26:03.664 --> 00:26:06.400 align:middle line:-1
我来展示你们可以如何处理

00:26:06.466 --> 00:26:09.503 align:middle line:-1
通过这个代码样本通知处理程序

00:26:10.237 --> 00:26:13.473 align:middle line:-1
基本来说 在投屏的情况下

00:26:13.707 --> 00:26:15.576 align:middle line:-1
屏幕数量一般多于一个

00:26:15.843 --> 00:26:20.080 align:middle line:-2
Screens这个数组
包含的值大于1

00:26:20.147 --> 00:26:23.951 align:middle line:-2
那么即使isCaptured
返回值为yes

00:26:24.117 --> 00:26:25.986 align:middle line:-1
在投屏的时候

00:26:26.720 --> 00:26:30.357 align:middle line:-1
这一步检查也可以保证回放继续

00:26:34.228 --> 00:26:38.298 align:middle line:-1
以上就是屏幕直播及其运行原理

00:26:38.498 --> 00:26:39.499 align:middle line:-1
总结来说

00:26:40.667 --> 00:26:42.736 align:middle line:-1
ReplayKit提供高级API

00:26:42.803 --> 00:26:45.572 align:middle line:-1
让你可以直播一个app的内容

00:26:46.173 --> 00:26:48.709 align:middle line:-1
或屏幕上的所有活动内容

00:26:50.110 --> 00:26:53.413 align:middle line:-2
iOS 12中
我们提供一个API

00:26:53.914 --> 00:26:58.252 align:middle line:-2
或一种启动系统直播的方法
可直接从app中操作

