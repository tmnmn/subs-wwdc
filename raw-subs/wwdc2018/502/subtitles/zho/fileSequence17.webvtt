WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.656 --> 00:17:01.906 A:middle
丢弃现有的音频缓冲区

00:17:01.906 --> 00:17:05.266 A:middle
播放器开始下载不同的语言变量

00:17:05.266 --> 00:17:08.736 A:middle
几秒钟后

00:17:08.736 --> 00:17:11.965 A:middle
PlayerItem 通知 isPlaybackLikeToKeepUp

00:17:11.996 --> 00:17:14.626 A:middle
App 设置一个速率

00:17:15.376 --> 00:17:17.746 A:middle
播放开始 并从断点继续

00:17:18.465 --> 00:17:20.856 A:middle
这一段时间 用户都在等待

00:17:22.165 --> 00:17:28.266 A:middle
所以正如我们所看到的启动

00:17:28.266 --> 00:17:30.686 A:middle
以及在设备 内容服务器

00:17:31.076 --> 00:17:33.436 A:middle
和密钥服务器之间运行

00:17:33.896 --> 00:17:34.796 A:middle
还有 AVPlayer 和

00:17:35.326 --> 00:17:37.726 A:middle
App 之间的往返

00:17:37.726 --> 00:17:39.556 A:middle
均需要一些耗时的操作

00:17:40.156 --> 00:17:42.236 A:middle
通常 AVPlayer 和 App

00:17:42.236 --> 00:17:43.266 A:middle
在不同的进程中

00:17:44.446 --> 00:17:46.176 A:middle
那么 App 如何

00:17:46.516 --> 00:17:48.506 A:middle
测量时间成本和启动时间呢

00:17:49.536 --> 00:17:52.776 A:middle
它可以测量在 API 调用

00:17:52.776 --> 00:17:55.426 A:middle
与 Player/PlayerItem

00:17:55.426 --> 00:17:56.936 A:middle
状态更改通知之间

00:17:57.156 --> 00:17:58.916 A:middle
所花费的时间

00:17:59.516 --> 00:18:02.836 A:middle
每个 PlayerItem 也提供

