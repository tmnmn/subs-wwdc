WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.893 --> 00:31:00.727 align:middle line:-1
现在

00:31:01.261 --> 00:31:04.998 align:middle line:-2
在推理阶段
你将你的模型放入app中

00:31:05.399 --> 00:31:06.466 align:middle line:-1
但这不是全部

00:31:07.234 --> 00:31:08.569 align:middle line:-1
你也必须确保

00:31:09.169 --> 00:31:13.207 align:middle line:-1
你编写的用于分词和特征提取的代码

00:31:13.273 --> 00:31:14.741 align:middle line:-1
与训练时所用代码效果一致

00:31:16.543 --> 00:31:18.879 align:middle line:-2
这需要付出很大的努力
因为你必须考虑

00:31:18.946 --> 00:31:20.681 align:middle line:-1
最大限度地提高模型的保真度

00:31:20.814 --> 00:31:24.785 align:middle line:-1
确保在训练和推理阶段都使用

00:31:24.852 --> 00:31:27.154 align:middle line:-1
相同的分词和特征提取方法非常重要

00:31:27.888 --> 00:31:31.291 align:middle line:-2
但现有了Natural Language
你可以完全避免这种情况

00:31:31.792 --> 00:31:35.929 align:middle line:-2
如果你看一下训练的流程
这是训练数据

00:31:37.231 --> 00:31:40.334 align:middle line:-2
你可通过我们讨论过的API
将它传递给Create ML

00:31:41.134 --> 00:31:43.971 align:middle line:0
Create ML在底层调用
Natural Language

00:31:44.037 --> 00:31:47.708 align:middle line:0
后者进行分词 特征提取
选择机器学习库

00:31:47.774 --> 00:31:52.045 align:middle line:0
完成所有这些工作
并返回一个Core ML模型

00:31:53.080 --> 00:31:56.850 align:middle line:0
在推理阶段 你做的事仍然是
将这个模型放入你的app中

00:31:58.151 --> 00:32:00.721 align:middle line:0
但你不必关心分词 特征提取

