WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.552 --> 00:27:00.787 align:middle line:-2
然后立即看到了
邮箱地址拼写不正确

00:27:01.255 --> 00:27:04.691 align:middle line:-2
这些都是很棒的值
你可以记录下来并在解决问题

00:27:04.758 --> 00:27:05.993 align:middle line:-1
和学习API过程中使用

00:27:06.994 --> 00:27:08.896 align:middle line:-1
但你一定不想在代码中用到它们

00:27:08.962 --> 00:27:10.898 align:middle line:-1
你不想用这些来中断你的编码

00:27:11.164 --> 00:27:13.200 align:middle line:-1
我并不能做出任何承诺说未经允许

00:27:13.267 --> 00:27:15.736 align:middle line:-1
我们不会修改这些信息中的文字

00:27:17.037 --> 00:27:21.008 align:middle line:-2
对于程序性报错处理
你得使用代码属性

00:27:21.341 --> 00:27:24.978 align:middle line:-2
这是一个稳定的机器可读字符串
表示发生了哪些错误

00:27:25.345 --> 00:27:29.550 align:middle line:-2
它有一个分层的值
在特定等级之间用点隔开

00:27:29.616 --> 00:27:32.753 align:middle line:-2
那么在本例中
我可以看到我有一个参数报错

00:27:32.819 --> 00:27:35.822 align:middle line:-2
通常更具体地说
其中一个参数是无效的

00:27:36.557 --> 00:27:39.059 align:middle line:-1
现在这些代码可以变得很长、很精确

00:27:39.593 --> 00:27:41.929 align:middle line:-1
有时候你并不关心精确度

00:27:41.995 --> 00:27:44.598 align:middle line:-2
事实上你通常不会这样做
所以我们这样构建它们

00:27:44.665 --> 00:27:47.668 align:middle line:-2
从而你可以在代码中执行前缀匹配
可以是模糊匹配

00:27:47.734 --> 00:27:51.205 align:middle line:-1
或是精确匹配 取决于你自己的用例

00:27:51.772 --> 00:27:53.106 align:middle line:-1
但如果你需要精确匹配

00:27:53.173 --> 00:27:55.375 align:middle line:-1
比如 你可以报告返回你自己的用户

00:27:55.442 --> 00:27:57.010 align:middle line:-1
并附带发生了哪些错误的清晰说明

00:27:57.077 --> 00:27:59.346 align:middle line:-1
我们尽量给你们足够的信息

