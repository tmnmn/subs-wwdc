WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.644 --> 00:38:00.113 align:middle line:-1
如果你不断重复使用那些令牌

00:38:00.514 --> 00:38:02.182 align:middle line:-1
通常这是一件很简单的事 对吧

00:38:02.249 --> 00:38:04.718 align:middle line:-1
你只需要在脚本顶部生成一个令牌

00:38:04.785 --> 00:38:06.954 align:middle line:-1
在每次请求时发送令牌 直到完成

00:38:07.287 --> 00:38:11.258 align:middle line:-2
我们可以让你控制到期时间
因为你是最了解

00:38:11.325 --> 00:38:14.294 align:middle line:-2
它应该持续多久的人
这些时间足够完成那个进程

00:38:14.361 --> 00:38:16.530 align:middle line:-1
并且不会比所需要的时间长太多

00:38:17.865 --> 00:38:20.667 align:middle line:-2
当然 有些进程的执行
可能会超过20分钟

00:38:20.734 --> 00:38:22.736 align:middle line:-2
或需要连续不断地运行
如果是这种情况

00:38:22.803 --> 00:38:24.638 align:middle line:-1
你在编码结构上要有一点不一样了

00:38:25.205 --> 00:38:28.509 align:middle line:-2
也许你会生成一个20分钟的令牌
并根据需要使用它

00:38:28.942 --> 00:38:31.912 align:middle line:-2
然后把它丢掉并在旧令牌到期之前
分配一个新令牌

00:38:31.979 --> 00:38:33.247 align:middle line:-1
比如 每18分钟换一次

00:38:33.547 --> 00:38:35.382 align:middle line:-1
那样你会最大程度上重复使用令牌

00:38:35.449 --> 00:38:38.685 align:middle line:-2
从而获得最佳性能
并且你永远不会发送过期令牌

00:38:40.721 --> 00:38:41.989 align:middle line:-1
接下来我要谈的是

00:38:42.055 --> 00:38:43.824 align:middle line:-1
响应中所包含的链接

00:38:44.224 --> 00:38:45.559 align:middle line:-1
今天我们谈到了这些

00:38:45.626 --> 00:38:48.128 align:middle line:-1
作为自文档的一种漂亮的形式

00:38:48.195 --> 00:38:51.231 align:middle line:-2
一种可以让你查看数据并了解
还有什么其它可用东西的方法

00:38:51.298 --> 00:38:52.799 align:middle line:-1
但这并不是唯一原因

00:38:52.933 --> 00:38:55.903 align:middle line:-1
实际上你的代码可以使用它们

00:38:56.303 --> 00:38:59.540 align:middle line:-2
当你执行多步骤进程时
无论何时只要有可能

00:38:59.606 --> 00:39:01.675 align:middle line:-1
请把我提供的链接从响应中拿出来

