WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:56.750 --> 00:32:00.254 align:middle line:-2
让我们回到Xcode
并找到当测验第一次启动时

00:32:00.320 --> 00:32:02.923 align:middle line:-1
被调用的那部分代码

00:32:04.525 --> 00:32:09.563 align:middle line:-1
这里 我们想要为我们的测验

00:32:09.630 --> 00:32:13.600 align:middle line:-1
启动计时器

00:32:14.067 --> 00:32:16.370 align:middle line:-2
我们要做的是
向CLSDataStore实例

00:32:16.436 --> 00:32:19.173 align:middle line:-1
发起一个查询

00:32:20.007 --> 00:32:22.843 align:middle line:-1
然后我们要在主app上下文中查询

00:32:23.343 --> 00:32:27.247 align:middle line:-1
所有与标识符路径相匹配的后代

00:32:27.714 --> 00:32:29.583 align:middle line:-1
这些标识符路径与此测验相关联

00:32:30.584 --> 00:32:32.819 align:middle line:-1
这将返回一个可选上下文

00:32:33.787 --> 00:32:35.255 align:middle line:-1
我们使用该上下文

00:32:35.956 --> 00:32:37.958 align:middle line:-2
确保调用它的
becomeActive方法

00:32:38.659 --> 00:32:42.796 align:middle line:-2
然后我们将实例化
一个新的CLS活动实例

00:32:43.230 --> 00:32:47.267 align:middle line:-1
这是因为当这部分代码运行时

00:32:47.601 --> 00:32:50.504 align:middle line:-2
我们就知道学生正对该测验
进行一次新的尝试

00:32:51.071 --> 00:32:53.507 align:middle line:-1
接着我们要缓存该活动

00:32:53.574 --> 00:32:55.375 align:middle line:-1
以及我们定义的属性

00:32:56.910 --> 00:33:00.080 align:middle line:-2
然后我们调用活动的start方法
来启动我们的计时器

