WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.486 --> 00:12:00.921 align:middle line:-1
这当你的上下文是

00:12:00.988 --> 00:12:04.191 align:middle line:-2
按需下载的时候通常很有用
这种情况下你的所有上下文都不可用

00:12:04.258 --> 00:12:08.295 align:middle line:-1
因此你想按需创建这些上下文

00:12:08.362 --> 00:12:12.733 align:middle line:-2
它的工作原理是
当我们开始查询路径中的上下文时

00:12:13.033 --> 00:12:17.938 align:middle line:-1
如果你没有在该路径上找到上下文

00:12:18.005 --> 00:12:22.042 align:middle line:-1
我们将在你定义的委托上调用

00:12:22.109 --> 00:12:24.011 align:middle line:-1
createContext(forIdentifier)方法

00:12:24.411 --> 00:12:26.413 align:middle line:-1
这给你一个创建所遗失上下文的机会

00:12:27.414 --> 00:12:30.117 align:middle line:-2
当你创建好了上下文
我们将把这个上下文

00:12:30.184 --> 00:12:32.853 align:middle line:-1
添加到树中的正确位置

00:12:35.722 --> 00:12:39.526 align:middle line:-2
正如我所提到的
这对具有动态内容的app非常有用

00:12:40.060 --> 00:12:42.362 align:middle line:-1
让我们来看看实践中这是如何运作的

00:12:43.330 --> 00:12:45.799 align:middle line:-1
我们还使用相同的标识符路径

00:12:45.866 --> 00:12:49.770 align:middle line:-2
但这次 我们的树并不完整
而且我们有一个委托对象

00:12:49.837 --> 00:12:51.171 align:middle line:-1
（委托实战）

00:12:51.238 --> 00:12:54.374 align:middle line:-1
我们首先访问“App”上下文

00:12:55.309 --> 00:12:57.144 align:middle line:-1
然后我们将访问“Book”上下文

00:12:57.744 --> 00:13:01.381 align:middle line:-2
接着我们将尝试访问
“chapter-2”上下文

