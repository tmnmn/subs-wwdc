WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.265 --> 00:20:00.801 align:middle line:-2
然后计算特征点
并填充landmarks字段

00:20:02.202 --> 00:20:06.340 align:middle line:-2
现在如果你看一下两者的uuid
你会注意到它们是相同的

00:20:07.140 --> 00:20:09.977 align:middle line:-2
为什么会这样？
因为这是同一张脸

00:20:10.043 --> 00:20:12.446 align:middle line:-1
它具有相同的处理步骤

00:20:14.147 --> 00:20:16.517 align:middle line:-1
你分别应该在何时使用隐式与显式呢

00:20:17.251 --> 00:20:19.453 align:middle line:-1
如果你的app非常简单

00:20:19.520 --> 00:20:22.256 align:middle line:-1
你可能希望选择隐式方式

00:20:22.322 --> 00:20:24.091 align:middle line:-1
它很简单 你创建一个请求

00:20:24.157 --> 00:20:25.926 align:middle line:-1
其它一切都自动替你完成

00:20:28.595 --> 00:20:31.398 align:middle line:-1
另一方面 如果你的app比较复杂

00:20:31.465 --> 00:20:34.501 align:middle line:-2
例如 你想先处理面部
检测它们

00:20:34.902 --> 00:20:35.903 align:middle line:-1
然后做一些过滤

00:20:35.969 --> 00:20:38.205 align:middle line:-1
假设你不关心周边的面孔

00:20:38.272 --> 00:20:41.074 align:middle line:-1
或者你只想专注于中间的那些

00:20:41.875 --> 00:20:43.010 align:middle line:-1
你可以做那一步

00:20:43.076 --> 00:20:46.446 align:middle line:-2
然后你可以在剩下的一组面孔上
做特征点检测

00:20:47.147 --> 00:20:49.550 align:middle line:-2
在这种情况下
你可能希望使用显式版本

00:20:50.551 --> 00:20:51.518 align:middle line:-1
因为在这种情况下

00:20:51.952 --> 00:20:55.322 align:middle line:-2
特征点检测器不会重新运行
面部检测器

