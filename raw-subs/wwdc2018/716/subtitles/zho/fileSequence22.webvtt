WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.818 --> 00:22:00.153 align:middle line:-2
只要你需要就使用它
否则就立即释放它

00:22:00.687 --> 00:22:04.224 align:middle line:-2
请记住 它会缓存图像
和多种图像衍生物

00:22:06.360 --> 00:22:08.595 align:middle line:-1
序列请求处理程序的情况

00:22:08.662 --> 00:22:10.764 align:middle line:-2
与其非常相似
唯一的区别是

00:22:10.831 --> 00:22:12.299 align:middle line:-1
如果你过早释放

00:22:12.366 --> 00:22:14.067 align:middle line:-1
你几乎作废了整个序列

00:22:14.134 --> 00:22:16.170 align:middle line:-1
因为整个缓存现在已经消失了

00:22:18.539 --> 00:22:20.807 align:middle line:-1
请求和观察又会怎么样呢？

00:22:21.675 --> 00:22:25.412 align:middle line:-1
请求和观察是非常轻量级的对象

00:22:25.479 --> 00:22:27.347 align:middle line:-1
你可以根据需要创建和释放它们

00:22:27.414 --> 00:22:28.382 align:middle line:-1
无需缓存它们

00:22:35.822 --> 00:22:37.324 align:middle line:-1
我们应该在何处处理你的请求

00:22:39.860 --> 00:22:43.430 align:middle line:-2
Vision中的许多请求都依赖于
在设备上运行神经网络

00:22:44.464 --> 00:22:49.203 align:middle line:-2
众所周知 在GPU上运行
神经网络通常比CPU更快

00:22:51.805 --> 00:22:53.907 align:middle line:-2
所以很自然的问题是
我们该在哪运行它？

00:22:55.742 --> 00:22:59.746 align:middle line:-2
我们在Vision中是这样做的
如果请求可在GPU中运行

00:22:59.813 --> 00:23:01.248 align:middle line:-1
我们会先尝试这样做

