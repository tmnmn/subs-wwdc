WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:02.529 --> 00:21:04.665 align:middle line:-1
我们希望你的app

00:21:04.731 --> 00:21:07.534 align:middle line:-2
在内存使用和执行速度方面
具有最佳性能

00:21:07.601 --> 00:21:09.570 align:middle line:-1
因此接下来的两张幻灯片很重要

00:21:11.905 --> 00:21:13.740 align:middle line:-1
你应该将对象保存在内存中多久

00:21:16.944 --> 00:21:18.478 align:middle line:-1
对于图像请求处理程序

00:21:18.545 --> 00:21:21.481 align:middle line:-2
只要图像还需要处理
你就应该保留它

00:21:22.282 --> 00:21:24.952 align:middle line:-2
这听起来像是一个
非常天真和简单的陈述

00:21:25.219 --> 00:21:27.254 align:middle line:-1
但你做到这一点非常重要

00:21:28.188 --> 00:21:29.656 align:middle line:-1
如果你过早释放该对象

00:21:29.723 --> 00:21:32.159 align:middle line:-1
而你仍有待处理的未完成请求

00:21:32.226 --> 00:21:34.394 align:middle line:-1
你将必须重新创建图像请求处理程序

00:21:34.661 --> 00:21:36.597 align:middle line:-1
但现在你已经丢失了所有

00:21:36.663 --> 00:21:38.465 align:middle line:-1
与前一个对象关联的缓存

00:21:38.665 --> 00:21:42.035 align:middle line:-2
因此你必须花费这些开销
才能重新计算这些衍生物

00:21:43.837 --> 00:21:46.039 align:middle line:-1
另一方面 如果你释放得太晚了

00:21:46.473 --> 00:21:49.276 align:middle line:-1
首先这会导致内存碎片

00:21:49.743 --> 00:21:52.946 align:middle line:-1
并且你的app将无法回收内存

00:21:53.013 --> 00:21:54.848 align:middle line:-1
来做你想要做的其它有意义的事情

00:21:56.416 --> 00:21:57.751 align:middle line:-1
所以释放它很重要

00:21:57.818 --> 00:22:00.153 align:middle line:-2
只要你需要就使用它
否则就立即释放它

