WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.640 --> 00:39:02.943 align:middle line:0
你运行检测器
并在接下来的50帧跟踪该对象

00:39:03.343 --> 00:39:06.246 align:middle line:-2
你重新运行检测器
然后再次运行50帧

00:39:06.313 --> 00:39:07.614 align:middle line:-1
不断重复这个过程

00:39:08.182 --> 00:39:10.317 align:middle line:-1
从终端用户的角度来看

00:39:10.384 --> 00:39:12.786 align:middle line:-1
它看起来就像是在跟踪一个对象

00:39:13.687 --> 00:39:16.557 align:middle line:-1
然而你在内部所做的是

00:39:16.623 --> 00:39:18.158 align:middle line:-1
你正在跟踪较小的序列

00:39:18.225 --> 00:39:21.495 align:middle line:-2
这是一种更智能的
运行和跟踪序列的方式

00:39:27.234 --> 00:39:28.936 align:middle line:-1
让我们总结一下今天的内容

00:39:30.237 --> 00:39:32.439 align:middle line:-2
首先我们讨论了
为什么要使用Vision

00:39:32.739 --> 00:39:34.875 align:middle line:-1
我们谈到它是一个多平台框架

00:39:35.209 --> 00:39:38.745 align:middle line:-2
并且是面向隐私的
而且提供简单一致的界面

00:39:41.381 --> 00:39:43.250 align:middle line:-1
其次 我们谈到了新特性

00:39:43.517 --> 00:39:47.154 align:middle line:-2
我们推出了一种新的
取向无关的面部检测器

00:39:48.021 --> 00:39:49.556 align:middle line:-1
我们还谈到了修正版本

00:39:51.225 --> 00:39:54.161 align:middle line:-2
接下来我们讨论了
如何与Vision API交互

00:39:54.461 --> 00:39:58.565 align:middle line:-2
并讨论了请求
请求处理程序和观察

00:39:59.933 --> 00:40:03.804 align:middle line:0
最后 如何在Vision中
实现跟踪序列

