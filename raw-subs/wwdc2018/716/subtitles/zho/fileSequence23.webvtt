WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.813 --> 00:23:01.248 align:middle line:-1
我们会先尝试这样做

00:23:01.949 --> 00:23:05.052 align:middle line:-2
如果GPU在那个时间点
由于某种原因不可用

00:23:05.118 --> 00:23:06.386 align:middle line:-1
我们将切换到CPU

00:23:07.955 --> 00:23:09.389 align:middle line:-1
因为这是我们的默认行为

00:23:10.991 --> 00:23:13.927 align:middle line:0
但假设你的app需要

00:23:13.994 --> 00:23:16.063 align:middle line:0
在屏幕上显示大量图片

00:23:16.129 --> 00:23:19.433 align:middle line:0
因此你可能希望为该特定作业
保留GPU的使用

00:23:20.133 --> 00:23:23.003 align:middle line:0
在这种情况下 你可以将请求对象的

00:23:23.070 --> 00:23:25.105 align:middle line:0
usesCPUOnly属性
设置为true

00:23:25.439 --> 00:23:28.275 align:middle line:0
这将告诉我们直接在CPU上
处理你的请求

00:23:35.282 --> 00:23:38.886 align:middle line:0
我们已经介绍了如何与Vision
特别是Vision API

00:23:38.952 --> 00:23:42.055 align:middle line:0
交互的基础知识
我们也已经看过几个例子

00:23:42.623 --> 00:23:44.591 align:middle line:0
让我们切换到这次演讲的主题

00:23:44.658 --> 00:23:46.426 align:middle line:0
即在Vision中进行跟踪

00:23:48.862 --> 00:23:52.466 align:middle line:-2
什么是跟踪呢？
跟踪被定义为

00:23:52.533 --> 00:23:55.702 align:middle line:-1
在一系列帧中找到感兴趣的对象

00:23:56.069 --> 00:23:58.172 align:middle line:-1
通常 你在第一帧中找到该对象

00:23:58.238 --> 00:24:01.208 align:middle line:-1
并在接下来尝试在帧序列中查找它

