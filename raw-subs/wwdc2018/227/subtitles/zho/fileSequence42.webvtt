WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.286 --> 00:42:00.954 align:middle line:-1
的合适象限内

00:42:01.021 --> 00:42:04.591 align:middle line:-1
然后在低端 你可以放置静态图像

00:42:04.658 --> 00:42:07.794 align:middle line:-2
或是简单的图像序列 这些图像序列
不会占用设备上的任何时间

00:42:07.861 --> 00:42:09.997 align:middle line:-1
或过多的资源

00:42:10.063 --> 00:42:12.232 align:middle line:-1
你可以为仍然使用旧设备的用户

00:42:12.299 --> 00:42:14.535 align:middle line:-1
提供良好且响应迅速的用户体验

00:42:16.003 --> 00:42:17.004 align:middle line:-1
这是其中一个例子

00:42:17.070 --> 00:42:19.373 align:middle line:-1
另一个更有趣的例子是plist

00:42:19.439 --> 00:42:21.241 align:middle line:-1
为何我把plist放入资源目录？

00:42:21.308 --> 00:42:24.444 align:middle line:-2
似乎有比资源目录
更好的方式来部署plist

00:42:24.511 --> 00:42:28.615 align:middle line:-2
比如说 当你将它与
NSDataAsset结合使用时

00:42:28.682 --> 00:42:31.318 align:middle line:-2
你可以考虑使用plist来
调整你的app

00:42:32.186 --> 00:42:35.989 align:middle line:-2
并在你的NSDataAsset中
使用不同的配置参数

00:42:36.056 --> 00:42:40.327 align:middle line:-2
这些参数根据你编入plist的
性能等级进行调整

00:42:40.394 --> 00:42:42.095 align:middle line:-1
例如 如果你有

00:42:43.130 --> 00:42:45.933 align:middle line:-1
一个渲染人群的app

00:42:45.999 --> 00:42:48.902 align:middle line:-1
你可以根据底层硬件的性能

00:42:48.969 --> 00:42:50.270 align:middle line:-1
设置人群的大小

00:42:50.337 --> 00:42:53.807 align:middle line:-1
你的代码将根据当时运行的设备

00:42:53.874 --> 00:42:56.910 align:middle line:-1
自动进行自我调整

00:42:57.644 --> 00:43:00.747 align:middle line:-2
这就是有关如何使用
性能类的方法

