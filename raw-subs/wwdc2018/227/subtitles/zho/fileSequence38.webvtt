WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:55.609 --> 00:38:00.781 align:middle line:-1
第二个集合访问就是图形类

00:38:00.848 --> 00:38:03.650 align:middle line:-1
这其实反映了两件事

00:38:04.017 --> 00:38:07.588 align:middle line:-2
第一个就是
它们对应了Metal特征族集

00:38:07.654 --> 00:38:09.823 align:middle line:-2
若你是Metal程序员
你可能会对它熟悉

00:38:09.890 --> 00:38:11.525 align:middle line:-1
这个是GPU家族的概念

00:38:11.592 --> 00:38:13.427 align:middle line:-1
但它们实际上也与

00:38:13.493 --> 00:38:17.764 align:middle line:-1
你设备的处理器版本有关

00:38:18.298 --> 00:38:22.636 align:middle line:-2
Metal 1对应的是
Apple A7

00:38:22.703 --> 00:38:24.872 align:middle line:-2
而Metal 4对应的是
Apple A11处理器

00:38:25.272 --> 00:38:28.709 align:middle line:-1
我们允许你编类以及传送这些资源

00:38:28.775 --> 00:38:31.545 align:middle line:-1
到这些特定图形中的每一个类

00:38:31.612 --> 00:38:32.846 align:middle line:-1
（图形类）

00:38:32.913 --> 00:38:36.183 align:middle line:-2
对它们中的每个来说
本身就非常强大

00:38:36.250 --> 00:38:37.951 align:middle line:-1
有趣的是

00:38:38.018 --> 00:38:41.788 align:middle line:-1
你可以将这两个特征组合在一起

00:38:41.855 --> 00:38:44.024 align:middle line:-1
来形成一个完整的性能矩阵

00:38:44.091 --> 00:38:47.461 align:middle line:-2
你可以对如何
针对硬件环境调整你的资源

00:38:47.528 --> 00:38:49.830 align:middle line:-1
进行最后的校准

00:38:49.897 --> 00:38:51.932 align:middle line:-1
（完整性能矩阵）

00:38:51.999 --> 00:38:53.333 align:middle line:-1
这是如何实现的呢？

00:38:54.368 --> 00:38:58.038 align:middle line:-2
我想通过一个简单的例子
来向你们解释一下

00:38:58.105 --> 00:39:00.174 align:middle line:-2
这对于我们理解所做的事情来说
很关键

